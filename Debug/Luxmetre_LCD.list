
Luxmetre_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003760  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08003820  08003820  00013820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003924  08003924  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08003924  08003924  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003924  08003924  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003924  08003924  00013924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003928  08003928  00013928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800392c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08003930  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08003930  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004c17  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000152a  00000000  00000000  00024c43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  00026170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000620  00000000  00000000  00026868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e57f  00000000  00000000  00026e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005d32  00000000  00000000  00035407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004cc82  00000000  00000000  0003b139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00087dbb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018d4  00000000  00000000  00087e0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003808 	.word	0x08003808

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08003808 	.word	0x08003808

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_fmul>:
 80003f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f6:	464f      	mov	r7, r9
 80003f8:	4646      	mov	r6, r8
 80003fa:	46d6      	mov	lr, sl
 80003fc:	0244      	lsls	r4, r0, #9
 80003fe:	0045      	lsls	r5, r0, #1
 8000400:	b5c0      	push	{r6, r7, lr}
 8000402:	0a64      	lsrs	r4, r4, #9
 8000404:	1c0f      	adds	r7, r1, #0
 8000406:	0e2d      	lsrs	r5, r5, #24
 8000408:	0fc6      	lsrs	r6, r0, #31
 800040a:	2d00      	cmp	r5, #0
 800040c:	d100      	bne.n	8000410 <__aeabi_fmul+0x1c>
 800040e:	e08d      	b.n	800052c <__aeabi_fmul+0x138>
 8000410:	2dff      	cmp	r5, #255	; 0xff
 8000412:	d100      	bne.n	8000416 <__aeabi_fmul+0x22>
 8000414:	e092      	b.n	800053c <__aeabi_fmul+0x148>
 8000416:	2300      	movs	r3, #0
 8000418:	2080      	movs	r0, #128	; 0x80
 800041a:	4699      	mov	r9, r3
 800041c:	469a      	mov	sl, r3
 800041e:	00e4      	lsls	r4, r4, #3
 8000420:	04c0      	lsls	r0, r0, #19
 8000422:	4304      	orrs	r4, r0
 8000424:	3d7f      	subs	r5, #127	; 0x7f
 8000426:	0278      	lsls	r0, r7, #9
 8000428:	0a43      	lsrs	r3, r0, #9
 800042a:	4698      	mov	r8, r3
 800042c:	007b      	lsls	r3, r7, #1
 800042e:	0e1b      	lsrs	r3, r3, #24
 8000430:	0fff      	lsrs	r7, r7, #31
 8000432:	2b00      	cmp	r3, #0
 8000434:	d100      	bne.n	8000438 <__aeabi_fmul+0x44>
 8000436:	e070      	b.n	800051a <__aeabi_fmul+0x126>
 8000438:	2bff      	cmp	r3, #255	; 0xff
 800043a:	d100      	bne.n	800043e <__aeabi_fmul+0x4a>
 800043c:	e086      	b.n	800054c <__aeabi_fmul+0x158>
 800043e:	4642      	mov	r2, r8
 8000440:	00d0      	lsls	r0, r2, #3
 8000442:	2280      	movs	r2, #128	; 0x80
 8000444:	3b7f      	subs	r3, #127	; 0x7f
 8000446:	18ed      	adds	r5, r5, r3
 8000448:	2300      	movs	r3, #0
 800044a:	04d2      	lsls	r2, r2, #19
 800044c:	4302      	orrs	r2, r0
 800044e:	4690      	mov	r8, r2
 8000450:	469c      	mov	ip, r3
 8000452:	0031      	movs	r1, r6
 8000454:	464b      	mov	r3, r9
 8000456:	4079      	eors	r1, r7
 8000458:	1c68      	adds	r0, r5, #1
 800045a:	2b0f      	cmp	r3, #15
 800045c:	d81c      	bhi.n	8000498 <__aeabi_fmul+0xa4>
 800045e:	4a76      	ldr	r2, [pc, #472]	; (8000638 <__aeabi_fmul+0x244>)
 8000460:	009b      	lsls	r3, r3, #2
 8000462:	58d3      	ldr	r3, [r2, r3]
 8000464:	469f      	mov	pc, r3
 8000466:	0039      	movs	r1, r7
 8000468:	4644      	mov	r4, r8
 800046a:	46e2      	mov	sl, ip
 800046c:	4653      	mov	r3, sl
 800046e:	2b02      	cmp	r3, #2
 8000470:	d00f      	beq.n	8000492 <__aeabi_fmul+0x9e>
 8000472:	2b03      	cmp	r3, #3
 8000474:	d100      	bne.n	8000478 <__aeabi_fmul+0x84>
 8000476:	e0d7      	b.n	8000628 <__aeabi_fmul+0x234>
 8000478:	2b01      	cmp	r3, #1
 800047a:	d137      	bne.n	80004ec <__aeabi_fmul+0xf8>
 800047c:	2000      	movs	r0, #0
 800047e:	2400      	movs	r4, #0
 8000480:	05c0      	lsls	r0, r0, #23
 8000482:	4320      	orrs	r0, r4
 8000484:	07c9      	lsls	r1, r1, #31
 8000486:	4308      	orrs	r0, r1
 8000488:	bce0      	pop	{r5, r6, r7}
 800048a:	46ba      	mov	sl, r7
 800048c:	46b1      	mov	r9, r6
 800048e:	46a8      	mov	r8, r5
 8000490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000492:	20ff      	movs	r0, #255	; 0xff
 8000494:	2400      	movs	r4, #0
 8000496:	e7f3      	b.n	8000480 <__aeabi_fmul+0x8c>
 8000498:	0c26      	lsrs	r6, r4, #16
 800049a:	0424      	lsls	r4, r4, #16
 800049c:	0c22      	lsrs	r2, r4, #16
 800049e:	4644      	mov	r4, r8
 80004a0:	0424      	lsls	r4, r4, #16
 80004a2:	0c24      	lsrs	r4, r4, #16
 80004a4:	4643      	mov	r3, r8
 80004a6:	0027      	movs	r7, r4
 80004a8:	0c1b      	lsrs	r3, r3, #16
 80004aa:	4357      	muls	r7, r2
 80004ac:	4374      	muls	r4, r6
 80004ae:	435a      	muls	r2, r3
 80004b0:	435e      	muls	r6, r3
 80004b2:	1912      	adds	r2, r2, r4
 80004b4:	0c3b      	lsrs	r3, r7, #16
 80004b6:	189b      	adds	r3, r3, r2
 80004b8:	429c      	cmp	r4, r3
 80004ba:	d903      	bls.n	80004c4 <__aeabi_fmul+0xd0>
 80004bc:	2280      	movs	r2, #128	; 0x80
 80004be:	0252      	lsls	r2, r2, #9
 80004c0:	4694      	mov	ip, r2
 80004c2:	4466      	add	r6, ip
 80004c4:	043f      	lsls	r7, r7, #16
 80004c6:	041a      	lsls	r2, r3, #16
 80004c8:	0c3f      	lsrs	r7, r7, #16
 80004ca:	19d2      	adds	r2, r2, r7
 80004cc:	0194      	lsls	r4, r2, #6
 80004ce:	1e67      	subs	r7, r4, #1
 80004d0:	41bc      	sbcs	r4, r7
 80004d2:	0c1b      	lsrs	r3, r3, #16
 80004d4:	0e92      	lsrs	r2, r2, #26
 80004d6:	199b      	adds	r3, r3, r6
 80004d8:	4314      	orrs	r4, r2
 80004da:	019b      	lsls	r3, r3, #6
 80004dc:	431c      	orrs	r4, r3
 80004de:	011b      	lsls	r3, r3, #4
 80004e0:	d400      	bmi.n	80004e4 <__aeabi_fmul+0xf0>
 80004e2:	e09b      	b.n	800061c <__aeabi_fmul+0x228>
 80004e4:	2301      	movs	r3, #1
 80004e6:	0862      	lsrs	r2, r4, #1
 80004e8:	401c      	ands	r4, r3
 80004ea:	4314      	orrs	r4, r2
 80004ec:	0002      	movs	r2, r0
 80004ee:	327f      	adds	r2, #127	; 0x7f
 80004f0:	2a00      	cmp	r2, #0
 80004f2:	dd64      	ble.n	80005be <__aeabi_fmul+0x1ca>
 80004f4:	0763      	lsls	r3, r4, #29
 80004f6:	d004      	beq.n	8000502 <__aeabi_fmul+0x10e>
 80004f8:	230f      	movs	r3, #15
 80004fa:	4023      	ands	r3, r4
 80004fc:	2b04      	cmp	r3, #4
 80004fe:	d000      	beq.n	8000502 <__aeabi_fmul+0x10e>
 8000500:	3404      	adds	r4, #4
 8000502:	0123      	lsls	r3, r4, #4
 8000504:	d503      	bpl.n	800050e <__aeabi_fmul+0x11a>
 8000506:	0002      	movs	r2, r0
 8000508:	4b4c      	ldr	r3, [pc, #304]	; (800063c <__aeabi_fmul+0x248>)
 800050a:	3280      	adds	r2, #128	; 0x80
 800050c:	401c      	ands	r4, r3
 800050e:	2afe      	cmp	r2, #254	; 0xfe
 8000510:	dcbf      	bgt.n	8000492 <__aeabi_fmul+0x9e>
 8000512:	01a4      	lsls	r4, r4, #6
 8000514:	0a64      	lsrs	r4, r4, #9
 8000516:	b2d0      	uxtb	r0, r2
 8000518:	e7b2      	b.n	8000480 <__aeabi_fmul+0x8c>
 800051a:	4643      	mov	r3, r8
 800051c:	2b00      	cmp	r3, #0
 800051e:	d13d      	bne.n	800059c <__aeabi_fmul+0x1a8>
 8000520:	464a      	mov	r2, r9
 8000522:	3301      	adds	r3, #1
 8000524:	431a      	orrs	r2, r3
 8000526:	4691      	mov	r9, r2
 8000528:	469c      	mov	ip, r3
 800052a:	e792      	b.n	8000452 <__aeabi_fmul+0x5e>
 800052c:	2c00      	cmp	r4, #0
 800052e:	d129      	bne.n	8000584 <__aeabi_fmul+0x190>
 8000530:	2304      	movs	r3, #4
 8000532:	4699      	mov	r9, r3
 8000534:	3b03      	subs	r3, #3
 8000536:	2500      	movs	r5, #0
 8000538:	469a      	mov	sl, r3
 800053a:	e774      	b.n	8000426 <__aeabi_fmul+0x32>
 800053c:	2c00      	cmp	r4, #0
 800053e:	d11b      	bne.n	8000578 <__aeabi_fmul+0x184>
 8000540:	2308      	movs	r3, #8
 8000542:	4699      	mov	r9, r3
 8000544:	3b06      	subs	r3, #6
 8000546:	25ff      	movs	r5, #255	; 0xff
 8000548:	469a      	mov	sl, r3
 800054a:	e76c      	b.n	8000426 <__aeabi_fmul+0x32>
 800054c:	4643      	mov	r3, r8
 800054e:	35ff      	adds	r5, #255	; 0xff
 8000550:	2b00      	cmp	r3, #0
 8000552:	d10b      	bne.n	800056c <__aeabi_fmul+0x178>
 8000554:	2302      	movs	r3, #2
 8000556:	464a      	mov	r2, r9
 8000558:	431a      	orrs	r2, r3
 800055a:	4691      	mov	r9, r2
 800055c:	469c      	mov	ip, r3
 800055e:	e778      	b.n	8000452 <__aeabi_fmul+0x5e>
 8000560:	4653      	mov	r3, sl
 8000562:	0031      	movs	r1, r6
 8000564:	2b02      	cmp	r3, #2
 8000566:	d000      	beq.n	800056a <__aeabi_fmul+0x176>
 8000568:	e783      	b.n	8000472 <__aeabi_fmul+0x7e>
 800056a:	e792      	b.n	8000492 <__aeabi_fmul+0x9e>
 800056c:	2303      	movs	r3, #3
 800056e:	464a      	mov	r2, r9
 8000570:	431a      	orrs	r2, r3
 8000572:	4691      	mov	r9, r2
 8000574:	469c      	mov	ip, r3
 8000576:	e76c      	b.n	8000452 <__aeabi_fmul+0x5e>
 8000578:	230c      	movs	r3, #12
 800057a:	4699      	mov	r9, r3
 800057c:	3b09      	subs	r3, #9
 800057e:	25ff      	movs	r5, #255	; 0xff
 8000580:	469a      	mov	sl, r3
 8000582:	e750      	b.n	8000426 <__aeabi_fmul+0x32>
 8000584:	0020      	movs	r0, r4
 8000586:	f001 faa5 	bl	8001ad4 <__clzsi2>
 800058a:	2576      	movs	r5, #118	; 0x76
 800058c:	1f43      	subs	r3, r0, #5
 800058e:	409c      	lsls	r4, r3
 8000590:	2300      	movs	r3, #0
 8000592:	426d      	negs	r5, r5
 8000594:	4699      	mov	r9, r3
 8000596:	469a      	mov	sl, r3
 8000598:	1a2d      	subs	r5, r5, r0
 800059a:	e744      	b.n	8000426 <__aeabi_fmul+0x32>
 800059c:	4640      	mov	r0, r8
 800059e:	f001 fa99 	bl	8001ad4 <__clzsi2>
 80005a2:	4642      	mov	r2, r8
 80005a4:	1f43      	subs	r3, r0, #5
 80005a6:	409a      	lsls	r2, r3
 80005a8:	2300      	movs	r3, #0
 80005aa:	1a2d      	subs	r5, r5, r0
 80005ac:	4690      	mov	r8, r2
 80005ae:	469c      	mov	ip, r3
 80005b0:	3d76      	subs	r5, #118	; 0x76
 80005b2:	e74e      	b.n	8000452 <__aeabi_fmul+0x5e>
 80005b4:	2480      	movs	r4, #128	; 0x80
 80005b6:	2100      	movs	r1, #0
 80005b8:	20ff      	movs	r0, #255	; 0xff
 80005ba:	03e4      	lsls	r4, r4, #15
 80005bc:	e760      	b.n	8000480 <__aeabi_fmul+0x8c>
 80005be:	2301      	movs	r3, #1
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	2b1b      	cmp	r3, #27
 80005c4:	dd00      	ble.n	80005c8 <__aeabi_fmul+0x1d4>
 80005c6:	e759      	b.n	800047c <__aeabi_fmul+0x88>
 80005c8:	0022      	movs	r2, r4
 80005ca:	309e      	adds	r0, #158	; 0x9e
 80005cc:	40da      	lsrs	r2, r3
 80005ce:	4084      	lsls	r4, r0
 80005d0:	0013      	movs	r3, r2
 80005d2:	1e62      	subs	r2, r4, #1
 80005d4:	4194      	sbcs	r4, r2
 80005d6:	431c      	orrs	r4, r3
 80005d8:	0763      	lsls	r3, r4, #29
 80005da:	d004      	beq.n	80005e6 <__aeabi_fmul+0x1f2>
 80005dc:	230f      	movs	r3, #15
 80005de:	4023      	ands	r3, r4
 80005e0:	2b04      	cmp	r3, #4
 80005e2:	d000      	beq.n	80005e6 <__aeabi_fmul+0x1f2>
 80005e4:	3404      	adds	r4, #4
 80005e6:	0163      	lsls	r3, r4, #5
 80005e8:	d51a      	bpl.n	8000620 <__aeabi_fmul+0x22c>
 80005ea:	2001      	movs	r0, #1
 80005ec:	2400      	movs	r4, #0
 80005ee:	e747      	b.n	8000480 <__aeabi_fmul+0x8c>
 80005f0:	2080      	movs	r0, #128	; 0x80
 80005f2:	03c0      	lsls	r0, r0, #15
 80005f4:	4204      	tst	r4, r0
 80005f6:	d009      	beq.n	800060c <__aeabi_fmul+0x218>
 80005f8:	4643      	mov	r3, r8
 80005fa:	4203      	tst	r3, r0
 80005fc:	d106      	bne.n	800060c <__aeabi_fmul+0x218>
 80005fe:	4644      	mov	r4, r8
 8000600:	4304      	orrs	r4, r0
 8000602:	0264      	lsls	r4, r4, #9
 8000604:	0039      	movs	r1, r7
 8000606:	20ff      	movs	r0, #255	; 0xff
 8000608:	0a64      	lsrs	r4, r4, #9
 800060a:	e739      	b.n	8000480 <__aeabi_fmul+0x8c>
 800060c:	2080      	movs	r0, #128	; 0x80
 800060e:	03c0      	lsls	r0, r0, #15
 8000610:	4304      	orrs	r4, r0
 8000612:	0264      	lsls	r4, r4, #9
 8000614:	0031      	movs	r1, r6
 8000616:	20ff      	movs	r0, #255	; 0xff
 8000618:	0a64      	lsrs	r4, r4, #9
 800061a:	e731      	b.n	8000480 <__aeabi_fmul+0x8c>
 800061c:	0028      	movs	r0, r5
 800061e:	e765      	b.n	80004ec <__aeabi_fmul+0xf8>
 8000620:	01a4      	lsls	r4, r4, #6
 8000622:	2000      	movs	r0, #0
 8000624:	0a64      	lsrs	r4, r4, #9
 8000626:	e72b      	b.n	8000480 <__aeabi_fmul+0x8c>
 8000628:	2080      	movs	r0, #128	; 0x80
 800062a:	03c0      	lsls	r0, r0, #15
 800062c:	4304      	orrs	r4, r0
 800062e:	0264      	lsls	r4, r4, #9
 8000630:	20ff      	movs	r0, #255	; 0xff
 8000632:	0a64      	lsrs	r4, r4, #9
 8000634:	e724      	b.n	8000480 <__aeabi_fmul+0x8c>
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	08003840 	.word	0x08003840
 800063c:	f7ffffff 	.word	0xf7ffffff

08000640 <__aeabi_f2iz>:
 8000640:	0241      	lsls	r1, r0, #9
 8000642:	0042      	lsls	r2, r0, #1
 8000644:	0fc3      	lsrs	r3, r0, #31
 8000646:	0a49      	lsrs	r1, r1, #9
 8000648:	2000      	movs	r0, #0
 800064a:	0e12      	lsrs	r2, r2, #24
 800064c:	2a7e      	cmp	r2, #126	; 0x7e
 800064e:	dd03      	ble.n	8000658 <__aeabi_f2iz+0x18>
 8000650:	2a9d      	cmp	r2, #157	; 0x9d
 8000652:	dd02      	ble.n	800065a <__aeabi_f2iz+0x1a>
 8000654:	4a09      	ldr	r2, [pc, #36]	; (800067c <__aeabi_f2iz+0x3c>)
 8000656:	1898      	adds	r0, r3, r2
 8000658:	4770      	bx	lr
 800065a:	2080      	movs	r0, #128	; 0x80
 800065c:	0400      	lsls	r0, r0, #16
 800065e:	4301      	orrs	r1, r0
 8000660:	2a95      	cmp	r2, #149	; 0x95
 8000662:	dc07      	bgt.n	8000674 <__aeabi_f2iz+0x34>
 8000664:	2096      	movs	r0, #150	; 0x96
 8000666:	1a82      	subs	r2, r0, r2
 8000668:	40d1      	lsrs	r1, r2
 800066a:	4248      	negs	r0, r1
 800066c:	2b00      	cmp	r3, #0
 800066e:	d1f3      	bne.n	8000658 <__aeabi_f2iz+0x18>
 8000670:	0008      	movs	r0, r1
 8000672:	e7f1      	b.n	8000658 <__aeabi_f2iz+0x18>
 8000674:	3a96      	subs	r2, #150	; 0x96
 8000676:	4091      	lsls	r1, r2
 8000678:	e7f7      	b.n	800066a <__aeabi_f2iz+0x2a>
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	7fffffff 	.word	0x7fffffff

08000680 <__aeabi_ddiv>:
 8000680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000682:	4657      	mov	r7, sl
 8000684:	464e      	mov	r6, r9
 8000686:	4645      	mov	r5, r8
 8000688:	46de      	mov	lr, fp
 800068a:	b5e0      	push	{r5, r6, r7, lr}
 800068c:	4681      	mov	r9, r0
 800068e:	0005      	movs	r5, r0
 8000690:	030c      	lsls	r4, r1, #12
 8000692:	0048      	lsls	r0, r1, #1
 8000694:	4692      	mov	sl, r2
 8000696:	001f      	movs	r7, r3
 8000698:	b085      	sub	sp, #20
 800069a:	0b24      	lsrs	r4, r4, #12
 800069c:	0d40      	lsrs	r0, r0, #21
 800069e:	0fce      	lsrs	r6, r1, #31
 80006a0:	2800      	cmp	r0, #0
 80006a2:	d100      	bne.n	80006a6 <__aeabi_ddiv+0x26>
 80006a4:	e156      	b.n	8000954 <__aeabi_ddiv+0x2d4>
 80006a6:	4bd4      	ldr	r3, [pc, #848]	; (80009f8 <__aeabi_ddiv+0x378>)
 80006a8:	4298      	cmp	r0, r3
 80006aa:	d100      	bne.n	80006ae <__aeabi_ddiv+0x2e>
 80006ac:	e172      	b.n	8000994 <__aeabi_ddiv+0x314>
 80006ae:	0f6b      	lsrs	r3, r5, #29
 80006b0:	00e4      	lsls	r4, r4, #3
 80006b2:	431c      	orrs	r4, r3
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	041b      	lsls	r3, r3, #16
 80006b8:	4323      	orrs	r3, r4
 80006ba:	4698      	mov	r8, r3
 80006bc:	4bcf      	ldr	r3, [pc, #828]	; (80009fc <__aeabi_ddiv+0x37c>)
 80006be:	00ed      	lsls	r5, r5, #3
 80006c0:	469b      	mov	fp, r3
 80006c2:	2300      	movs	r3, #0
 80006c4:	4699      	mov	r9, r3
 80006c6:	4483      	add	fp, r0
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	033c      	lsls	r4, r7, #12
 80006cc:	007b      	lsls	r3, r7, #1
 80006ce:	4650      	mov	r0, sl
 80006d0:	0b24      	lsrs	r4, r4, #12
 80006d2:	0d5b      	lsrs	r3, r3, #21
 80006d4:	0fff      	lsrs	r7, r7, #31
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d100      	bne.n	80006dc <__aeabi_ddiv+0x5c>
 80006da:	e11f      	b.n	800091c <__aeabi_ddiv+0x29c>
 80006dc:	4ac6      	ldr	r2, [pc, #792]	; (80009f8 <__aeabi_ddiv+0x378>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d100      	bne.n	80006e4 <__aeabi_ddiv+0x64>
 80006e2:	e162      	b.n	80009aa <__aeabi_ddiv+0x32a>
 80006e4:	49c5      	ldr	r1, [pc, #788]	; (80009fc <__aeabi_ddiv+0x37c>)
 80006e6:	0f42      	lsrs	r2, r0, #29
 80006e8:	468c      	mov	ip, r1
 80006ea:	00e4      	lsls	r4, r4, #3
 80006ec:	4659      	mov	r1, fp
 80006ee:	4314      	orrs	r4, r2
 80006f0:	2280      	movs	r2, #128	; 0x80
 80006f2:	4463      	add	r3, ip
 80006f4:	0412      	lsls	r2, r2, #16
 80006f6:	1acb      	subs	r3, r1, r3
 80006f8:	4314      	orrs	r4, r2
 80006fa:	469b      	mov	fp, r3
 80006fc:	00c2      	lsls	r2, r0, #3
 80006fe:	2000      	movs	r0, #0
 8000700:	0033      	movs	r3, r6
 8000702:	407b      	eors	r3, r7
 8000704:	469a      	mov	sl, r3
 8000706:	464b      	mov	r3, r9
 8000708:	2b0f      	cmp	r3, #15
 800070a:	d827      	bhi.n	800075c <__aeabi_ddiv+0xdc>
 800070c:	49bc      	ldr	r1, [pc, #752]	; (8000a00 <__aeabi_ddiv+0x380>)
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	58cb      	ldr	r3, [r1, r3]
 8000712:	469f      	mov	pc, r3
 8000714:	46b2      	mov	sl, r6
 8000716:	9b00      	ldr	r3, [sp, #0]
 8000718:	2b02      	cmp	r3, #2
 800071a:	d016      	beq.n	800074a <__aeabi_ddiv+0xca>
 800071c:	2b03      	cmp	r3, #3
 800071e:	d100      	bne.n	8000722 <__aeabi_ddiv+0xa2>
 8000720:	e28e      	b.n	8000c40 <__aeabi_ddiv+0x5c0>
 8000722:	2b01      	cmp	r3, #1
 8000724:	d000      	beq.n	8000728 <__aeabi_ddiv+0xa8>
 8000726:	e0d9      	b.n	80008dc <__aeabi_ddiv+0x25c>
 8000728:	2300      	movs	r3, #0
 800072a:	2400      	movs	r4, #0
 800072c:	2500      	movs	r5, #0
 800072e:	4652      	mov	r2, sl
 8000730:	051b      	lsls	r3, r3, #20
 8000732:	4323      	orrs	r3, r4
 8000734:	07d2      	lsls	r2, r2, #31
 8000736:	4313      	orrs	r3, r2
 8000738:	0028      	movs	r0, r5
 800073a:	0019      	movs	r1, r3
 800073c:	b005      	add	sp, #20
 800073e:	bcf0      	pop	{r4, r5, r6, r7}
 8000740:	46bb      	mov	fp, r7
 8000742:	46b2      	mov	sl, r6
 8000744:	46a9      	mov	r9, r5
 8000746:	46a0      	mov	r8, r4
 8000748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800074a:	2400      	movs	r4, #0
 800074c:	2500      	movs	r5, #0
 800074e:	4baa      	ldr	r3, [pc, #680]	; (80009f8 <__aeabi_ddiv+0x378>)
 8000750:	e7ed      	b.n	800072e <__aeabi_ddiv+0xae>
 8000752:	46ba      	mov	sl, r7
 8000754:	46a0      	mov	r8, r4
 8000756:	0015      	movs	r5, r2
 8000758:	9000      	str	r0, [sp, #0]
 800075a:	e7dc      	b.n	8000716 <__aeabi_ddiv+0x96>
 800075c:	4544      	cmp	r4, r8
 800075e:	d200      	bcs.n	8000762 <__aeabi_ddiv+0xe2>
 8000760:	e1c7      	b.n	8000af2 <__aeabi_ddiv+0x472>
 8000762:	d100      	bne.n	8000766 <__aeabi_ddiv+0xe6>
 8000764:	e1c2      	b.n	8000aec <__aeabi_ddiv+0x46c>
 8000766:	2301      	movs	r3, #1
 8000768:	425b      	negs	r3, r3
 800076a:	469c      	mov	ip, r3
 800076c:	002e      	movs	r6, r5
 800076e:	4640      	mov	r0, r8
 8000770:	2500      	movs	r5, #0
 8000772:	44e3      	add	fp, ip
 8000774:	0223      	lsls	r3, r4, #8
 8000776:	0e14      	lsrs	r4, r2, #24
 8000778:	431c      	orrs	r4, r3
 800077a:	0c1b      	lsrs	r3, r3, #16
 800077c:	4699      	mov	r9, r3
 800077e:	0423      	lsls	r3, r4, #16
 8000780:	0c1f      	lsrs	r7, r3, #16
 8000782:	0212      	lsls	r2, r2, #8
 8000784:	4649      	mov	r1, r9
 8000786:	9200      	str	r2, [sp, #0]
 8000788:	9701      	str	r7, [sp, #4]
 800078a:	f7ff fd43 	bl	8000214 <__aeabi_uidivmod>
 800078e:	0002      	movs	r2, r0
 8000790:	437a      	muls	r2, r7
 8000792:	040b      	lsls	r3, r1, #16
 8000794:	0c31      	lsrs	r1, r6, #16
 8000796:	4680      	mov	r8, r0
 8000798:	4319      	orrs	r1, r3
 800079a:	428a      	cmp	r2, r1
 800079c:	d907      	bls.n	80007ae <__aeabi_ddiv+0x12e>
 800079e:	2301      	movs	r3, #1
 80007a0:	425b      	negs	r3, r3
 80007a2:	469c      	mov	ip, r3
 80007a4:	1909      	adds	r1, r1, r4
 80007a6:	44e0      	add	r8, ip
 80007a8:	428c      	cmp	r4, r1
 80007aa:	d800      	bhi.n	80007ae <__aeabi_ddiv+0x12e>
 80007ac:	e207      	b.n	8000bbe <__aeabi_ddiv+0x53e>
 80007ae:	1a88      	subs	r0, r1, r2
 80007b0:	4649      	mov	r1, r9
 80007b2:	f7ff fd2f 	bl	8000214 <__aeabi_uidivmod>
 80007b6:	0409      	lsls	r1, r1, #16
 80007b8:	468c      	mov	ip, r1
 80007ba:	0431      	lsls	r1, r6, #16
 80007bc:	4666      	mov	r6, ip
 80007be:	9a01      	ldr	r2, [sp, #4]
 80007c0:	0c09      	lsrs	r1, r1, #16
 80007c2:	4342      	muls	r2, r0
 80007c4:	0003      	movs	r3, r0
 80007c6:	4331      	orrs	r1, r6
 80007c8:	428a      	cmp	r2, r1
 80007ca:	d904      	bls.n	80007d6 <__aeabi_ddiv+0x156>
 80007cc:	1909      	adds	r1, r1, r4
 80007ce:	3b01      	subs	r3, #1
 80007d0:	428c      	cmp	r4, r1
 80007d2:	d800      	bhi.n	80007d6 <__aeabi_ddiv+0x156>
 80007d4:	e1ed      	b.n	8000bb2 <__aeabi_ddiv+0x532>
 80007d6:	1a88      	subs	r0, r1, r2
 80007d8:	4642      	mov	r2, r8
 80007da:	0412      	lsls	r2, r2, #16
 80007dc:	431a      	orrs	r2, r3
 80007de:	4690      	mov	r8, r2
 80007e0:	4641      	mov	r1, r8
 80007e2:	9b00      	ldr	r3, [sp, #0]
 80007e4:	040e      	lsls	r6, r1, #16
 80007e6:	0c1b      	lsrs	r3, r3, #16
 80007e8:	001f      	movs	r7, r3
 80007ea:	9302      	str	r3, [sp, #8]
 80007ec:	9b00      	ldr	r3, [sp, #0]
 80007ee:	0c36      	lsrs	r6, r6, #16
 80007f0:	041b      	lsls	r3, r3, #16
 80007f2:	0c19      	lsrs	r1, r3, #16
 80007f4:	000b      	movs	r3, r1
 80007f6:	4373      	muls	r3, r6
 80007f8:	0c12      	lsrs	r2, r2, #16
 80007fa:	437e      	muls	r6, r7
 80007fc:	9103      	str	r1, [sp, #12]
 80007fe:	4351      	muls	r1, r2
 8000800:	437a      	muls	r2, r7
 8000802:	0c1f      	lsrs	r7, r3, #16
 8000804:	46bc      	mov	ip, r7
 8000806:	1876      	adds	r6, r6, r1
 8000808:	4466      	add	r6, ip
 800080a:	42b1      	cmp	r1, r6
 800080c:	d903      	bls.n	8000816 <__aeabi_ddiv+0x196>
 800080e:	2180      	movs	r1, #128	; 0x80
 8000810:	0249      	lsls	r1, r1, #9
 8000812:	468c      	mov	ip, r1
 8000814:	4462      	add	r2, ip
 8000816:	0c31      	lsrs	r1, r6, #16
 8000818:	188a      	adds	r2, r1, r2
 800081a:	0431      	lsls	r1, r6, #16
 800081c:	041e      	lsls	r6, r3, #16
 800081e:	0c36      	lsrs	r6, r6, #16
 8000820:	198e      	adds	r6, r1, r6
 8000822:	4290      	cmp	r0, r2
 8000824:	d302      	bcc.n	800082c <__aeabi_ddiv+0x1ac>
 8000826:	d112      	bne.n	800084e <__aeabi_ddiv+0x1ce>
 8000828:	42b5      	cmp	r5, r6
 800082a:	d210      	bcs.n	800084e <__aeabi_ddiv+0x1ce>
 800082c:	4643      	mov	r3, r8
 800082e:	1e59      	subs	r1, r3, #1
 8000830:	9b00      	ldr	r3, [sp, #0]
 8000832:	469c      	mov	ip, r3
 8000834:	4465      	add	r5, ip
 8000836:	001f      	movs	r7, r3
 8000838:	429d      	cmp	r5, r3
 800083a:	419b      	sbcs	r3, r3
 800083c:	425b      	negs	r3, r3
 800083e:	191b      	adds	r3, r3, r4
 8000840:	18c0      	adds	r0, r0, r3
 8000842:	4284      	cmp	r4, r0
 8000844:	d200      	bcs.n	8000848 <__aeabi_ddiv+0x1c8>
 8000846:	e1a0      	b.n	8000b8a <__aeabi_ddiv+0x50a>
 8000848:	d100      	bne.n	800084c <__aeabi_ddiv+0x1cc>
 800084a:	e19b      	b.n	8000b84 <__aeabi_ddiv+0x504>
 800084c:	4688      	mov	r8, r1
 800084e:	1bae      	subs	r6, r5, r6
 8000850:	42b5      	cmp	r5, r6
 8000852:	41ad      	sbcs	r5, r5
 8000854:	1a80      	subs	r0, r0, r2
 8000856:	426d      	negs	r5, r5
 8000858:	1b40      	subs	r0, r0, r5
 800085a:	4284      	cmp	r4, r0
 800085c:	d100      	bne.n	8000860 <__aeabi_ddiv+0x1e0>
 800085e:	e1d5      	b.n	8000c0c <__aeabi_ddiv+0x58c>
 8000860:	4649      	mov	r1, r9
 8000862:	f7ff fcd7 	bl	8000214 <__aeabi_uidivmod>
 8000866:	9a01      	ldr	r2, [sp, #4]
 8000868:	040b      	lsls	r3, r1, #16
 800086a:	4342      	muls	r2, r0
 800086c:	0c31      	lsrs	r1, r6, #16
 800086e:	0005      	movs	r5, r0
 8000870:	4319      	orrs	r1, r3
 8000872:	428a      	cmp	r2, r1
 8000874:	d900      	bls.n	8000878 <__aeabi_ddiv+0x1f8>
 8000876:	e16c      	b.n	8000b52 <__aeabi_ddiv+0x4d2>
 8000878:	1a88      	subs	r0, r1, r2
 800087a:	4649      	mov	r1, r9
 800087c:	f7ff fcca 	bl	8000214 <__aeabi_uidivmod>
 8000880:	9a01      	ldr	r2, [sp, #4]
 8000882:	0436      	lsls	r6, r6, #16
 8000884:	4342      	muls	r2, r0
 8000886:	0409      	lsls	r1, r1, #16
 8000888:	0c36      	lsrs	r6, r6, #16
 800088a:	0003      	movs	r3, r0
 800088c:	430e      	orrs	r6, r1
 800088e:	42b2      	cmp	r2, r6
 8000890:	d900      	bls.n	8000894 <__aeabi_ddiv+0x214>
 8000892:	e153      	b.n	8000b3c <__aeabi_ddiv+0x4bc>
 8000894:	9803      	ldr	r0, [sp, #12]
 8000896:	1ab6      	subs	r6, r6, r2
 8000898:	0002      	movs	r2, r0
 800089a:	042d      	lsls	r5, r5, #16
 800089c:	431d      	orrs	r5, r3
 800089e:	9f02      	ldr	r7, [sp, #8]
 80008a0:	042b      	lsls	r3, r5, #16
 80008a2:	0c1b      	lsrs	r3, r3, #16
 80008a4:	435a      	muls	r2, r3
 80008a6:	437b      	muls	r3, r7
 80008a8:	469c      	mov	ip, r3
 80008aa:	0c29      	lsrs	r1, r5, #16
 80008ac:	4348      	muls	r0, r1
 80008ae:	0c13      	lsrs	r3, r2, #16
 80008b0:	4484      	add	ip, r0
 80008b2:	4463      	add	r3, ip
 80008b4:	4379      	muls	r1, r7
 80008b6:	4298      	cmp	r0, r3
 80008b8:	d903      	bls.n	80008c2 <__aeabi_ddiv+0x242>
 80008ba:	2080      	movs	r0, #128	; 0x80
 80008bc:	0240      	lsls	r0, r0, #9
 80008be:	4684      	mov	ip, r0
 80008c0:	4461      	add	r1, ip
 80008c2:	0c18      	lsrs	r0, r3, #16
 80008c4:	0412      	lsls	r2, r2, #16
 80008c6:	041b      	lsls	r3, r3, #16
 80008c8:	0c12      	lsrs	r2, r2, #16
 80008ca:	1841      	adds	r1, r0, r1
 80008cc:	189b      	adds	r3, r3, r2
 80008ce:	428e      	cmp	r6, r1
 80008d0:	d200      	bcs.n	80008d4 <__aeabi_ddiv+0x254>
 80008d2:	e0ff      	b.n	8000ad4 <__aeabi_ddiv+0x454>
 80008d4:	d100      	bne.n	80008d8 <__aeabi_ddiv+0x258>
 80008d6:	e0fa      	b.n	8000ace <__aeabi_ddiv+0x44e>
 80008d8:	2301      	movs	r3, #1
 80008da:	431d      	orrs	r5, r3
 80008dc:	4a49      	ldr	r2, [pc, #292]	; (8000a04 <__aeabi_ddiv+0x384>)
 80008de:	445a      	add	r2, fp
 80008e0:	2a00      	cmp	r2, #0
 80008e2:	dc00      	bgt.n	80008e6 <__aeabi_ddiv+0x266>
 80008e4:	e0aa      	b.n	8000a3c <__aeabi_ddiv+0x3bc>
 80008e6:	076b      	lsls	r3, r5, #29
 80008e8:	d000      	beq.n	80008ec <__aeabi_ddiv+0x26c>
 80008ea:	e13d      	b.n	8000b68 <__aeabi_ddiv+0x4e8>
 80008ec:	08ed      	lsrs	r5, r5, #3
 80008ee:	4643      	mov	r3, r8
 80008f0:	01db      	lsls	r3, r3, #7
 80008f2:	d506      	bpl.n	8000902 <__aeabi_ddiv+0x282>
 80008f4:	4642      	mov	r2, r8
 80008f6:	4b44      	ldr	r3, [pc, #272]	; (8000a08 <__aeabi_ddiv+0x388>)
 80008f8:	401a      	ands	r2, r3
 80008fa:	4690      	mov	r8, r2
 80008fc:	2280      	movs	r2, #128	; 0x80
 80008fe:	00d2      	lsls	r2, r2, #3
 8000900:	445a      	add	r2, fp
 8000902:	4b42      	ldr	r3, [pc, #264]	; (8000a0c <__aeabi_ddiv+0x38c>)
 8000904:	429a      	cmp	r2, r3
 8000906:	dd00      	ble.n	800090a <__aeabi_ddiv+0x28a>
 8000908:	e71f      	b.n	800074a <__aeabi_ddiv+0xca>
 800090a:	4643      	mov	r3, r8
 800090c:	075b      	lsls	r3, r3, #29
 800090e:	431d      	orrs	r5, r3
 8000910:	4643      	mov	r3, r8
 8000912:	0552      	lsls	r2, r2, #21
 8000914:	025c      	lsls	r4, r3, #9
 8000916:	0b24      	lsrs	r4, r4, #12
 8000918:	0d53      	lsrs	r3, r2, #21
 800091a:	e708      	b.n	800072e <__aeabi_ddiv+0xae>
 800091c:	4652      	mov	r2, sl
 800091e:	4322      	orrs	r2, r4
 8000920:	d100      	bne.n	8000924 <__aeabi_ddiv+0x2a4>
 8000922:	e07b      	b.n	8000a1c <__aeabi_ddiv+0x39c>
 8000924:	2c00      	cmp	r4, #0
 8000926:	d100      	bne.n	800092a <__aeabi_ddiv+0x2aa>
 8000928:	e0fa      	b.n	8000b20 <__aeabi_ddiv+0x4a0>
 800092a:	0020      	movs	r0, r4
 800092c:	f001 f8d2 	bl	8001ad4 <__clzsi2>
 8000930:	0002      	movs	r2, r0
 8000932:	3a0b      	subs	r2, #11
 8000934:	231d      	movs	r3, #29
 8000936:	0001      	movs	r1, r0
 8000938:	1a9b      	subs	r3, r3, r2
 800093a:	4652      	mov	r2, sl
 800093c:	3908      	subs	r1, #8
 800093e:	40da      	lsrs	r2, r3
 8000940:	408c      	lsls	r4, r1
 8000942:	4314      	orrs	r4, r2
 8000944:	4652      	mov	r2, sl
 8000946:	408a      	lsls	r2, r1
 8000948:	4b31      	ldr	r3, [pc, #196]	; (8000a10 <__aeabi_ddiv+0x390>)
 800094a:	4458      	add	r0, fp
 800094c:	469b      	mov	fp, r3
 800094e:	4483      	add	fp, r0
 8000950:	2000      	movs	r0, #0
 8000952:	e6d5      	b.n	8000700 <__aeabi_ddiv+0x80>
 8000954:	464b      	mov	r3, r9
 8000956:	4323      	orrs	r3, r4
 8000958:	4698      	mov	r8, r3
 800095a:	d044      	beq.n	80009e6 <__aeabi_ddiv+0x366>
 800095c:	2c00      	cmp	r4, #0
 800095e:	d100      	bne.n	8000962 <__aeabi_ddiv+0x2e2>
 8000960:	e0ce      	b.n	8000b00 <__aeabi_ddiv+0x480>
 8000962:	0020      	movs	r0, r4
 8000964:	f001 f8b6 	bl	8001ad4 <__clzsi2>
 8000968:	0001      	movs	r1, r0
 800096a:	0002      	movs	r2, r0
 800096c:	390b      	subs	r1, #11
 800096e:	231d      	movs	r3, #29
 8000970:	1a5b      	subs	r3, r3, r1
 8000972:	4649      	mov	r1, r9
 8000974:	0010      	movs	r0, r2
 8000976:	40d9      	lsrs	r1, r3
 8000978:	3808      	subs	r0, #8
 800097a:	4084      	lsls	r4, r0
 800097c:	000b      	movs	r3, r1
 800097e:	464d      	mov	r5, r9
 8000980:	4323      	orrs	r3, r4
 8000982:	4698      	mov	r8, r3
 8000984:	4085      	lsls	r5, r0
 8000986:	4823      	ldr	r0, [pc, #140]	; (8000a14 <__aeabi_ddiv+0x394>)
 8000988:	1a83      	subs	r3, r0, r2
 800098a:	469b      	mov	fp, r3
 800098c:	2300      	movs	r3, #0
 800098e:	4699      	mov	r9, r3
 8000990:	9300      	str	r3, [sp, #0]
 8000992:	e69a      	b.n	80006ca <__aeabi_ddiv+0x4a>
 8000994:	464b      	mov	r3, r9
 8000996:	4323      	orrs	r3, r4
 8000998:	4698      	mov	r8, r3
 800099a:	d11d      	bne.n	80009d8 <__aeabi_ddiv+0x358>
 800099c:	2308      	movs	r3, #8
 800099e:	4699      	mov	r9, r3
 80009a0:	3b06      	subs	r3, #6
 80009a2:	2500      	movs	r5, #0
 80009a4:	4683      	mov	fp, r0
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	e68f      	b.n	80006ca <__aeabi_ddiv+0x4a>
 80009aa:	4652      	mov	r2, sl
 80009ac:	4322      	orrs	r2, r4
 80009ae:	d109      	bne.n	80009c4 <__aeabi_ddiv+0x344>
 80009b0:	2302      	movs	r3, #2
 80009b2:	4649      	mov	r1, r9
 80009b4:	4319      	orrs	r1, r3
 80009b6:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <__aeabi_ddiv+0x398>)
 80009b8:	4689      	mov	r9, r1
 80009ba:	469c      	mov	ip, r3
 80009bc:	2400      	movs	r4, #0
 80009be:	2002      	movs	r0, #2
 80009c0:	44e3      	add	fp, ip
 80009c2:	e69d      	b.n	8000700 <__aeabi_ddiv+0x80>
 80009c4:	2303      	movs	r3, #3
 80009c6:	464a      	mov	r2, r9
 80009c8:	431a      	orrs	r2, r3
 80009ca:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <__aeabi_ddiv+0x398>)
 80009cc:	4691      	mov	r9, r2
 80009ce:	469c      	mov	ip, r3
 80009d0:	4652      	mov	r2, sl
 80009d2:	2003      	movs	r0, #3
 80009d4:	44e3      	add	fp, ip
 80009d6:	e693      	b.n	8000700 <__aeabi_ddiv+0x80>
 80009d8:	230c      	movs	r3, #12
 80009da:	4699      	mov	r9, r3
 80009dc:	3b09      	subs	r3, #9
 80009de:	46a0      	mov	r8, r4
 80009e0:	4683      	mov	fp, r0
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	e671      	b.n	80006ca <__aeabi_ddiv+0x4a>
 80009e6:	2304      	movs	r3, #4
 80009e8:	4699      	mov	r9, r3
 80009ea:	2300      	movs	r3, #0
 80009ec:	469b      	mov	fp, r3
 80009ee:	3301      	adds	r3, #1
 80009f0:	2500      	movs	r5, #0
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	e669      	b.n	80006ca <__aeabi_ddiv+0x4a>
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	000007ff 	.word	0x000007ff
 80009fc:	fffffc01 	.word	0xfffffc01
 8000a00:	08003880 	.word	0x08003880
 8000a04:	000003ff 	.word	0x000003ff
 8000a08:	feffffff 	.word	0xfeffffff
 8000a0c:	000007fe 	.word	0x000007fe
 8000a10:	000003f3 	.word	0x000003f3
 8000a14:	fffffc0d 	.word	0xfffffc0d
 8000a18:	fffff801 	.word	0xfffff801
 8000a1c:	4649      	mov	r1, r9
 8000a1e:	2301      	movs	r3, #1
 8000a20:	4319      	orrs	r1, r3
 8000a22:	4689      	mov	r9, r1
 8000a24:	2400      	movs	r4, #0
 8000a26:	2001      	movs	r0, #1
 8000a28:	e66a      	b.n	8000700 <__aeabi_ddiv+0x80>
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	2480      	movs	r4, #128	; 0x80
 8000a2e:	469a      	mov	sl, r3
 8000a30:	2500      	movs	r5, #0
 8000a32:	4b8a      	ldr	r3, [pc, #552]	; (8000c5c <__aeabi_ddiv+0x5dc>)
 8000a34:	0324      	lsls	r4, r4, #12
 8000a36:	e67a      	b.n	800072e <__aeabi_ddiv+0xae>
 8000a38:	2501      	movs	r5, #1
 8000a3a:	426d      	negs	r5, r5
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	1a9b      	subs	r3, r3, r2
 8000a40:	2b38      	cmp	r3, #56	; 0x38
 8000a42:	dd00      	ble.n	8000a46 <__aeabi_ddiv+0x3c6>
 8000a44:	e670      	b.n	8000728 <__aeabi_ddiv+0xa8>
 8000a46:	2b1f      	cmp	r3, #31
 8000a48:	dc00      	bgt.n	8000a4c <__aeabi_ddiv+0x3cc>
 8000a4a:	e0bf      	b.n	8000bcc <__aeabi_ddiv+0x54c>
 8000a4c:	211f      	movs	r1, #31
 8000a4e:	4249      	negs	r1, r1
 8000a50:	1a8a      	subs	r2, r1, r2
 8000a52:	4641      	mov	r1, r8
 8000a54:	40d1      	lsrs	r1, r2
 8000a56:	000a      	movs	r2, r1
 8000a58:	2b20      	cmp	r3, #32
 8000a5a:	d004      	beq.n	8000a66 <__aeabi_ddiv+0x3e6>
 8000a5c:	4641      	mov	r1, r8
 8000a5e:	4b80      	ldr	r3, [pc, #512]	; (8000c60 <__aeabi_ddiv+0x5e0>)
 8000a60:	445b      	add	r3, fp
 8000a62:	4099      	lsls	r1, r3
 8000a64:	430d      	orrs	r5, r1
 8000a66:	1e6b      	subs	r3, r5, #1
 8000a68:	419d      	sbcs	r5, r3
 8000a6a:	2307      	movs	r3, #7
 8000a6c:	432a      	orrs	r2, r5
 8000a6e:	001d      	movs	r5, r3
 8000a70:	2400      	movs	r4, #0
 8000a72:	4015      	ands	r5, r2
 8000a74:	4213      	tst	r3, r2
 8000a76:	d100      	bne.n	8000a7a <__aeabi_ddiv+0x3fa>
 8000a78:	e0d4      	b.n	8000c24 <__aeabi_ddiv+0x5a4>
 8000a7a:	210f      	movs	r1, #15
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	4011      	ands	r1, r2
 8000a80:	2904      	cmp	r1, #4
 8000a82:	d100      	bne.n	8000a86 <__aeabi_ddiv+0x406>
 8000a84:	e0cb      	b.n	8000c1e <__aeabi_ddiv+0x59e>
 8000a86:	1d11      	adds	r1, r2, #4
 8000a88:	4291      	cmp	r1, r2
 8000a8a:	4192      	sbcs	r2, r2
 8000a8c:	4252      	negs	r2, r2
 8000a8e:	189b      	adds	r3, r3, r2
 8000a90:	000a      	movs	r2, r1
 8000a92:	0219      	lsls	r1, r3, #8
 8000a94:	d400      	bmi.n	8000a98 <__aeabi_ddiv+0x418>
 8000a96:	e0c2      	b.n	8000c1e <__aeabi_ddiv+0x59e>
 8000a98:	2301      	movs	r3, #1
 8000a9a:	2400      	movs	r4, #0
 8000a9c:	2500      	movs	r5, #0
 8000a9e:	e646      	b.n	800072e <__aeabi_ddiv+0xae>
 8000aa0:	2380      	movs	r3, #128	; 0x80
 8000aa2:	4641      	mov	r1, r8
 8000aa4:	031b      	lsls	r3, r3, #12
 8000aa6:	4219      	tst	r1, r3
 8000aa8:	d008      	beq.n	8000abc <__aeabi_ddiv+0x43c>
 8000aaa:	421c      	tst	r4, r3
 8000aac:	d106      	bne.n	8000abc <__aeabi_ddiv+0x43c>
 8000aae:	431c      	orrs	r4, r3
 8000ab0:	0324      	lsls	r4, r4, #12
 8000ab2:	46ba      	mov	sl, r7
 8000ab4:	0015      	movs	r5, r2
 8000ab6:	4b69      	ldr	r3, [pc, #420]	; (8000c5c <__aeabi_ddiv+0x5dc>)
 8000ab8:	0b24      	lsrs	r4, r4, #12
 8000aba:	e638      	b.n	800072e <__aeabi_ddiv+0xae>
 8000abc:	2480      	movs	r4, #128	; 0x80
 8000abe:	4643      	mov	r3, r8
 8000ac0:	0324      	lsls	r4, r4, #12
 8000ac2:	431c      	orrs	r4, r3
 8000ac4:	0324      	lsls	r4, r4, #12
 8000ac6:	46b2      	mov	sl, r6
 8000ac8:	4b64      	ldr	r3, [pc, #400]	; (8000c5c <__aeabi_ddiv+0x5dc>)
 8000aca:	0b24      	lsrs	r4, r4, #12
 8000acc:	e62f      	b.n	800072e <__aeabi_ddiv+0xae>
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_ddiv+0x454>
 8000ad2:	e703      	b.n	80008dc <__aeabi_ddiv+0x25c>
 8000ad4:	19a6      	adds	r6, r4, r6
 8000ad6:	1e68      	subs	r0, r5, #1
 8000ad8:	42a6      	cmp	r6, r4
 8000ada:	d200      	bcs.n	8000ade <__aeabi_ddiv+0x45e>
 8000adc:	e08d      	b.n	8000bfa <__aeabi_ddiv+0x57a>
 8000ade:	428e      	cmp	r6, r1
 8000ae0:	d200      	bcs.n	8000ae4 <__aeabi_ddiv+0x464>
 8000ae2:	e0a3      	b.n	8000c2c <__aeabi_ddiv+0x5ac>
 8000ae4:	d100      	bne.n	8000ae8 <__aeabi_ddiv+0x468>
 8000ae6:	e0b3      	b.n	8000c50 <__aeabi_ddiv+0x5d0>
 8000ae8:	0005      	movs	r5, r0
 8000aea:	e6f5      	b.n	80008d8 <__aeabi_ddiv+0x258>
 8000aec:	42aa      	cmp	r2, r5
 8000aee:	d900      	bls.n	8000af2 <__aeabi_ddiv+0x472>
 8000af0:	e639      	b.n	8000766 <__aeabi_ddiv+0xe6>
 8000af2:	4643      	mov	r3, r8
 8000af4:	07de      	lsls	r6, r3, #31
 8000af6:	0858      	lsrs	r0, r3, #1
 8000af8:	086b      	lsrs	r3, r5, #1
 8000afa:	431e      	orrs	r6, r3
 8000afc:	07ed      	lsls	r5, r5, #31
 8000afe:	e639      	b.n	8000774 <__aeabi_ddiv+0xf4>
 8000b00:	4648      	mov	r0, r9
 8000b02:	f000 ffe7 	bl	8001ad4 <__clzsi2>
 8000b06:	0001      	movs	r1, r0
 8000b08:	0002      	movs	r2, r0
 8000b0a:	3115      	adds	r1, #21
 8000b0c:	3220      	adds	r2, #32
 8000b0e:	291c      	cmp	r1, #28
 8000b10:	dc00      	bgt.n	8000b14 <__aeabi_ddiv+0x494>
 8000b12:	e72c      	b.n	800096e <__aeabi_ddiv+0x2ee>
 8000b14:	464b      	mov	r3, r9
 8000b16:	3808      	subs	r0, #8
 8000b18:	4083      	lsls	r3, r0
 8000b1a:	2500      	movs	r5, #0
 8000b1c:	4698      	mov	r8, r3
 8000b1e:	e732      	b.n	8000986 <__aeabi_ddiv+0x306>
 8000b20:	f000 ffd8 	bl	8001ad4 <__clzsi2>
 8000b24:	0003      	movs	r3, r0
 8000b26:	001a      	movs	r2, r3
 8000b28:	3215      	adds	r2, #21
 8000b2a:	3020      	adds	r0, #32
 8000b2c:	2a1c      	cmp	r2, #28
 8000b2e:	dc00      	bgt.n	8000b32 <__aeabi_ddiv+0x4b2>
 8000b30:	e700      	b.n	8000934 <__aeabi_ddiv+0x2b4>
 8000b32:	4654      	mov	r4, sl
 8000b34:	3b08      	subs	r3, #8
 8000b36:	2200      	movs	r2, #0
 8000b38:	409c      	lsls	r4, r3
 8000b3a:	e705      	b.n	8000948 <__aeabi_ddiv+0x2c8>
 8000b3c:	1936      	adds	r6, r6, r4
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	42b4      	cmp	r4, r6
 8000b42:	d900      	bls.n	8000b46 <__aeabi_ddiv+0x4c6>
 8000b44:	e6a6      	b.n	8000894 <__aeabi_ddiv+0x214>
 8000b46:	42b2      	cmp	r2, r6
 8000b48:	d800      	bhi.n	8000b4c <__aeabi_ddiv+0x4cc>
 8000b4a:	e6a3      	b.n	8000894 <__aeabi_ddiv+0x214>
 8000b4c:	1e83      	subs	r3, r0, #2
 8000b4e:	1936      	adds	r6, r6, r4
 8000b50:	e6a0      	b.n	8000894 <__aeabi_ddiv+0x214>
 8000b52:	1909      	adds	r1, r1, r4
 8000b54:	3d01      	subs	r5, #1
 8000b56:	428c      	cmp	r4, r1
 8000b58:	d900      	bls.n	8000b5c <__aeabi_ddiv+0x4dc>
 8000b5a:	e68d      	b.n	8000878 <__aeabi_ddiv+0x1f8>
 8000b5c:	428a      	cmp	r2, r1
 8000b5e:	d800      	bhi.n	8000b62 <__aeabi_ddiv+0x4e2>
 8000b60:	e68a      	b.n	8000878 <__aeabi_ddiv+0x1f8>
 8000b62:	1e85      	subs	r5, r0, #2
 8000b64:	1909      	adds	r1, r1, r4
 8000b66:	e687      	b.n	8000878 <__aeabi_ddiv+0x1f8>
 8000b68:	230f      	movs	r3, #15
 8000b6a:	402b      	ands	r3, r5
 8000b6c:	2b04      	cmp	r3, #4
 8000b6e:	d100      	bne.n	8000b72 <__aeabi_ddiv+0x4f2>
 8000b70:	e6bc      	b.n	80008ec <__aeabi_ddiv+0x26c>
 8000b72:	2305      	movs	r3, #5
 8000b74:	425b      	negs	r3, r3
 8000b76:	42ab      	cmp	r3, r5
 8000b78:	419b      	sbcs	r3, r3
 8000b7a:	3504      	adds	r5, #4
 8000b7c:	425b      	negs	r3, r3
 8000b7e:	08ed      	lsrs	r5, r5, #3
 8000b80:	4498      	add	r8, r3
 8000b82:	e6b4      	b.n	80008ee <__aeabi_ddiv+0x26e>
 8000b84:	42af      	cmp	r7, r5
 8000b86:	d900      	bls.n	8000b8a <__aeabi_ddiv+0x50a>
 8000b88:	e660      	b.n	800084c <__aeabi_ddiv+0x1cc>
 8000b8a:	4282      	cmp	r2, r0
 8000b8c:	d804      	bhi.n	8000b98 <__aeabi_ddiv+0x518>
 8000b8e:	d000      	beq.n	8000b92 <__aeabi_ddiv+0x512>
 8000b90:	e65c      	b.n	800084c <__aeabi_ddiv+0x1cc>
 8000b92:	42ae      	cmp	r6, r5
 8000b94:	d800      	bhi.n	8000b98 <__aeabi_ddiv+0x518>
 8000b96:	e659      	b.n	800084c <__aeabi_ddiv+0x1cc>
 8000b98:	2302      	movs	r3, #2
 8000b9a:	425b      	negs	r3, r3
 8000b9c:	469c      	mov	ip, r3
 8000b9e:	9b00      	ldr	r3, [sp, #0]
 8000ba0:	44e0      	add	r8, ip
 8000ba2:	469c      	mov	ip, r3
 8000ba4:	4465      	add	r5, ip
 8000ba6:	429d      	cmp	r5, r3
 8000ba8:	419b      	sbcs	r3, r3
 8000baa:	425b      	negs	r3, r3
 8000bac:	191b      	adds	r3, r3, r4
 8000bae:	18c0      	adds	r0, r0, r3
 8000bb0:	e64d      	b.n	800084e <__aeabi_ddiv+0x1ce>
 8000bb2:	428a      	cmp	r2, r1
 8000bb4:	d800      	bhi.n	8000bb8 <__aeabi_ddiv+0x538>
 8000bb6:	e60e      	b.n	80007d6 <__aeabi_ddiv+0x156>
 8000bb8:	1e83      	subs	r3, r0, #2
 8000bba:	1909      	adds	r1, r1, r4
 8000bbc:	e60b      	b.n	80007d6 <__aeabi_ddiv+0x156>
 8000bbe:	428a      	cmp	r2, r1
 8000bc0:	d800      	bhi.n	8000bc4 <__aeabi_ddiv+0x544>
 8000bc2:	e5f4      	b.n	80007ae <__aeabi_ddiv+0x12e>
 8000bc4:	1e83      	subs	r3, r0, #2
 8000bc6:	4698      	mov	r8, r3
 8000bc8:	1909      	adds	r1, r1, r4
 8000bca:	e5f0      	b.n	80007ae <__aeabi_ddiv+0x12e>
 8000bcc:	4925      	ldr	r1, [pc, #148]	; (8000c64 <__aeabi_ddiv+0x5e4>)
 8000bce:	0028      	movs	r0, r5
 8000bd0:	4459      	add	r1, fp
 8000bd2:	408d      	lsls	r5, r1
 8000bd4:	4642      	mov	r2, r8
 8000bd6:	408a      	lsls	r2, r1
 8000bd8:	1e69      	subs	r1, r5, #1
 8000bda:	418d      	sbcs	r5, r1
 8000bdc:	4641      	mov	r1, r8
 8000bde:	40d8      	lsrs	r0, r3
 8000be0:	40d9      	lsrs	r1, r3
 8000be2:	4302      	orrs	r2, r0
 8000be4:	432a      	orrs	r2, r5
 8000be6:	000b      	movs	r3, r1
 8000be8:	0751      	lsls	r1, r2, #29
 8000bea:	d100      	bne.n	8000bee <__aeabi_ddiv+0x56e>
 8000bec:	e751      	b.n	8000a92 <__aeabi_ddiv+0x412>
 8000bee:	210f      	movs	r1, #15
 8000bf0:	4011      	ands	r1, r2
 8000bf2:	2904      	cmp	r1, #4
 8000bf4:	d000      	beq.n	8000bf8 <__aeabi_ddiv+0x578>
 8000bf6:	e746      	b.n	8000a86 <__aeabi_ddiv+0x406>
 8000bf8:	e74b      	b.n	8000a92 <__aeabi_ddiv+0x412>
 8000bfa:	0005      	movs	r5, r0
 8000bfc:	428e      	cmp	r6, r1
 8000bfe:	d000      	beq.n	8000c02 <__aeabi_ddiv+0x582>
 8000c00:	e66a      	b.n	80008d8 <__aeabi_ddiv+0x258>
 8000c02:	9a00      	ldr	r2, [sp, #0]
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d000      	beq.n	8000c0a <__aeabi_ddiv+0x58a>
 8000c08:	e666      	b.n	80008d8 <__aeabi_ddiv+0x258>
 8000c0a:	e667      	b.n	80008dc <__aeabi_ddiv+0x25c>
 8000c0c:	4a16      	ldr	r2, [pc, #88]	; (8000c68 <__aeabi_ddiv+0x5e8>)
 8000c0e:	445a      	add	r2, fp
 8000c10:	2a00      	cmp	r2, #0
 8000c12:	dc00      	bgt.n	8000c16 <__aeabi_ddiv+0x596>
 8000c14:	e710      	b.n	8000a38 <__aeabi_ddiv+0x3b8>
 8000c16:	2301      	movs	r3, #1
 8000c18:	2500      	movs	r5, #0
 8000c1a:	4498      	add	r8, r3
 8000c1c:	e667      	b.n	80008ee <__aeabi_ddiv+0x26e>
 8000c1e:	075d      	lsls	r5, r3, #29
 8000c20:	025b      	lsls	r3, r3, #9
 8000c22:	0b1c      	lsrs	r4, r3, #12
 8000c24:	08d2      	lsrs	r2, r2, #3
 8000c26:	2300      	movs	r3, #0
 8000c28:	4315      	orrs	r5, r2
 8000c2a:	e580      	b.n	800072e <__aeabi_ddiv+0xae>
 8000c2c:	9800      	ldr	r0, [sp, #0]
 8000c2e:	3d02      	subs	r5, #2
 8000c30:	0042      	lsls	r2, r0, #1
 8000c32:	4282      	cmp	r2, r0
 8000c34:	41bf      	sbcs	r7, r7
 8000c36:	427f      	negs	r7, r7
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	1936      	adds	r6, r6, r4
 8000c3c:	9200      	str	r2, [sp, #0]
 8000c3e:	e7dd      	b.n	8000bfc <__aeabi_ddiv+0x57c>
 8000c40:	2480      	movs	r4, #128	; 0x80
 8000c42:	4643      	mov	r3, r8
 8000c44:	0324      	lsls	r4, r4, #12
 8000c46:	431c      	orrs	r4, r3
 8000c48:	0324      	lsls	r4, r4, #12
 8000c4a:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <__aeabi_ddiv+0x5dc>)
 8000c4c:	0b24      	lsrs	r4, r4, #12
 8000c4e:	e56e      	b.n	800072e <__aeabi_ddiv+0xae>
 8000c50:	9a00      	ldr	r2, [sp, #0]
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d3ea      	bcc.n	8000c2c <__aeabi_ddiv+0x5ac>
 8000c56:	0005      	movs	r5, r0
 8000c58:	e7d3      	b.n	8000c02 <__aeabi_ddiv+0x582>
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	000007ff 	.word	0x000007ff
 8000c60:	0000043e 	.word	0x0000043e
 8000c64:	0000041e 	.word	0x0000041e
 8000c68:	000003ff 	.word	0x000003ff

08000c6c <__aeabi_dmul>:
 8000c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c6e:	4657      	mov	r7, sl
 8000c70:	464e      	mov	r6, r9
 8000c72:	4645      	mov	r5, r8
 8000c74:	46de      	mov	lr, fp
 8000c76:	b5e0      	push	{r5, r6, r7, lr}
 8000c78:	4698      	mov	r8, r3
 8000c7a:	030c      	lsls	r4, r1, #12
 8000c7c:	004b      	lsls	r3, r1, #1
 8000c7e:	0006      	movs	r6, r0
 8000c80:	4692      	mov	sl, r2
 8000c82:	b087      	sub	sp, #28
 8000c84:	0b24      	lsrs	r4, r4, #12
 8000c86:	0d5b      	lsrs	r3, r3, #21
 8000c88:	0fcf      	lsrs	r7, r1, #31
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d100      	bne.n	8000c90 <__aeabi_dmul+0x24>
 8000c8e:	e15c      	b.n	8000f4a <__aeabi_dmul+0x2de>
 8000c90:	4ad9      	ldr	r2, [pc, #868]	; (8000ff8 <__aeabi_dmul+0x38c>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d100      	bne.n	8000c98 <__aeabi_dmul+0x2c>
 8000c96:	e175      	b.n	8000f84 <__aeabi_dmul+0x318>
 8000c98:	0f42      	lsrs	r2, r0, #29
 8000c9a:	00e4      	lsls	r4, r4, #3
 8000c9c:	4314      	orrs	r4, r2
 8000c9e:	2280      	movs	r2, #128	; 0x80
 8000ca0:	0412      	lsls	r2, r2, #16
 8000ca2:	4314      	orrs	r4, r2
 8000ca4:	4ad5      	ldr	r2, [pc, #852]	; (8000ffc <__aeabi_dmul+0x390>)
 8000ca6:	00c5      	lsls	r5, r0, #3
 8000ca8:	4694      	mov	ip, r2
 8000caa:	4463      	add	r3, ip
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	2300      	movs	r3, #0
 8000cb0:	4699      	mov	r9, r3
 8000cb2:	469b      	mov	fp, r3
 8000cb4:	4643      	mov	r3, r8
 8000cb6:	4642      	mov	r2, r8
 8000cb8:	031e      	lsls	r6, r3, #12
 8000cba:	0fd2      	lsrs	r2, r2, #31
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	4650      	mov	r0, sl
 8000cc0:	4690      	mov	r8, r2
 8000cc2:	0b36      	lsrs	r6, r6, #12
 8000cc4:	0d5b      	lsrs	r3, r3, #21
 8000cc6:	d100      	bne.n	8000cca <__aeabi_dmul+0x5e>
 8000cc8:	e120      	b.n	8000f0c <__aeabi_dmul+0x2a0>
 8000cca:	4acb      	ldr	r2, [pc, #812]	; (8000ff8 <__aeabi_dmul+0x38c>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d100      	bne.n	8000cd2 <__aeabi_dmul+0x66>
 8000cd0:	e162      	b.n	8000f98 <__aeabi_dmul+0x32c>
 8000cd2:	49ca      	ldr	r1, [pc, #808]	; (8000ffc <__aeabi_dmul+0x390>)
 8000cd4:	0f42      	lsrs	r2, r0, #29
 8000cd6:	468c      	mov	ip, r1
 8000cd8:	9900      	ldr	r1, [sp, #0]
 8000cda:	4463      	add	r3, ip
 8000cdc:	00f6      	lsls	r6, r6, #3
 8000cde:	468c      	mov	ip, r1
 8000ce0:	4316      	orrs	r6, r2
 8000ce2:	2280      	movs	r2, #128	; 0x80
 8000ce4:	449c      	add	ip, r3
 8000ce6:	0412      	lsls	r2, r2, #16
 8000ce8:	4663      	mov	r3, ip
 8000cea:	4316      	orrs	r6, r2
 8000cec:	00c2      	lsls	r2, r0, #3
 8000cee:	2000      	movs	r0, #0
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	9900      	ldr	r1, [sp, #0]
 8000cf4:	4643      	mov	r3, r8
 8000cf6:	3101      	adds	r1, #1
 8000cf8:	468c      	mov	ip, r1
 8000cfa:	4649      	mov	r1, r9
 8000cfc:	407b      	eors	r3, r7
 8000cfe:	9301      	str	r3, [sp, #4]
 8000d00:	290f      	cmp	r1, #15
 8000d02:	d826      	bhi.n	8000d52 <__aeabi_dmul+0xe6>
 8000d04:	4bbe      	ldr	r3, [pc, #760]	; (8001000 <__aeabi_dmul+0x394>)
 8000d06:	0089      	lsls	r1, r1, #2
 8000d08:	5859      	ldr	r1, [r3, r1]
 8000d0a:	468f      	mov	pc, r1
 8000d0c:	4643      	mov	r3, r8
 8000d0e:	9301      	str	r3, [sp, #4]
 8000d10:	0034      	movs	r4, r6
 8000d12:	0015      	movs	r5, r2
 8000d14:	4683      	mov	fp, r0
 8000d16:	465b      	mov	r3, fp
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d016      	beq.n	8000d4a <__aeabi_dmul+0xde>
 8000d1c:	2b03      	cmp	r3, #3
 8000d1e:	d100      	bne.n	8000d22 <__aeabi_dmul+0xb6>
 8000d20:	e203      	b.n	800112a <__aeabi_dmul+0x4be>
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d000      	beq.n	8000d28 <__aeabi_dmul+0xbc>
 8000d26:	e0cd      	b.n	8000ec4 <__aeabi_dmul+0x258>
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2400      	movs	r4, #0
 8000d2c:	2500      	movs	r5, #0
 8000d2e:	9b01      	ldr	r3, [sp, #4]
 8000d30:	0512      	lsls	r2, r2, #20
 8000d32:	4322      	orrs	r2, r4
 8000d34:	07db      	lsls	r3, r3, #31
 8000d36:	431a      	orrs	r2, r3
 8000d38:	0028      	movs	r0, r5
 8000d3a:	0011      	movs	r1, r2
 8000d3c:	b007      	add	sp, #28
 8000d3e:	bcf0      	pop	{r4, r5, r6, r7}
 8000d40:	46bb      	mov	fp, r7
 8000d42:	46b2      	mov	sl, r6
 8000d44:	46a9      	mov	r9, r5
 8000d46:	46a0      	mov	r8, r4
 8000d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d4a:	2400      	movs	r4, #0
 8000d4c:	2500      	movs	r5, #0
 8000d4e:	4aaa      	ldr	r2, [pc, #680]	; (8000ff8 <__aeabi_dmul+0x38c>)
 8000d50:	e7ed      	b.n	8000d2e <__aeabi_dmul+0xc2>
 8000d52:	0c28      	lsrs	r0, r5, #16
 8000d54:	042d      	lsls	r5, r5, #16
 8000d56:	0c2d      	lsrs	r5, r5, #16
 8000d58:	002b      	movs	r3, r5
 8000d5a:	0c11      	lsrs	r1, r2, #16
 8000d5c:	0412      	lsls	r2, r2, #16
 8000d5e:	0c12      	lsrs	r2, r2, #16
 8000d60:	4353      	muls	r3, r2
 8000d62:	4698      	mov	r8, r3
 8000d64:	0013      	movs	r3, r2
 8000d66:	002f      	movs	r7, r5
 8000d68:	4343      	muls	r3, r0
 8000d6a:	4699      	mov	r9, r3
 8000d6c:	434f      	muls	r7, r1
 8000d6e:	444f      	add	r7, r9
 8000d70:	46bb      	mov	fp, r7
 8000d72:	4647      	mov	r7, r8
 8000d74:	000b      	movs	r3, r1
 8000d76:	0c3f      	lsrs	r7, r7, #16
 8000d78:	46ba      	mov	sl, r7
 8000d7a:	4343      	muls	r3, r0
 8000d7c:	44da      	add	sl, fp
 8000d7e:	9302      	str	r3, [sp, #8]
 8000d80:	45d1      	cmp	r9, sl
 8000d82:	d904      	bls.n	8000d8e <__aeabi_dmul+0x122>
 8000d84:	2780      	movs	r7, #128	; 0x80
 8000d86:	027f      	lsls	r7, r7, #9
 8000d88:	46b9      	mov	r9, r7
 8000d8a:	444b      	add	r3, r9
 8000d8c:	9302      	str	r3, [sp, #8]
 8000d8e:	4653      	mov	r3, sl
 8000d90:	0c1b      	lsrs	r3, r3, #16
 8000d92:	469b      	mov	fp, r3
 8000d94:	4653      	mov	r3, sl
 8000d96:	041f      	lsls	r7, r3, #16
 8000d98:	4643      	mov	r3, r8
 8000d9a:	041b      	lsls	r3, r3, #16
 8000d9c:	0c1b      	lsrs	r3, r3, #16
 8000d9e:	4698      	mov	r8, r3
 8000da0:	003b      	movs	r3, r7
 8000da2:	4443      	add	r3, r8
 8000da4:	9304      	str	r3, [sp, #16]
 8000da6:	0c33      	lsrs	r3, r6, #16
 8000da8:	0436      	lsls	r6, r6, #16
 8000daa:	0c36      	lsrs	r6, r6, #16
 8000dac:	4698      	mov	r8, r3
 8000dae:	0033      	movs	r3, r6
 8000db0:	4343      	muls	r3, r0
 8000db2:	4699      	mov	r9, r3
 8000db4:	4643      	mov	r3, r8
 8000db6:	4343      	muls	r3, r0
 8000db8:	002f      	movs	r7, r5
 8000dba:	469a      	mov	sl, r3
 8000dbc:	4643      	mov	r3, r8
 8000dbe:	4377      	muls	r7, r6
 8000dc0:	435d      	muls	r5, r3
 8000dc2:	0c38      	lsrs	r0, r7, #16
 8000dc4:	444d      	add	r5, r9
 8000dc6:	1945      	adds	r5, r0, r5
 8000dc8:	45a9      	cmp	r9, r5
 8000dca:	d903      	bls.n	8000dd4 <__aeabi_dmul+0x168>
 8000dcc:	2380      	movs	r3, #128	; 0x80
 8000dce:	025b      	lsls	r3, r3, #9
 8000dd0:	4699      	mov	r9, r3
 8000dd2:	44ca      	add	sl, r9
 8000dd4:	043f      	lsls	r7, r7, #16
 8000dd6:	0c28      	lsrs	r0, r5, #16
 8000dd8:	0c3f      	lsrs	r7, r7, #16
 8000dda:	042d      	lsls	r5, r5, #16
 8000ddc:	19ed      	adds	r5, r5, r7
 8000dde:	0c27      	lsrs	r7, r4, #16
 8000de0:	0424      	lsls	r4, r4, #16
 8000de2:	0c24      	lsrs	r4, r4, #16
 8000de4:	0003      	movs	r3, r0
 8000de6:	0020      	movs	r0, r4
 8000de8:	4350      	muls	r0, r2
 8000dea:	437a      	muls	r2, r7
 8000dec:	4691      	mov	r9, r2
 8000dee:	003a      	movs	r2, r7
 8000df0:	4453      	add	r3, sl
 8000df2:	9305      	str	r3, [sp, #20]
 8000df4:	0c03      	lsrs	r3, r0, #16
 8000df6:	469a      	mov	sl, r3
 8000df8:	434a      	muls	r2, r1
 8000dfa:	4361      	muls	r1, r4
 8000dfc:	4449      	add	r1, r9
 8000dfe:	4451      	add	r1, sl
 8000e00:	44ab      	add	fp, r5
 8000e02:	4589      	cmp	r9, r1
 8000e04:	d903      	bls.n	8000e0e <__aeabi_dmul+0x1a2>
 8000e06:	2380      	movs	r3, #128	; 0x80
 8000e08:	025b      	lsls	r3, r3, #9
 8000e0a:	4699      	mov	r9, r3
 8000e0c:	444a      	add	r2, r9
 8000e0e:	0400      	lsls	r0, r0, #16
 8000e10:	0c0b      	lsrs	r3, r1, #16
 8000e12:	0c00      	lsrs	r0, r0, #16
 8000e14:	0409      	lsls	r1, r1, #16
 8000e16:	1809      	adds	r1, r1, r0
 8000e18:	0020      	movs	r0, r4
 8000e1a:	4699      	mov	r9, r3
 8000e1c:	4643      	mov	r3, r8
 8000e1e:	4370      	muls	r0, r6
 8000e20:	435c      	muls	r4, r3
 8000e22:	437e      	muls	r6, r7
 8000e24:	435f      	muls	r7, r3
 8000e26:	0c03      	lsrs	r3, r0, #16
 8000e28:	4698      	mov	r8, r3
 8000e2a:	19a4      	adds	r4, r4, r6
 8000e2c:	4444      	add	r4, r8
 8000e2e:	444a      	add	r2, r9
 8000e30:	9703      	str	r7, [sp, #12]
 8000e32:	42a6      	cmp	r6, r4
 8000e34:	d904      	bls.n	8000e40 <__aeabi_dmul+0x1d4>
 8000e36:	2380      	movs	r3, #128	; 0x80
 8000e38:	025b      	lsls	r3, r3, #9
 8000e3a:	4698      	mov	r8, r3
 8000e3c:	4447      	add	r7, r8
 8000e3e:	9703      	str	r7, [sp, #12]
 8000e40:	0423      	lsls	r3, r4, #16
 8000e42:	9e02      	ldr	r6, [sp, #8]
 8000e44:	469a      	mov	sl, r3
 8000e46:	9b05      	ldr	r3, [sp, #20]
 8000e48:	445e      	add	r6, fp
 8000e4a:	4698      	mov	r8, r3
 8000e4c:	42ae      	cmp	r6, r5
 8000e4e:	41ad      	sbcs	r5, r5
 8000e50:	1876      	adds	r6, r6, r1
 8000e52:	428e      	cmp	r6, r1
 8000e54:	4189      	sbcs	r1, r1
 8000e56:	0400      	lsls	r0, r0, #16
 8000e58:	0c00      	lsrs	r0, r0, #16
 8000e5a:	4450      	add	r0, sl
 8000e5c:	4440      	add	r0, r8
 8000e5e:	426d      	negs	r5, r5
 8000e60:	1947      	adds	r7, r0, r5
 8000e62:	46b8      	mov	r8, r7
 8000e64:	4693      	mov	fp, r2
 8000e66:	4249      	negs	r1, r1
 8000e68:	4689      	mov	r9, r1
 8000e6a:	44c3      	add	fp, r8
 8000e6c:	44d9      	add	r9, fp
 8000e6e:	4298      	cmp	r0, r3
 8000e70:	4180      	sbcs	r0, r0
 8000e72:	45a8      	cmp	r8, r5
 8000e74:	41ad      	sbcs	r5, r5
 8000e76:	4593      	cmp	fp, r2
 8000e78:	4192      	sbcs	r2, r2
 8000e7a:	4589      	cmp	r9, r1
 8000e7c:	4189      	sbcs	r1, r1
 8000e7e:	426d      	negs	r5, r5
 8000e80:	4240      	negs	r0, r0
 8000e82:	4328      	orrs	r0, r5
 8000e84:	0c24      	lsrs	r4, r4, #16
 8000e86:	4252      	negs	r2, r2
 8000e88:	4249      	negs	r1, r1
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	9b03      	ldr	r3, [sp, #12]
 8000e8e:	1900      	adds	r0, r0, r4
 8000e90:	1880      	adds	r0, r0, r2
 8000e92:	18c7      	adds	r7, r0, r3
 8000e94:	464b      	mov	r3, r9
 8000e96:	0ddc      	lsrs	r4, r3, #23
 8000e98:	9b04      	ldr	r3, [sp, #16]
 8000e9a:	0275      	lsls	r5, r6, #9
 8000e9c:	431d      	orrs	r5, r3
 8000e9e:	1e6a      	subs	r2, r5, #1
 8000ea0:	4195      	sbcs	r5, r2
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	0df6      	lsrs	r6, r6, #23
 8000ea6:	027f      	lsls	r7, r7, #9
 8000ea8:	4335      	orrs	r5, r6
 8000eaa:	025a      	lsls	r2, r3, #9
 8000eac:	433c      	orrs	r4, r7
 8000eae:	4315      	orrs	r5, r2
 8000eb0:	01fb      	lsls	r3, r7, #7
 8000eb2:	d400      	bmi.n	8000eb6 <__aeabi_dmul+0x24a>
 8000eb4:	e11c      	b.n	80010f0 <__aeabi_dmul+0x484>
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	086a      	lsrs	r2, r5, #1
 8000eba:	400d      	ands	r5, r1
 8000ebc:	4315      	orrs	r5, r2
 8000ebe:	07e2      	lsls	r2, r4, #31
 8000ec0:	4315      	orrs	r5, r2
 8000ec2:	0864      	lsrs	r4, r4, #1
 8000ec4:	494f      	ldr	r1, [pc, #316]	; (8001004 <__aeabi_dmul+0x398>)
 8000ec6:	4461      	add	r1, ip
 8000ec8:	2900      	cmp	r1, #0
 8000eca:	dc00      	bgt.n	8000ece <__aeabi_dmul+0x262>
 8000ecc:	e0b0      	b.n	8001030 <__aeabi_dmul+0x3c4>
 8000ece:	076b      	lsls	r3, r5, #29
 8000ed0:	d009      	beq.n	8000ee6 <__aeabi_dmul+0x27a>
 8000ed2:	220f      	movs	r2, #15
 8000ed4:	402a      	ands	r2, r5
 8000ed6:	2a04      	cmp	r2, #4
 8000ed8:	d005      	beq.n	8000ee6 <__aeabi_dmul+0x27a>
 8000eda:	1d2a      	adds	r2, r5, #4
 8000edc:	42aa      	cmp	r2, r5
 8000ede:	41ad      	sbcs	r5, r5
 8000ee0:	426d      	negs	r5, r5
 8000ee2:	1964      	adds	r4, r4, r5
 8000ee4:	0015      	movs	r5, r2
 8000ee6:	01e3      	lsls	r3, r4, #7
 8000ee8:	d504      	bpl.n	8000ef4 <__aeabi_dmul+0x288>
 8000eea:	2180      	movs	r1, #128	; 0x80
 8000eec:	4a46      	ldr	r2, [pc, #280]	; (8001008 <__aeabi_dmul+0x39c>)
 8000eee:	00c9      	lsls	r1, r1, #3
 8000ef0:	4014      	ands	r4, r2
 8000ef2:	4461      	add	r1, ip
 8000ef4:	4a45      	ldr	r2, [pc, #276]	; (800100c <__aeabi_dmul+0x3a0>)
 8000ef6:	4291      	cmp	r1, r2
 8000ef8:	dd00      	ble.n	8000efc <__aeabi_dmul+0x290>
 8000efa:	e726      	b.n	8000d4a <__aeabi_dmul+0xde>
 8000efc:	0762      	lsls	r2, r4, #29
 8000efe:	08ed      	lsrs	r5, r5, #3
 8000f00:	0264      	lsls	r4, r4, #9
 8000f02:	0549      	lsls	r1, r1, #21
 8000f04:	4315      	orrs	r5, r2
 8000f06:	0b24      	lsrs	r4, r4, #12
 8000f08:	0d4a      	lsrs	r2, r1, #21
 8000f0a:	e710      	b.n	8000d2e <__aeabi_dmul+0xc2>
 8000f0c:	4652      	mov	r2, sl
 8000f0e:	4332      	orrs	r2, r6
 8000f10:	d100      	bne.n	8000f14 <__aeabi_dmul+0x2a8>
 8000f12:	e07f      	b.n	8001014 <__aeabi_dmul+0x3a8>
 8000f14:	2e00      	cmp	r6, #0
 8000f16:	d100      	bne.n	8000f1a <__aeabi_dmul+0x2ae>
 8000f18:	e0dc      	b.n	80010d4 <__aeabi_dmul+0x468>
 8000f1a:	0030      	movs	r0, r6
 8000f1c:	f000 fdda 	bl	8001ad4 <__clzsi2>
 8000f20:	0002      	movs	r2, r0
 8000f22:	3a0b      	subs	r2, #11
 8000f24:	231d      	movs	r3, #29
 8000f26:	0001      	movs	r1, r0
 8000f28:	1a9b      	subs	r3, r3, r2
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	3908      	subs	r1, #8
 8000f2e:	40da      	lsrs	r2, r3
 8000f30:	408e      	lsls	r6, r1
 8000f32:	4316      	orrs	r6, r2
 8000f34:	4652      	mov	r2, sl
 8000f36:	408a      	lsls	r2, r1
 8000f38:	9b00      	ldr	r3, [sp, #0]
 8000f3a:	4935      	ldr	r1, [pc, #212]	; (8001010 <__aeabi_dmul+0x3a4>)
 8000f3c:	1a18      	subs	r0, r3, r0
 8000f3e:	0003      	movs	r3, r0
 8000f40:	468c      	mov	ip, r1
 8000f42:	4463      	add	r3, ip
 8000f44:	2000      	movs	r0, #0
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	e6d3      	b.n	8000cf2 <__aeabi_dmul+0x86>
 8000f4a:	0025      	movs	r5, r4
 8000f4c:	4305      	orrs	r5, r0
 8000f4e:	d04a      	beq.n	8000fe6 <__aeabi_dmul+0x37a>
 8000f50:	2c00      	cmp	r4, #0
 8000f52:	d100      	bne.n	8000f56 <__aeabi_dmul+0x2ea>
 8000f54:	e0b0      	b.n	80010b8 <__aeabi_dmul+0x44c>
 8000f56:	0020      	movs	r0, r4
 8000f58:	f000 fdbc 	bl	8001ad4 <__clzsi2>
 8000f5c:	0001      	movs	r1, r0
 8000f5e:	0002      	movs	r2, r0
 8000f60:	390b      	subs	r1, #11
 8000f62:	231d      	movs	r3, #29
 8000f64:	0010      	movs	r0, r2
 8000f66:	1a5b      	subs	r3, r3, r1
 8000f68:	0031      	movs	r1, r6
 8000f6a:	0035      	movs	r5, r6
 8000f6c:	3808      	subs	r0, #8
 8000f6e:	4084      	lsls	r4, r0
 8000f70:	40d9      	lsrs	r1, r3
 8000f72:	4085      	lsls	r5, r0
 8000f74:	430c      	orrs	r4, r1
 8000f76:	4826      	ldr	r0, [pc, #152]	; (8001010 <__aeabi_dmul+0x3a4>)
 8000f78:	1a83      	subs	r3, r0, r2
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	4699      	mov	r9, r3
 8000f80:	469b      	mov	fp, r3
 8000f82:	e697      	b.n	8000cb4 <__aeabi_dmul+0x48>
 8000f84:	0005      	movs	r5, r0
 8000f86:	4325      	orrs	r5, r4
 8000f88:	d126      	bne.n	8000fd8 <__aeabi_dmul+0x36c>
 8000f8a:	2208      	movs	r2, #8
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	2302      	movs	r3, #2
 8000f90:	2400      	movs	r4, #0
 8000f92:	4691      	mov	r9, r2
 8000f94:	469b      	mov	fp, r3
 8000f96:	e68d      	b.n	8000cb4 <__aeabi_dmul+0x48>
 8000f98:	4652      	mov	r2, sl
 8000f9a:	9b00      	ldr	r3, [sp, #0]
 8000f9c:	4332      	orrs	r2, r6
 8000f9e:	d110      	bne.n	8000fc2 <__aeabi_dmul+0x356>
 8000fa0:	4915      	ldr	r1, [pc, #84]	; (8000ff8 <__aeabi_dmul+0x38c>)
 8000fa2:	2600      	movs	r6, #0
 8000fa4:	468c      	mov	ip, r1
 8000fa6:	4463      	add	r3, ip
 8000fa8:	4649      	mov	r1, r9
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	2302      	movs	r3, #2
 8000fae:	4319      	orrs	r1, r3
 8000fb0:	4689      	mov	r9, r1
 8000fb2:	2002      	movs	r0, #2
 8000fb4:	e69d      	b.n	8000cf2 <__aeabi_dmul+0x86>
 8000fb6:	465b      	mov	r3, fp
 8000fb8:	9701      	str	r7, [sp, #4]
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d000      	beq.n	8000fc0 <__aeabi_dmul+0x354>
 8000fbe:	e6ad      	b.n	8000d1c <__aeabi_dmul+0xb0>
 8000fc0:	e6c3      	b.n	8000d4a <__aeabi_dmul+0xde>
 8000fc2:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <__aeabi_dmul+0x38c>)
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	4694      	mov	ip, r2
 8000fc8:	4463      	add	r3, ip
 8000fca:	464a      	mov	r2, r9
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	2303      	movs	r3, #3
 8000fd0:	431a      	orrs	r2, r3
 8000fd2:	4691      	mov	r9, r2
 8000fd4:	4652      	mov	r2, sl
 8000fd6:	e68c      	b.n	8000cf2 <__aeabi_dmul+0x86>
 8000fd8:	220c      	movs	r2, #12
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	2303      	movs	r3, #3
 8000fde:	0005      	movs	r5, r0
 8000fe0:	4691      	mov	r9, r2
 8000fe2:	469b      	mov	fp, r3
 8000fe4:	e666      	b.n	8000cb4 <__aeabi_dmul+0x48>
 8000fe6:	2304      	movs	r3, #4
 8000fe8:	4699      	mov	r9, r3
 8000fea:	2300      	movs	r3, #0
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	2400      	movs	r4, #0
 8000ff2:	469b      	mov	fp, r3
 8000ff4:	e65e      	b.n	8000cb4 <__aeabi_dmul+0x48>
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	000007ff 	.word	0x000007ff
 8000ffc:	fffffc01 	.word	0xfffffc01
 8001000:	080038c0 	.word	0x080038c0
 8001004:	000003ff 	.word	0x000003ff
 8001008:	feffffff 	.word	0xfeffffff
 800100c:	000007fe 	.word	0x000007fe
 8001010:	fffffc0d 	.word	0xfffffc0d
 8001014:	4649      	mov	r1, r9
 8001016:	2301      	movs	r3, #1
 8001018:	4319      	orrs	r1, r3
 800101a:	4689      	mov	r9, r1
 800101c:	2600      	movs	r6, #0
 800101e:	2001      	movs	r0, #1
 8001020:	e667      	b.n	8000cf2 <__aeabi_dmul+0x86>
 8001022:	2300      	movs	r3, #0
 8001024:	2480      	movs	r4, #128	; 0x80
 8001026:	2500      	movs	r5, #0
 8001028:	4a43      	ldr	r2, [pc, #268]	; (8001138 <__aeabi_dmul+0x4cc>)
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	0324      	lsls	r4, r4, #12
 800102e:	e67e      	b.n	8000d2e <__aeabi_dmul+0xc2>
 8001030:	2001      	movs	r0, #1
 8001032:	1a40      	subs	r0, r0, r1
 8001034:	2838      	cmp	r0, #56	; 0x38
 8001036:	dd00      	ble.n	800103a <__aeabi_dmul+0x3ce>
 8001038:	e676      	b.n	8000d28 <__aeabi_dmul+0xbc>
 800103a:	281f      	cmp	r0, #31
 800103c:	dd5b      	ble.n	80010f6 <__aeabi_dmul+0x48a>
 800103e:	221f      	movs	r2, #31
 8001040:	0023      	movs	r3, r4
 8001042:	4252      	negs	r2, r2
 8001044:	1a51      	subs	r1, r2, r1
 8001046:	40cb      	lsrs	r3, r1
 8001048:	0019      	movs	r1, r3
 800104a:	2820      	cmp	r0, #32
 800104c:	d003      	beq.n	8001056 <__aeabi_dmul+0x3ea>
 800104e:	4a3b      	ldr	r2, [pc, #236]	; (800113c <__aeabi_dmul+0x4d0>)
 8001050:	4462      	add	r2, ip
 8001052:	4094      	lsls	r4, r2
 8001054:	4325      	orrs	r5, r4
 8001056:	1e6a      	subs	r2, r5, #1
 8001058:	4195      	sbcs	r5, r2
 800105a:	002a      	movs	r2, r5
 800105c:	430a      	orrs	r2, r1
 800105e:	2107      	movs	r1, #7
 8001060:	000d      	movs	r5, r1
 8001062:	2400      	movs	r4, #0
 8001064:	4015      	ands	r5, r2
 8001066:	4211      	tst	r1, r2
 8001068:	d05b      	beq.n	8001122 <__aeabi_dmul+0x4b6>
 800106a:	210f      	movs	r1, #15
 800106c:	2400      	movs	r4, #0
 800106e:	4011      	ands	r1, r2
 8001070:	2904      	cmp	r1, #4
 8001072:	d053      	beq.n	800111c <__aeabi_dmul+0x4b0>
 8001074:	1d11      	adds	r1, r2, #4
 8001076:	4291      	cmp	r1, r2
 8001078:	4192      	sbcs	r2, r2
 800107a:	4252      	negs	r2, r2
 800107c:	18a4      	adds	r4, r4, r2
 800107e:	000a      	movs	r2, r1
 8001080:	0223      	lsls	r3, r4, #8
 8001082:	d54b      	bpl.n	800111c <__aeabi_dmul+0x4b0>
 8001084:	2201      	movs	r2, #1
 8001086:	2400      	movs	r4, #0
 8001088:	2500      	movs	r5, #0
 800108a:	e650      	b.n	8000d2e <__aeabi_dmul+0xc2>
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	031b      	lsls	r3, r3, #12
 8001090:	421c      	tst	r4, r3
 8001092:	d009      	beq.n	80010a8 <__aeabi_dmul+0x43c>
 8001094:	421e      	tst	r6, r3
 8001096:	d107      	bne.n	80010a8 <__aeabi_dmul+0x43c>
 8001098:	4333      	orrs	r3, r6
 800109a:	031c      	lsls	r4, r3, #12
 800109c:	4643      	mov	r3, r8
 800109e:	0015      	movs	r5, r2
 80010a0:	0b24      	lsrs	r4, r4, #12
 80010a2:	4a25      	ldr	r2, [pc, #148]	; (8001138 <__aeabi_dmul+0x4cc>)
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	e642      	b.n	8000d2e <__aeabi_dmul+0xc2>
 80010a8:	2280      	movs	r2, #128	; 0x80
 80010aa:	0312      	lsls	r2, r2, #12
 80010ac:	4314      	orrs	r4, r2
 80010ae:	0324      	lsls	r4, r4, #12
 80010b0:	4a21      	ldr	r2, [pc, #132]	; (8001138 <__aeabi_dmul+0x4cc>)
 80010b2:	0b24      	lsrs	r4, r4, #12
 80010b4:	9701      	str	r7, [sp, #4]
 80010b6:	e63a      	b.n	8000d2e <__aeabi_dmul+0xc2>
 80010b8:	f000 fd0c 	bl	8001ad4 <__clzsi2>
 80010bc:	0001      	movs	r1, r0
 80010be:	0002      	movs	r2, r0
 80010c0:	3115      	adds	r1, #21
 80010c2:	3220      	adds	r2, #32
 80010c4:	291c      	cmp	r1, #28
 80010c6:	dc00      	bgt.n	80010ca <__aeabi_dmul+0x45e>
 80010c8:	e74b      	b.n	8000f62 <__aeabi_dmul+0x2f6>
 80010ca:	0034      	movs	r4, r6
 80010cc:	3808      	subs	r0, #8
 80010ce:	2500      	movs	r5, #0
 80010d0:	4084      	lsls	r4, r0
 80010d2:	e750      	b.n	8000f76 <__aeabi_dmul+0x30a>
 80010d4:	f000 fcfe 	bl	8001ad4 <__clzsi2>
 80010d8:	0003      	movs	r3, r0
 80010da:	001a      	movs	r2, r3
 80010dc:	3215      	adds	r2, #21
 80010de:	3020      	adds	r0, #32
 80010e0:	2a1c      	cmp	r2, #28
 80010e2:	dc00      	bgt.n	80010e6 <__aeabi_dmul+0x47a>
 80010e4:	e71e      	b.n	8000f24 <__aeabi_dmul+0x2b8>
 80010e6:	4656      	mov	r6, sl
 80010e8:	3b08      	subs	r3, #8
 80010ea:	2200      	movs	r2, #0
 80010ec:	409e      	lsls	r6, r3
 80010ee:	e723      	b.n	8000f38 <__aeabi_dmul+0x2cc>
 80010f0:	9b00      	ldr	r3, [sp, #0]
 80010f2:	469c      	mov	ip, r3
 80010f4:	e6e6      	b.n	8000ec4 <__aeabi_dmul+0x258>
 80010f6:	4912      	ldr	r1, [pc, #72]	; (8001140 <__aeabi_dmul+0x4d4>)
 80010f8:	0022      	movs	r2, r4
 80010fa:	4461      	add	r1, ip
 80010fc:	002e      	movs	r6, r5
 80010fe:	408d      	lsls	r5, r1
 8001100:	408a      	lsls	r2, r1
 8001102:	40c6      	lsrs	r6, r0
 8001104:	1e69      	subs	r1, r5, #1
 8001106:	418d      	sbcs	r5, r1
 8001108:	4332      	orrs	r2, r6
 800110a:	432a      	orrs	r2, r5
 800110c:	40c4      	lsrs	r4, r0
 800110e:	0753      	lsls	r3, r2, #29
 8001110:	d0b6      	beq.n	8001080 <__aeabi_dmul+0x414>
 8001112:	210f      	movs	r1, #15
 8001114:	4011      	ands	r1, r2
 8001116:	2904      	cmp	r1, #4
 8001118:	d1ac      	bne.n	8001074 <__aeabi_dmul+0x408>
 800111a:	e7b1      	b.n	8001080 <__aeabi_dmul+0x414>
 800111c:	0765      	lsls	r5, r4, #29
 800111e:	0264      	lsls	r4, r4, #9
 8001120:	0b24      	lsrs	r4, r4, #12
 8001122:	08d2      	lsrs	r2, r2, #3
 8001124:	4315      	orrs	r5, r2
 8001126:	2200      	movs	r2, #0
 8001128:	e601      	b.n	8000d2e <__aeabi_dmul+0xc2>
 800112a:	2280      	movs	r2, #128	; 0x80
 800112c:	0312      	lsls	r2, r2, #12
 800112e:	4314      	orrs	r4, r2
 8001130:	0324      	lsls	r4, r4, #12
 8001132:	4a01      	ldr	r2, [pc, #4]	; (8001138 <__aeabi_dmul+0x4cc>)
 8001134:	0b24      	lsrs	r4, r4, #12
 8001136:	e5fa      	b.n	8000d2e <__aeabi_dmul+0xc2>
 8001138:	000007ff 	.word	0x000007ff
 800113c:	0000043e 	.word	0x0000043e
 8001140:	0000041e 	.word	0x0000041e

08001144 <__aeabi_dsub>:
 8001144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001146:	4657      	mov	r7, sl
 8001148:	464e      	mov	r6, r9
 800114a:	4645      	mov	r5, r8
 800114c:	46de      	mov	lr, fp
 800114e:	b5e0      	push	{r5, r6, r7, lr}
 8001150:	001e      	movs	r6, r3
 8001152:	0017      	movs	r7, r2
 8001154:	004a      	lsls	r2, r1, #1
 8001156:	030b      	lsls	r3, r1, #12
 8001158:	0d52      	lsrs	r2, r2, #21
 800115a:	0a5b      	lsrs	r3, r3, #9
 800115c:	4690      	mov	r8, r2
 800115e:	0f42      	lsrs	r2, r0, #29
 8001160:	431a      	orrs	r2, r3
 8001162:	0fcd      	lsrs	r5, r1, #31
 8001164:	4ccd      	ldr	r4, [pc, #820]	; (800149c <__aeabi_dsub+0x358>)
 8001166:	0331      	lsls	r1, r6, #12
 8001168:	00c3      	lsls	r3, r0, #3
 800116a:	4694      	mov	ip, r2
 800116c:	0070      	lsls	r0, r6, #1
 800116e:	0f7a      	lsrs	r2, r7, #29
 8001170:	0a49      	lsrs	r1, r1, #9
 8001172:	00ff      	lsls	r7, r7, #3
 8001174:	469a      	mov	sl, r3
 8001176:	46b9      	mov	r9, r7
 8001178:	0d40      	lsrs	r0, r0, #21
 800117a:	0ff6      	lsrs	r6, r6, #31
 800117c:	4311      	orrs	r1, r2
 800117e:	42a0      	cmp	r0, r4
 8001180:	d100      	bne.n	8001184 <__aeabi_dsub+0x40>
 8001182:	e0b1      	b.n	80012e8 <__aeabi_dsub+0x1a4>
 8001184:	2201      	movs	r2, #1
 8001186:	4056      	eors	r6, r2
 8001188:	46b3      	mov	fp, r6
 800118a:	42b5      	cmp	r5, r6
 800118c:	d100      	bne.n	8001190 <__aeabi_dsub+0x4c>
 800118e:	e088      	b.n	80012a2 <__aeabi_dsub+0x15e>
 8001190:	4642      	mov	r2, r8
 8001192:	1a12      	subs	r2, r2, r0
 8001194:	2a00      	cmp	r2, #0
 8001196:	dc00      	bgt.n	800119a <__aeabi_dsub+0x56>
 8001198:	e0ae      	b.n	80012f8 <__aeabi_dsub+0x1b4>
 800119a:	2800      	cmp	r0, #0
 800119c:	d100      	bne.n	80011a0 <__aeabi_dsub+0x5c>
 800119e:	e0c1      	b.n	8001324 <__aeabi_dsub+0x1e0>
 80011a0:	48be      	ldr	r0, [pc, #760]	; (800149c <__aeabi_dsub+0x358>)
 80011a2:	4580      	cmp	r8, r0
 80011a4:	d100      	bne.n	80011a8 <__aeabi_dsub+0x64>
 80011a6:	e151      	b.n	800144c <__aeabi_dsub+0x308>
 80011a8:	2080      	movs	r0, #128	; 0x80
 80011aa:	0400      	lsls	r0, r0, #16
 80011ac:	4301      	orrs	r1, r0
 80011ae:	2a38      	cmp	r2, #56	; 0x38
 80011b0:	dd00      	ble.n	80011b4 <__aeabi_dsub+0x70>
 80011b2:	e17b      	b.n	80014ac <__aeabi_dsub+0x368>
 80011b4:	2a1f      	cmp	r2, #31
 80011b6:	dd00      	ble.n	80011ba <__aeabi_dsub+0x76>
 80011b8:	e1ee      	b.n	8001598 <__aeabi_dsub+0x454>
 80011ba:	2020      	movs	r0, #32
 80011bc:	003e      	movs	r6, r7
 80011be:	1a80      	subs	r0, r0, r2
 80011c0:	000c      	movs	r4, r1
 80011c2:	40d6      	lsrs	r6, r2
 80011c4:	40d1      	lsrs	r1, r2
 80011c6:	4087      	lsls	r7, r0
 80011c8:	4662      	mov	r2, ip
 80011ca:	4084      	lsls	r4, r0
 80011cc:	1a52      	subs	r2, r2, r1
 80011ce:	1e78      	subs	r0, r7, #1
 80011d0:	4187      	sbcs	r7, r0
 80011d2:	4694      	mov	ip, r2
 80011d4:	4334      	orrs	r4, r6
 80011d6:	4327      	orrs	r7, r4
 80011d8:	1bdc      	subs	r4, r3, r7
 80011da:	42a3      	cmp	r3, r4
 80011dc:	419b      	sbcs	r3, r3
 80011de:	4662      	mov	r2, ip
 80011e0:	425b      	negs	r3, r3
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	4699      	mov	r9, r3
 80011e6:	464b      	mov	r3, r9
 80011e8:	021b      	lsls	r3, r3, #8
 80011ea:	d400      	bmi.n	80011ee <__aeabi_dsub+0xaa>
 80011ec:	e118      	b.n	8001420 <__aeabi_dsub+0x2dc>
 80011ee:	464b      	mov	r3, r9
 80011f0:	0258      	lsls	r0, r3, #9
 80011f2:	0a43      	lsrs	r3, r0, #9
 80011f4:	4699      	mov	r9, r3
 80011f6:	464b      	mov	r3, r9
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d100      	bne.n	80011fe <__aeabi_dsub+0xba>
 80011fc:	e137      	b.n	800146e <__aeabi_dsub+0x32a>
 80011fe:	4648      	mov	r0, r9
 8001200:	f000 fc68 	bl	8001ad4 <__clzsi2>
 8001204:	0001      	movs	r1, r0
 8001206:	3908      	subs	r1, #8
 8001208:	2320      	movs	r3, #32
 800120a:	0022      	movs	r2, r4
 800120c:	4648      	mov	r0, r9
 800120e:	1a5b      	subs	r3, r3, r1
 8001210:	40da      	lsrs	r2, r3
 8001212:	4088      	lsls	r0, r1
 8001214:	408c      	lsls	r4, r1
 8001216:	4643      	mov	r3, r8
 8001218:	4310      	orrs	r0, r2
 800121a:	4588      	cmp	r8, r1
 800121c:	dd00      	ble.n	8001220 <__aeabi_dsub+0xdc>
 800121e:	e136      	b.n	800148e <__aeabi_dsub+0x34a>
 8001220:	1ac9      	subs	r1, r1, r3
 8001222:	1c4b      	adds	r3, r1, #1
 8001224:	2b1f      	cmp	r3, #31
 8001226:	dd00      	ble.n	800122a <__aeabi_dsub+0xe6>
 8001228:	e0ea      	b.n	8001400 <__aeabi_dsub+0x2bc>
 800122a:	2220      	movs	r2, #32
 800122c:	0026      	movs	r6, r4
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	0001      	movs	r1, r0
 8001232:	4094      	lsls	r4, r2
 8001234:	40de      	lsrs	r6, r3
 8001236:	40d8      	lsrs	r0, r3
 8001238:	2300      	movs	r3, #0
 800123a:	4091      	lsls	r1, r2
 800123c:	1e62      	subs	r2, r4, #1
 800123e:	4194      	sbcs	r4, r2
 8001240:	4681      	mov	r9, r0
 8001242:	4698      	mov	r8, r3
 8001244:	4331      	orrs	r1, r6
 8001246:	430c      	orrs	r4, r1
 8001248:	0763      	lsls	r3, r4, #29
 800124a:	d009      	beq.n	8001260 <__aeabi_dsub+0x11c>
 800124c:	230f      	movs	r3, #15
 800124e:	4023      	ands	r3, r4
 8001250:	2b04      	cmp	r3, #4
 8001252:	d005      	beq.n	8001260 <__aeabi_dsub+0x11c>
 8001254:	1d23      	adds	r3, r4, #4
 8001256:	42a3      	cmp	r3, r4
 8001258:	41a4      	sbcs	r4, r4
 800125a:	4264      	negs	r4, r4
 800125c:	44a1      	add	r9, r4
 800125e:	001c      	movs	r4, r3
 8001260:	464b      	mov	r3, r9
 8001262:	021b      	lsls	r3, r3, #8
 8001264:	d400      	bmi.n	8001268 <__aeabi_dsub+0x124>
 8001266:	e0de      	b.n	8001426 <__aeabi_dsub+0x2e2>
 8001268:	4641      	mov	r1, r8
 800126a:	4b8c      	ldr	r3, [pc, #560]	; (800149c <__aeabi_dsub+0x358>)
 800126c:	3101      	adds	r1, #1
 800126e:	4299      	cmp	r1, r3
 8001270:	d100      	bne.n	8001274 <__aeabi_dsub+0x130>
 8001272:	e0e7      	b.n	8001444 <__aeabi_dsub+0x300>
 8001274:	464b      	mov	r3, r9
 8001276:	488a      	ldr	r0, [pc, #552]	; (80014a0 <__aeabi_dsub+0x35c>)
 8001278:	08e4      	lsrs	r4, r4, #3
 800127a:	4003      	ands	r3, r0
 800127c:	0018      	movs	r0, r3
 800127e:	0549      	lsls	r1, r1, #21
 8001280:	075b      	lsls	r3, r3, #29
 8001282:	0240      	lsls	r0, r0, #9
 8001284:	4323      	orrs	r3, r4
 8001286:	0d4a      	lsrs	r2, r1, #21
 8001288:	0b04      	lsrs	r4, r0, #12
 800128a:	0512      	lsls	r2, r2, #20
 800128c:	07ed      	lsls	r5, r5, #31
 800128e:	4322      	orrs	r2, r4
 8001290:	432a      	orrs	r2, r5
 8001292:	0018      	movs	r0, r3
 8001294:	0011      	movs	r1, r2
 8001296:	bcf0      	pop	{r4, r5, r6, r7}
 8001298:	46bb      	mov	fp, r7
 800129a:	46b2      	mov	sl, r6
 800129c:	46a9      	mov	r9, r5
 800129e:	46a0      	mov	r8, r4
 80012a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012a2:	4642      	mov	r2, r8
 80012a4:	1a12      	subs	r2, r2, r0
 80012a6:	2a00      	cmp	r2, #0
 80012a8:	dd52      	ble.n	8001350 <__aeabi_dsub+0x20c>
 80012aa:	2800      	cmp	r0, #0
 80012ac:	d100      	bne.n	80012b0 <__aeabi_dsub+0x16c>
 80012ae:	e09c      	b.n	80013ea <__aeabi_dsub+0x2a6>
 80012b0:	45a0      	cmp	r8, r4
 80012b2:	d100      	bne.n	80012b6 <__aeabi_dsub+0x172>
 80012b4:	e0ca      	b.n	800144c <__aeabi_dsub+0x308>
 80012b6:	2080      	movs	r0, #128	; 0x80
 80012b8:	0400      	lsls	r0, r0, #16
 80012ba:	4301      	orrs	r1, r0
 80012bc:	2a38      	cmp	r2, #56	; 0x38
 80012be:	dd00      	ble.n	80012c2 <__aeabi_dsub+0x17e>
 80012c0:	e149      	b.n	8001556 <__aeabi_dsub+0x412>
 80012c2:	2a1f      	cmp	r2, #31
 80012c4:	dc00      	bgt.n	80012c8 <__aeabi_dsub+0x184>
 80012c6:	e197      	b.n	80015f8 <__aeabi_dsub+0x4b4>
 80012c8:	0010      	movs	r0, r2
 80012ca:	000e      	movs	r6, r1
 80012cc:	3820      	subs	r0, #32
 80012ce:	40c6      	lsrs	r6, r0
 80012d0:	2a20      	cmp	r2, #32
 80012d2:	d004      	beq.n	80012de <__aeabi_dsub+0x19a>
 80012d4:	2040      	movs	r0, #64	; 0x40
 80012d6:	1a82      	subs	r2, r0, r2
 80012d8:	4091      	lsls	r1, r2
 80012da:	430f      	orrs	r7, r1
 80012dc:	46b9      	mov	r9, r7
 80012de:	464c      	mov	r4, r9
 80012e0:	1e62      	subs	r2, r4, #1
 80012e2:	4194      	sbcs	r4, r2
 80012e4:	4334      	orrs	r4, r6
 80012e6:	e13a      	b.n	800155e <__aeabi_dsub+0x41a>
 80012e8:	000a      	movs	r2, r1
 80012ea:	433a      	orrs	r2, r7
 80012ec:	d028      	beq.n	8001340 <__aeabi_dsub+0x1fc>
 80012ee:	46b3      	mov	fp, r6
 80012f0:	42b5      	cmp	r5, r6
 80012f2:	d02b      	beq.n	800134c <__aeabi_dsub+0x208>
 80012f4:	4a6b      	ldr	r2, [pc, #428]	; (80014a4 <__aeabi_dsub+0x360>)
 80012f6:	4442      	add	r2, r8
 80012f8:	2a00      	cmp	r2, #0
 80012fa:	d05d      	beq.n	80013b8 <__aeabi_dsub+0x274>
 80012fc:	4642      	mov	r2, r8
 80012fe:	4644      	mov	r4, r8
 8001300:	1a82      	subs	r2, r0, r2
 8001302:	2c00      	cmp	r4, #0
 8001304:	d000      	beq.n	8001308 <__aeabi_dsub+0x1c4>
 8001306:	e0f5      	b.n	80014f4 <__aeabi_dsub+0x3b0>
 8001308:	4665      	mov	r5, ip
 800130a:	431d      	orrs	r5, r3
 800130c:	d100      	bne.n	8001310 <__aeabi_dsub+0x1cc>
 800130e:	e19c      	b.n	800164a <__aeabi_dsub+0x506>
 8001310:	1e55      	subs	r5, r2, #1
 8001312:	2a01      	cmp	r2, #1
 8001314:	d100      	bne.n	8001318 <__aeabi_dsub+0x1d4>
 8001316:	e1fb      	b.n	8001710 <__aeabi_dsub+0x5cc>
 8001318:	4c60      	ldr	r4, [pc, #384]	; (800149c <__aeabi_dsub+0x358>)
 800131a:	42a2      	cmp	r2, r4
 800131c:	d100      	bne.n	8001320 <__aeabi_dsub+0x1dc>
 800131e:	e1bd      	b.n	800169c <__aeabi_dsub+0x558>
 8001320:	002a      	movs	r2, r5
 8001322:	e0f0      	b.n	8001506 <__aeabi_dsub+0x3c2>
 8001324:	0008      	movs	r0, r1
 8001326:	4338      	orrs	r0, r7
 8001328:	d100      	bne.n	800132c <__aeabi_dsub+0x1e8>
 800132a:	e0c3      	b.n	80014b4 <__aeabi_dsub+0x370>
 800132c:	1e50      	subs	r0, r2, #1
 800132e:	2a01      	cmp	r2, #1
 8001330:	d100      	bne.n	8001334 <__aeabi_dsub+0x1f0>
 8001332:	e1a8      	b.n	8001686 <__aeabi_dsub+0x542>
 8001334:	4c59      	ldr	r4, [pc, #356]	; (800149c <__aeabi_dsub+0x358>)
 8001336:	42a2      	cmp	r2, r4
 8001338:	d100      	bne.n	800133c <__aeabi_dsub+0x1f8>
 800133a:	e087      	b.n	800144c <__aeabi_dsub+0x308>
 800133c:	0002      	movs	r2, r0
 800133e:	e736      	b.n	80011ae <__aeabi_dsub+0x6a>
 8001340:	2201      	movs	r2, #1
 8001342:	4056      	eors	r6, r2
 8001344:	46b3      	mov	fp, r6
 8001346:	42b5      	cmp	r5, r6
 8001348:	d000      	beq.n	800134c <__aeabi_dsub+0x208>
 800134a:	e721      	b.n	8001190 <__aeabi_dsub+0x4c>
 800134c:	4a55      	ldr	r2, [pc, #340]	; (80014a4 <__aeabi_dsub+0x360>)
 800134e:	4442      	add	r2, r8
 8001350:	2a00      	cmp	r2, #0
 8001352:	d100      	bne.n	8001356 <__aeabi_dsub+0x212>
 8001354:	e0b5      	b.n	80014c2 <__aeabi_dsub+0x37e>
 8001356:	4642      	mov	r2, r8
 8001358:	4644      	mov	r4, r8
 800135a:	1a82      	subs	r2, r0, r2
 800135c:	2c00      	cmp	r4, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_dsub+0x21e>
 8001360:	e138      	b.n	80015d4 <__aeabi_dsub+0x490>
 8001362:	4e4e      	ldr	r6, [pc, #312]	; (800149c <__aeabi_dsub+0x358>)
 8001364:	42b0      	cmp	r0, r6
 8001366:	d100      	bne.n	800136a <__aeabi_dsub+0x226>
 8001368:	e1de      	b.n	8001728 <__aeabi_dsub+0x5e4>
 800136a:	2680      	movs	r6, #128	; 0x80
 800136c:	4664      	mov	r4, ip
 800136e:	0436      	lsls	r6, r6, #16
 8001370:	4334      	orrs	r4, r6
 8001372:	46a4      	mov	ip, r4
 8001374:	2a38      	cmp	r2, #56	; 0x38
 8001376:	dd00      	ble.n	800137a <__aeabi_dsub+0x236>
 8001378:	e196      	b.n	80016a8 <__aeabi_dsub+0x564>
 800137a:	2a1f      	cmp	r2, #31
 800137c:	dd00      	ble.n	8001380 <__aeabi_dsub+0x23c>
 800137e:	e224      	b.n	80017ca <__aeabi_dsub+0x686>
 8001380:	2620      	movs	r6, #32
 8001382:	1ab4      	subs	r4, r6, r2
 8001384:	46a2      	mov	sl, r4
 8001386:	4664      	mov	r4, ip
 8001388:	4656      	mov	r6, sl
 800138a:	40b4      	lsls	r4, r6
 800138c:	46a1      	mov	r9, r4
 800138e:	001c      	movs	r4, r3
 8001390:	464e      	mov	r6, r9
 8001392:	40d4      	lsrs	r4, r2
 8001394:	4326      	orrs	r6, r4
 8001396:	0034      	movs	r4, r6
 8001398:	4656      	mov	r6, sl
 800139a:	40b3      	lsls	r3, r6
 800139c:	1e5e      	subs	r6, r3, #1
 800139e:	41b3      	sbcs	r3, r6
 80013a0:	431c      	orrs	r4, r3
 80013a2:	4663      	mov	r3, ip
 80013a4:	40d3      	lsrs	r3, r2
 80013a6:	18c9      	adds	r1, r1, r3
 80013a8:	19e4      	adds	r4, r4, r7
 80013aa:	42bc      	cmp	r4, r7
 80013ac:	41bf      	sbcs	r7, r7
 80013ae:	427f      	negs	r7, r7
 80013b0:	46b9      	mov	r9, r7
 80013b2:	4680      	mov	r8, r0
 80013b4:	4489      	add	r9, r1
 80013b6:	e0d8      	b.n	800156a <__aeabi_dsub+0x426>
 80013b8:	4640      	mov	r0, r8
 80013ba:	4c3b      	ldr	r4, [pc, #236]	; (80014a8 <__aeabi_dsub+0x364>)
 80013bc:	3001      	adds	r0, #1
 80013be:	4220      	tst	r0, r4
 80013c0:	d000      	beq.n	80013c4 <__aeabi_dsub+0x280>
 80013c2:	e0b4      	b.n	800152e <__aeabi_dsub+0x3ea>
 80013c4:	4640      	mov	r0, r8
 80013c6:	2800      	cmp	r0, #0
 80013c8:	d000      	beq.n	80013cc <__aeabi_dsub+0x288>
 80013ca:	e144      	b.n	8001656 <__aeabi_dsub+0x512>
 80013cc:	4660      	mov	r0, ip
 80013ce:	4318      	orrs	r0, r3
 80013d0:	d100      	bne.n	80013d4 <__aeabi_dsub+0x290>
 80013d2:	e190      	b.n	80016f6 <__aeabi_dsub+0x5b2>
 80013d4:	0008      	movs	r0, r1
 80013d6:	4338      	orrs	r0, r7
 80013d8:	d000      	beq.n	80013dc <__aeabi_dsub+0x298>
 80013da:	e1aa      	b.n	8001732 <__aeabi_dsub+0x5ee>
 80013dc:	4661      	mov	r1, ip
 80013de:	08db      	lsrs	r3, r3, #3
 80013e0:	0749      	lsls	r1, r1, #29
 80013e2:	430b      	orrs	r3, r1
 80013e4:	4661      	mov	r1, ip
 80013e6:	08cc      	lsrs	r4, r1, #3
 80013e8:	e027      	b.n	800143a <__aeabi_dsub+0x2f6>
 80013ea:	0008      	movs	r0, r1
 80013ec:	4338      	orrs	r0, r7
 80013ee:	d061      	beq.n	80014b4 <__aeabi_dsub+0x370>
 80013f0:	1e50      	subs	r0, r2, #1
 80013f2:	2a01      	cmp	r2, #1
 80013f4:	d100      	bne.n	80013f8 <__aeabi_dsub+0x2b4>
 80013f6:	e139      	b.n	800166c <__aeabi_dsub+0x528>
 80013f8:	42a2      	cmp	r2, r4
 80013fa:	d027      	beq.n	800144c <__aeabi_dsub+0x308>
 80013fc:	0002      	movs	r2, r0
 80013fe:	e75d      	b.n	80012bc <__aeabi_dsub+0x178>
 8001400:	0002      	movs	r2, r0
 8001402:	391f      	subs	r1, #31
 8001404:	40ca      	lsrs	r2, r1
 8001406:	0011      	movs	r1, r2
 8001408:	2b20      	cmp	r3, #32
 800140a:	d003      	beq.n	8001414 <__aeabi_dsub+0x2d0>
 800140c:	2240      	movs	r2, #64	; 0x40
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	4098      	lsls	r0, r3
 8001412:	4304      	orrs	r4, r0
 8001414:	1e63      	subs	r3, r4, #1
 8001416:	419c      	sbcs	r4, r3
 8001418:	2300      	movs	r3, #0
 800141a:	4699      	mov	r9, r3
 800141c:	4698      	mov	r8, r3
 800141e:	430c      	orrs	r4, r1
 8001420:	0763      	lsls	r3, r4, #29
 8001422:	d000      	beq.n	8001426 <__aeabi_dsub+0x2e2>
 8001424:	e712      	b.n	800124c <__aeabi_dsub+0x108>
 8001426:	464b      	mov	r3, r9
 8001428:	464a      	mov	r2, r9
 800142a:	08e4      	lsrs	r4, r4, #3
 800142c:	075b      	lsls	r3, r3, #29
 800142e:	4323      	orrs	r3, r4
 8001430:	08d4      	lsrs	r4, r2, #3
 8001432:	4642      	mov	r2, r8
 8001434:	4919      	ldr	r1, [pc, #100]	; (800149c <__aeabi_dsub+0x358>)
 8001436:	428a      	cmp	r2, r1
 8001438:	d00e      	beq.n	8001458 <__aeabi_dsub+0x314>
 800143a:	0324      	lsls	r4, r4, #12
 800143c:	0552      	lsls	r2, r2, #21
 800143e:	0b24      	lsrs	r4, r4, #12
 8001440:	0d52      	lsrs	r2, r2, #21
 8001442:	e722      	b.n	800128a <__aeabi_dsub+0x146>
 8001444:	000a      	movs	r2, r1
 8001446:	2400      	movs	r4, #0
 8001448:	2300      	movs	r3, #0
 800144a:	e71e      	b.n	800128a <__aeabi_dsub+0x146>
 800144c:	08db      	lsrs	r3, r3, #3
 800144e:	4662      	mov	r2, ip
 8001450:	0752      	lsls	r2, r2, #29
 8001452:	4313      	orrs	r3, r2
 8001454:	4662      	mov	r2, ip
 8001456:	08d4      	lsrs	r4, r2, #3
 8001458:	001a      	movs	r2, r3
 800145a:	4322      	orrs	r2, r4
 800145c:	d100      	bne.n	8001460 <__aeabi_dsub+0x31c>
 800145e:	e1fc      	b.n	800185a <__aeabi_dsub+0x716>
 8001460:	2280      	movs	r2, #128	; 0x80
 8001462:	0312      	lsls	r2, r2, #12
 8001464:	4314      	orrs	r4, r2
 8001466:	0324      	lsls	r4, r4, #12
 8001468:	4a0c      	ldr	r2, [pc, #48]	; (800149c <__aeabi_dsub+0x358>)
 800146a:	0b24      	lsrs	r4, r4, #12
 800146c:	e70d      	b.n	800128a <__aeabi_dsub+0x146>
 800146e:	0020      	movs	r0, r4
 8001470:	f000 fb30 	bl	8001ad4 <__clzsi2>
 8001474:	0001      	movs	r1, r0
 8001476:	3118      	adds	r1, #24
 8001478:	291f      	cmp	r1, #31
 800147a:	dc00      	bgt.n	800147e <__aeabi_dsub+0x33a>
 800147c:	e6c4      	b.n	8001208 <__aeabi_dsub+0xc4>
 800147e:	3808      	subs	r0, #8
 8001480:	4084      	lsls	r4, r0
 8001482:	4643      	mov	r3, r8
 8001484:	0020      	movs	r0, r4
 8001486:	2400      	movs	r4, #0
 8001488:	4588      	cmp	r8, r1
 800148a:	dc00      	bgt.n	800148e <__aeabi_dsub+0x34a>
 800148c:	e6c8      	b.n	8001220 <__aeabi_dsub+0xdc>
 800148e:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <__aeabi_dsub+0x35c>)
 8001490:	1a5b      	subs	r3, r3, r1
 8001492:	4010      	ands	r0, r2
 8001494:	4698      	mov	r8, r3
 8001496:	4681      	mov	r9, r0
 8001498:	e6d6      	b.n	8001248 <__aeabi_dsub+0x104>
 800149a:	46c0      	nop			; (mov r8, r8)
 800149c:	000007ff 	.word	0x000007ff
 80014a0:	ff7fffff 	.word	0xff7fffff
 80014a4:	fffff801 	.word	0xfffff801
 80014a8:	000007fe 	.word	0x000007fe
 80014ac:	430f      	orrs	r7, r1
 80014ae:	1e7a      	subs	r2, r7, #1
 80014b0:	4197      	sbcs	r7, r2
 80014b2:	e691      	b.n	80011d8 <__aeabi_dsub+0x94>
 80014b4:	4661      	mov	r1, ip
 80014b6:	08db      	lsrs	r3, r3, #3
 80014b8:	0749      	lsls	r1, r1, #29
 80014ba:	430b      	orrs	r3, r1
 80014bc:	4661      	mov	r1, ip
 80014be:	08cc      	lsrs	r4, r1, #3
 80014c0:	e7b8      	b.n	8001434 <__aeabi_dsub+0x2f0>
 80014c2:	4640      	mov	r0, r8
 80014c4:	4cd3      	ldr	r4, [pc, #844]	; (8001814 <__aeabi_dsub+0x6d0>)
 80014c6:	3001      	adds	r0, #1
 80014c8:	4220      	tst	r0, r4
 80014ca:	d000      	beq.n	80014ce <__aeabi_dsub+0x38a>
 80014cc:	e0a2      	b.n	8001614 <__aeabi_dsub+0x4d0>
 80014ce:	4640      	mov	r0, r8
 80014d0:	2800      	cmp	r0, #0
 80014d2:	d000      	beq.n	80014d6 <__aeabi_dsub+0x392>
 80014d4:	e101      	b.n	80016da <__aeabi_dsub+0x596>
 80014d6:	4660      	mov	r0, ip
 80014d8:	4318      	orrs	r0, r3
 80014da:	d100      	bne.n	80014de <__aeabi_dsub+0x39a>
 80014dc:	e15e      	b.n	800179c <__aeabi_dsub+0x658>
 80014de:	0008      	movs	r0, r1
 80014e0:	4338      	orrs	r0, r7
 80014e2:	d000      	beq.n	80014e6 <__aeabi_dsub+0x3a2>
 80014e4:	e15f      	b.n	80017a6 <__aeabi_dsub+0x662>
 80014e6:	4661      	mov	r1, ip
 80014e8:	08db      	lsrs	r3, r3, #3
 80014ea:	0749      	lsls	r1, r1, #29
 80014ec:	430b      	orrs	r3, r1
 80014ee:	4661      	mov	r1, ip
 80014f0:	08cc      	lsrs	r4, r1, #3
 80014f2:	e7a2      	b.n	800143a <__aeabi_dsub+0x2f6>
 80014f4:	4dc8      	ldr	r5, [pc, #800]	; (8001818 <__aeabi_dsub+0x6d4>)
 80014f6:	42a8      	cmp	r0, r5
 80014f8:	d100      	bne.n	80014fc <__aeabi_dsub+0x3b8>
 80014fa:	e0cf      	b.n	800169c <__aeabi_dsub+0x558>
 80014fc:	2580      	movs	r5, #128	; 0x80
 80014fe:	4664      	mov	r4, ip
 8001500:	042d      	lsls	r5, r5, #16
 8001502:	432c      	orrs	r4, r5
 8001504:	46a4      	mov	ip, r4
 8001506:	2a38      	cmp	r2, #56	; 0x38
 8001508:	dc56      	bgt.n	80015b8 <__aeabi_dsub+0x474>
 800150a:	2a1f      	cmp	r2, #31
 800150c:	dd00      	ble.n	8001510 <__aeabi_dsub+0x3cc>
 800150e:	e0d1      	b.n	80016b4 <__aeabi_dsub+0x570>
 8001510:	2520      	movs	r5, #32
 8001512:	001e      	movs	r6, r3
 8001514:	1aad      	subs	r5, r5, r2
 8001516:	4664      	mov	r4, ip
 8001518:	40ab      	lsls	r3, r5
 800151a:	40ac      	lsls	r4, r5
 800151c:	40d6      	lsrs	r6, r2
 800151e:	1e5d      	subs	r5, r3, #1
 8001520:	41ab      	sbcs	r3, r5
 8001522:	4334      	orrs	r4, r6
 8001524:	4323      	orrs	r3, r4
 8001526:	4664      	mov	r4, ip
 8001528:	40d4      	lsrs	r4, r2
 800152a:	1b09      	subs	r1, r1, r4
 800152c:	e049      	b.n	80015c2 <__aeabi_dsub+0x47e>
 800152e:	4660      	mov	r0, ip
 8001530:	1bdc      	subs	r4, r3, r7
 8001532:	1a46      	subs	r6, r0, r1
 8001534:	42a3      	cmp	r3, r4
 8001536:	4180      	sbcs	r0, r0
 8001538:	4240      	negs	r0, r0
 800153a:	4681      	mov	r9, r0
 800153c:	0030      	movs	r0, r6
 800153e:	464e      	mov	r6, r9
 8001540:	1b80      	subs	r0, r0, r6
 8001542:	4681      	mov	r9, r0
 8001544:	0200      	lsls	r0, r0, #8
 8001546:	d476      	bmi.n	8001636 <__aeabi_dsub+0x4f2>
 8001548:	464b      	mov	r3, r9
 800154a:	4323      	orrs	r3, r4
 800154c:	d000      	beq.n	8001550 <__aeabi_dsub+0x40c>
 800154e:	e652      	b.n	80011f6 <__aeabi_dsub+0xb2>
 8001550:	2400      	movs	r4, #0
 8001552:	2500      	movs	r5, #0
 8001554:	e771      	b.n	800143a <__aeabi_dsub+0x2f6>
 8001556:	4339      	orrs	r1, r7
 8001558:	000c      	movs	r4, r1
 800155a:	1e62      	subs	r2, r4, #1
 800155c:	4194      	sbcs	r4, r2
 800155e:	18e4      	adds	r4, r4, r3
 8001560:	429c      	cmp	r4, r3
 8001562:	419b      	sbcs	r3, r3
 8001564:	425b      	negs	r3, r3
 8001566:	4463      	add	r3, ip
 8001568:	4699      	mov	r9, r3
 800156a:	464b      	mov	r3, r9
 800156c:	021b      	lsls	r3, r3, #8
 800156e:	d400      	bmi.n	8001572 <__aeabi_dsub+0x42e>
 8001570:	e756      	b.n	8001420 <__aeabi_dsub+0x2dc>
 8001572:	2301      	movs	r3, #1
 8001574:	469c      	mov	ip, r3
 8001576:	4ba8      	ldr	r3, [pc, #672]	; (8001818 <__aeabi_dsub+0x6d4>)
 8001578:	44e0      	add	r8, ip
 800157a:	4598      	cmp	r8, r3
 800157c:	d038      	beq.n	80015f0 <__aeabi_dsub+0x4ac>
 800157e:	464b      	mov	r3, r9
 8001580:	48a6      	ldr	r0, [pc, #664]	; (800181c <__aeabi_dsub+0x6d8>)
 8001582:	2201      	movs	r2, #1
 8001584:	4003      	ands	r3, r0
 8001586:	0018      	movs	r0, r3
 8001588:	0863      	lsrs	r3, r4, #1
 800158a:	4014      	ands	r4, r2
 800158c:	431c      	orrs	r4, r3
 800158e:	07c3      	lsls	r3, r0, #31
 8001590:	431c      	orrs	r4, r3
 8001592:	0843      	lsrs	r3, r0, #1
 8001594:	4699      	mov	r9, r3
 8001596:	e657      	b.n	8001248 <__aeabi_dsub+0x104>
 8001598:	0010      	movs	r0, r2
 800159a:	000e      	movs	r6, r1
 800159c:	3820      	subs	r0, #32
 800159e:	40c6      	lsrs	r6, r0
 80015a0:	2a20      	cmp	r2, #32
 80015a2:	d004      	beq.n	80015ae <__aeabi_dsub+0x46a>
 80015a4:	2040      	movs	r0, #64	; 0x40
 80015a6:	1a82      	subs	r2, r0, r2
 80015a8:	4091      	lsls	r1, r2
 80015aa:	430f      	orrs	r7, r1
 80015ac:	46b9      	mov	r9, r7
 80015ae:	464f      	mov	r7, r9
 80015b0:	1e7a      	subs	r2, r7, #1
 80015b2:	4197      	sbcs	r7, r2
 80015b4:	4337      	orrs	r7, r6
 80015b6:	e60f      	b.n	80011d8 <__aeabi_dsub+0x94>
 80015b8:	4662      	mov	r2, ip
 80015ba:	431a      	orrs	r2, r3
 80015bc:	0013      	movs	r3, r2
 80015be:	1e5a      	subs	r2, r3, #1
 80015c0:	4193      	sbcs	r3, r2
 80015c2:	1afc      	subs	r4, r7, r3
 80015c4:	42a7      	cmp	r7, r4
 80015c6:	41bf      	sbcs	r7, r7
 80015c8:	427f      	negs	r7, r7
 80015ca:	1bcb      	subs	r3, r1, r7
 80015cc:	4699      	mov	r9, r3
 80015ce:	465d      	mov	r5, fp
 80015d0:	4680      	mov	r8, r0
 80015d2:	e608      	b.n	80011e6 <__aeabi_dsub+0xa2>
 80015d4:	4666      	mov	r6, ip
 80015d6:	431e      	orrs	r6, r3
 80015d8:	d100      	bne.n	80015dc <__aeabi_dsub+0x498>
 80015da:	e0be      	b.n	800175a <__aeabi_dsub+0x616>
 80015dc:	1e56      	subs	r6, r2, #1
 80015de:	2a01      	cmp	r2, #1
 80015e0:	d100      	bne.n	80015e4 <__aeabi_dsub+0x4a0>
 80015e2:	e109      	b.n	80017f8 <__aeabi_dsub+0x6b4>
 80015e4:	4c8c      	ldr	r4, [pc, #560]	; (8001818 <__aeabi_dsub+0x6d4>)
 80015e6:	42a2      	cmp	r2, r4
 80015e8:	d100      	bne.n	80015ec <__aeabi_dsub+0x4a8>
 80015ea:	e119      	b.n	8001820 <__aeabi_dsub+0x6dc>
 80015ec:	0032      	movs	r2, r6
 80015ee:	e6c1      	b.n	8001374 <__aeabi_dsub+0x230>
 80015f0:	4642      	mov	r2, r8
 80015f2:	2400      	movs	r4, #0
 80015f4:	2300      	movs	r3, #0
 80015f6:	e648      	b.n	800128a <__aeabi_dsub+0x146>
 80015f8:	2020      	movs	r0, #32
 80015fa:	000c      	movs	r4, r1
 80015fc:	1a80      	subs	r0, r0, r2
 80015fe:	003e      	movs	r6, r7
 8001600:	4087      	lsls	r7, r0
 8001602:	4084      	lsls	r4, r0
 8001604:	40d6      	lsrs	r6, r2
 8001606:	1e78      	subs	r0, r7, #1
 8001608:	4187      	sbcs	r7, r0
 800160a:	40d1      	lsrs	r1, r2
 800160c:	4334      	orrs	r4, r6
 800160e:	433c      	orrs	r4, r7
 8001610:	448c      	add	ip, r1
 8001612:	e7a4      	b.n	800155e <__aeabi_dsub+0x41a>
 8001614:	4a80      	ldr	r2, [pc, #512]	; (8001818 <__aeabi_dsub+0x6d4>)
 8001616:	4290      	cmp	r0, r2
 8001618:	d100      	bne.n	800161c <__aeabi_dsub+0x4d8>
 800161a:	e0e9      	b.n	80017f0 <__aeabi_dsub+0x6ac>
 800161c:	19df      	adds	r7, r3, r7
 800161e:	429f      	cmp	r7, r3
 8001620:	419b      	sbcs	r3, r3
 8001622:	4461      	add	r1, ip
 8001624:	425b      	negs	r3, r3
 8001626:	18c9      	adds	r1, r1, r3
 8001628:	07cc      	lsls	r4, r1, #31
 800162a:	087f      	lsrs	r7, r7, #1
 800162c:	084b      	lsrs	r3, r1, #1
 800162e:	4699      	mov	r9, r3
 8001630:	4680      	mov	r8, r0
 8001632:	433c      	orrs	r4, r7
 8001634:	e6f4      	b.n	8001420 <__aeabi_dsub+0x2dc>
 8001636:	1afc      	subs	r4, r7, r3
 8001638:	42a7      	cmp	r7, r4
 800163a:	41bf      	sbcs	r7, r7
 800163c:	4663      	mov	r3, ip
 800163e:	427f      	negs	r7, r7
 8001640:	1ac9      	subs	r1, r1, r3
 8001642:	1bcb      	subs	r3, r1, r7
 8001644:	4699      	mov	r9, r3
 8001646:	465d      	mov	r5, fp
 8001648:	e5d5      	b.n	80011f6 <__aeabi_dsub+0xb2>
 800164a:	08ff      	lsrs	r7, r7, #3
 800164c:	074b      	lsls	r3, r1, #29
 800164e:	465d      	mov	r5, fp
 8001650:	433b      	orrs	r3, r7
 8001652:	08cc      	lsrs	r4, r1, #3
 8001654:	e6ee      	b.n	8001434 <__aeabi_dsub+0x2f0>
 8001656:	4662      	mov	r2, ip
 8001658:	431a      	orrs	r2, r3
 800165a:	d000      	beq.n	800165e <__aeabi_dsub+0x51a>
 800165c:	e082      	b.n	8001764 <__aeabi_dsub+0x620>
 800165e:	000b      	movs	r3, r1
 8001660:	433b      	orrs	r3, r7
 8001662:	d11b      	bne.n	800169c <__aeabi_dsub+0x558>
 8001664:	2480      	movs	r4, #128	; 0x80
 8001666:	2500      	movs	r5, #0
 8001668:	0324      	lsls	r4, r4, #12
 800166a:	e6f9      	b.n	8001460 <__aeabi_dsub+0x31c>
 800166c:	19dc      	adds	r4, r3, r7
 800166e:	429c      	cmp	r4, r3
 8001670:	419b      	sbcs	r3, r3
 8001672:	4461      	add	r1, ip
 8001674:	4689      	mov	r9, r1
 8001676:	425b      	negs	r3, r3
 8001678:	4499      	add	r9, r3
 800167a:	464b      	mov	r3, r9
 800167c:	021b      	lsls	r3, r3, #8
 800167e:	d444      	bmi.n	800170a <__aeabi_dsub+0x5c6>
 8001680:	2301      	movs	r3, #1
 8001682:	4698      	mov	r8, r3
 8001684:	e6cc      	b.n	8001420 <__aeabi_dsub+0x2dc>
 8001686:	1bdc      	subs	r4, r3, r7
 8001688:	4662      	mov	r2, ip
 800168a:	42a3      	cmp	r3, r4
 800168c:	419b      	sbcs	r3, r3
 800168e:	1a51      	subs	r1, r2, r1
 8001690:	425b      	negs	r3, r3
 8001692:	1acb      	subs	r3, r1, r3
 8001694:	4699      	mov	r9, r3
 8001696:	2301      	movs	r3, #1
 8001698:	4698      	mov	r8, r3
 800169a:	e5a4      	b.n	80011e6 <__aeabi_dsub+0xa2>
 800169c:	08ff      	lsrs	r7, r7, #3
 800169e:	074b      	lsls	r3, r1, #29
 80016a0:	465d      	mov	r5, fp
 80016a2:	433b      	orrs	r3, r7
 80016a4:	08cc      	lsrs	r4, r1, #3
 80016a6:	e6d7      	b.n	8001458 <__aeabi_dsub+0x314>
 80016a8:	4662      	mov	r2, ip
 80016aa:	431a      	orrs	r2, r3
 80016ac:	0014      	movs	r4, r2
 80016ae:	1e63      	subs	r3, r4, #1
 80016b0:	419c      	sbcs	r4, r3
 80016b2:	e679      	b.n	80013a8 <__aeabi_dsub+0x264>
 80016b4:	0015      	movs	r5, r2
 80016b6:	4664      	mov	r4, ip
 80016b8:	3d20      	subs	r5, #32
 80016ba:	40ec      	lsrs	r4, r5
 80016bc:	46a0      	mov	r8, r4
 80016be:	2a20      	cmp	r2, #32
 80016c0:	d005      	beq.n	80016ce <__aeabi_dsub+0x58a>
 80016c2:	2540      	movs	r5, #64	; 0x40
 80016c4:	4664      	mov	r4, ip
 80016c6:	1aaa      	subs	r2, r5, r2
 80016c8:	4094      	lsls	r4, r2
 80016ca:	4323      	orrs	r3, r4
 80016cc:	469a      	mov	sl, r3
 80016ce:	4654      	mov	r4, sl
 80016d0:	1e63      	subs	r3, r4, #1
 80016d2:	419c      	sbcs	r4, r3
 80016d4:	4643      	mov	r3, r8
 80016d6:	4323      	orrs	r3, r4
 80016d8:	e773      	b.n	80015c2 <__aeabi_dsub+0x47e>
 80016da:	4662      	mov	r2, ip
 80016dc:	431a      	orrs	r2, r3
 80016de:	d023      	beq.n	8001728 <__aeabi_dsub+0x5e4>
 80016e0:	000a      	movs	r2, r1
 80016e2:	433a      	orrs	r2, r7
 80016e4:	d000      	beq.n	80016e8 <__aeabi_dsub+0x5a4>
 80016e6:	e0a0      	b.n	800182a <__aeabi_dsub+0x6e6>
 80016e8:	4662      	mov	r2, ip
 80016ea:	08db      	lsrs	r3, r3, #3
 80016ec:	0752      	lsls	r2, r2, #29
 80016ee:	4313      	orrs	r3, r2
 80016f0:	4662      	mov	r2, ip
 80016f2:	08d4      	lsrs	r4, r2, #3
 80016f4:	e6b0      	b.n	8001458 <__aeabi_dsub+0x314>
 80016f6:	000b      	movs	r3, r1
 80016f8:	433b      	orrs	r3, r7
 80016fa:	d100      	bne.n	80016fe <__aeabi_dsub+0x5ba>
 80016fc:	e728      	b.n	8001550 <__aeabi_dsub+0x40c>
 80016fe:	08ff      	lsrs	r7, r7, #3
 8001700:	074b      	lsls	r3, r1, #29
 8001702:	465d      	mov	r5, fp
 8001704:	433b      	orrs	r3, r7
 8001706:	08cc      	lsrs	r4, r1, #3
 8001708:	e697      	b.n	800143a <__aeabi_dsub+0x2f6>
 800170a:	2302      	movs	r3, #2
 800170c:	4698      	mov	r8, r3
 800170e:	e736      	b.n	800157e <__aeabi_dsub+0x43a>
 8001710:	1afc      	subs	r4, r7, r3
 8001712:	42a7      	cmp	r7, r4
 8001714:	41bf      	sbcs	r7, r7
 8001716:	4663      	mov	r3, ip
 8001718:	427f      	negs	r7, r7
 800171a:	1ac9      	subs	r1, r1, r3
 800171c:	1bcb      	subs	r3, r1, r7
 800171e:	4699      	mov	r9, r3
 8001720:	2301      	movs	r3, #1
 8001722:	465d      	mov	r5, fp
 8001724:	4698      	mov	r8, r3
 8001726:	e55e      	b.n	80011e6 <__aeabi_dsub+0xa2>
 8001728:	074b      	lsls	r3, r1, #29
 800172a:	08ff      	lsrs	r7, r7, #3
 800172c:	433b      	orrs	r3, r7
 800172e:	08cc      	lsrs	r4, r1, #3
 8001730:	e692      	b.n	8001458 <__aeabi_dsub+0x314>
 8001732:	1bdc      	subs	r4, r3, r7
 8001734:	4660      	mov	r0, ip
 8001736:	42a3      	cmp	r3, r4
 8001738:	41b6      	sbcs	r6, r6
 800173a:	1a40      	subs	r0, r0, r1
 800173c:	4276      	negs	r6, r6
 800173e:	1b80      	subs	r0, r0, r6
 8001740:	4681      	mov	r9, r0
 8001742:	0200      	lsls	r0, r0, #8
 8001744:	d560      	bpl.n	8001808 <__aeabi_dsub+0x6c4>
 8001746:	1afc      	subs	r4, r7, r3
 8001748:	42a7      	cmp	r7, r4
 800174a:	41bf      	sbcs	r7, r7
 800174c:	4663      	mov	r3, ip
 800174e:	427f      	negs	r7, r7
 8001750:	1ac9      	subs	r1, r1, r3
 8001752:	1bcb      	subs	r3, r1, r7
 8001754:	4699      	mov	r9, r3
 8001756:	465d      	mov	r5, fp
 8001758:	e576      	b.n	8001248 <__aeabi_dsub+0x104>
 800175a:	08ff      	lsrs	r7, r7, #3
 800175c:	074b      	lsls	r3, r1, #29
 800175e:	433b      	orrs	r3, r7
 8001760:	08cc      	lsrs	r4, r1, #3
 8001762:	e667      	b.n	8001434 <__aeabi_dsub+0x2f0>
 8001764:	000a      	movs	r2, r1
 8001766:	08db      	lsrs	r3, r3, #3
 8001768:	433a      	orrs	r2, r7
 800176a:	d100      	bne.n	800176e <__aeabi_dsub+0x62a>
 800176c:	e66f      	b.n	800144e <__aeabi_dsub+0x30a>
 800176e:	4662      	mov	r2, ip
 8001770:	0752      	lsls	r2, r2, #29
 8001772:	4313      	orrs	r3, r2
 8001774:	4662      	mov	r2, ip
 8001776:	08d4      	lsrs	r4, r2, #3
 8001778:	2280      	movs	r2, #128	; 0x80
 800177a:	0312      	lsls	r2, r2, #12
 800177c:	4214      	tst	r4, r2
 800177e:	d007      	beq.n	8001790 <__aeabi_dsub+0x64c>
 8001780:	08c8      	lsrs	r0, r1, #3
 8001782:	4210      	tst	r0, r2
 8001784:	d104      	bne.n	8001790 <__aeabi_dsub+0x64c>
 8001786:	465d      	mov	r5, fp
 8001788:	0004      	movs	r4, r0
 800178a:	08fb      	lsrs	r3, r7, #3
 800178c:	0749      	lsls	r1, r1, #29
 800178e:	430b      	orrs	r3, r1
 8001790:	0f5a      	lsrs	r2, r3, #29
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	08db      	lsrs	r3, r3, #3
 8001796:	0752      	lsls	r2, r2, #29
 8001798:	4313      	orrs	r3, r2
 800179a:	e65d      	b.n	8001458 <__aeabi_dsub+0x314>
 800179c:	074b      	lsls	r3, r1, #29
 800179e:	08ff      	lsrs	r7, r7, #3
 80017a0:	433b      	orrs	r3, r7
 80017a2:	08cc      	lsrs	r4, r1, #3
 80017a4:	e649      	b.n	800143a <__aeabi_dsub+0x2f6>
 80017a6:	19dc      	adds	r4, r3, r7
 80017a8:	429c      	cmp	r4, r3
 80017aa:	419b      	sbcs	r3, r3
 80017ac:	4461      	add	r1, ip
 80017ae:	4689      	mov	r9, r1
 80017b0:	425b      	negs	r3, r3
 80017b2:	4499      	add	r9, r3
 80017b4:	464b      	mov	r3, r9
 80017b6:	021b      	lsls	r3, r3, #8
 80017b8:	d400      	bmi.n	80017bc <__aeabi_dsub+0x678>
 80017ba:	e631      	b.n	8001420 <__aeabi_dsub+0x2dc>
 80017bc:	464a      	mov	r2, r9
 80017be:	4b17      	ldr	r3, [pc, #92]	; (800181c <__aeabi_dsub+0x6d8>)
 80017c0:	401a      	ands	r2, r3
 80017c2:	2301      	movs	r3, #1
 80017c4:	4691      	mov	r9, r2
 80017c6:	4698      	mov	r8, r3
 80017c8:	e62a      	b.n	8001420 <__aeabi_dsub+0x2dc>
 80017ca:	0016      	movs	r6, r2
 80017cc:	4664      	mov	r4, ip
 80017ce:	3e20      	subs	r6, #32
 80017d0:	40f4      	lsrs	r4, r6
 80017d2:	46a0      	mov	r8, r4
 80017d4:	2a20      	cmp	r2, #32
 80017d6:	d005      	beq.n	80017e4 <__aeabi_dsub+0x6a0>
 80017d8:	2640      	movs	r6, #64	; 0x40
 80017da:	4664      	mov	r4, ip
 80017dc:	1ab2      	subs	r2, r6, r2
 80017de:	4094      	lsls	r4, r2
 80017e0:	4323      	orrs	r3, r4
 80017e2:	469a      	mov	sl, r3
 80017e4:	4654      	mov	r4, sl
 80017e6:	1e63      	subs	r3, r4, #1
 80017e8:	419c      	sbcs	r4, r3
 80017ea:	4643      	mov	r3, r8
 80017ec:	431c      	orrs	r4, r3
 80017ee:	e5db      	b.n	80013a8 <__aeabi_dsub+0x264>
 80017f0:	0002      	movs	r2, r0
 80017f2:	2400      	movs	r4, #0
 80017f4:	2300      	movs	r3, #0
 80017f6:	e548      	b.n	800128a <__aeabi_dsub+0x146>
 80017f8:	19dc      	adds	r4, r3, r7
 80017fa:	42bc      	cmp	r4, r7
 80017fc:	41bf      	sbcs	r7, r7
 80017fe:	4461      	add	r1, ip
 8001800:	4689      	mov	r9, r1
 8001802:	427f      	negs	r7, r7
 8001804:	44b9      	add	r9, r7
 8001806:	e738      	b.n	800167a <__aeabi_dsub+0x536>
 8001808:	464b      	mov	r3, r9
 800180a:	4323      	orrs	r3, r4
 800180c:	d100      	bne.n	8001810 <__aeabi_dsub+0x6cc>
 800180e:	e69f      	b.n	8001550 <__aeabi_dsub+0x40c>
 8001810:	e606      	b.n	8001420 <__aeabi_dsub+0x2dc>
 8001812:	46c0      	nop			; (mov r8, r8)
 8001814:	000007fe 	.word	0x000007fe
 8001818:	000007ff 	.word	0x000007ff
 800181c:	ff7fffff 	.word	0xff7fffff
 8001820:	08ff      	lsrs	r7, r7, #3
 8001822:	074b      	lsls	r3, r1, #29
 8001824:	433b      	orrs	r3, r7
 8001826:	08cc      	lsrs	r4, r1, #3
 8001828:	e616      	b.n	8001458 <__aeabi_dsub+0x314>
 800182a:	4662      	mov	r2, ip
 800182c:	08db      	lsrs	r3, r3, #3
 800182e:	0752      	lsls	r2, r2, #29
 8001830:	4313      	orrs	r3, r2
 8001832:	4662      	mov	r2, ip
 8001834:	08d4      	lsrs	r4, r2, #3
 8001836:	2280      	movs	r2, #128	; 0x80
 8001838:	0312      	lsls	r2, r2, #12
 800183a:	4214      	tst	r4, r2
 800183c:	d007      	beq.n	800184e <__aeabi_dsub+0x70a>
 800183e:	08c8      	lsrs	r0, r1, #3
 8001840:	4210      	tst	r0, r2
 8001842:	d104      	bne.n	800184e <__aeabi_dsub+0x70a>
 8001844:	465d      	mov	r5, fp
 8001846:	0004      	movs	r4, r0
 8001848:	08fb      	lsrs	r3, r7, #3
 800184a:	0749      	lsls	r1, r1, #29
 800184c:	430b      	orrs	r3, r1
 800184e:	0f5a      	lsrs	r2, r3, #29
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	0752      	lsls	r2, r2, #29
 8001854:	08db      	lsrs	r3, r3, #3
 8001856:	4313      	orrs	r3, r2
 8001858:	e5fe      	b.n	8001458 <__aeabi_dsub+0x314>
 800185a:	2300      	movs	r3, #0
 800185c:	4a01      	ldr	r2, [pc, #4]	; (8001864 <__aeabi_dsub+0x720>)
 800185e:	001c      	movs	r4, r3
 8001860:	e513      	b.n	800128a <__aeabi_dsub+0x146>
 8001862:	46c0      	nop			; (mov r8, r8)
 8001864:	000007ff 	.word	0x000007ff

08001868 <__aeabi_d2iz>:
 8001868:	000a      	movs	r2, r1
 800186a:	b530      	push	{r4, r5, lr}
 800186c:	4c13      	ldr	r4, [pc, #76]	; (80018bc <__aeabi_d2iz+0x54>)
 800186e:	0053      	lsls	r3, r2, #1
 8001870:	0309      	lsls	r1, r1, #12
 8001872:	0005      	movs	r5, r0
 8001874:	0b09      	lsrs	r1, r1, #12
 8001876:	2000      	movs	r0, #0
 8001878:	0d5b      	lsrs	r3, r3, #21
 800187a:	0fd2      	lsrs	r2, r2, #31
 800187c:	42a3      	cmp	r3, r4
 800187e:	dd04      	ble.n	800188a <__aeabi_d2iz+0x22>
 8001880:	480f      	ldr	r0, [pc, #60]	; (80018c0 <__aeabi_d2iz+0x58>)
 8001882:	4283      	cmp	r3, r0
 8001884:	dd02      	ble.n	800188c <__aeabi_d2iz+0x24>
 8001886:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <__aeabi_d2iz+0x5c>)
 8001888:	18d0      	adds	r0, r2, r3
 800188a:	bd30      	pop	{r4, r5, pc}
 800188c:	2080      	movs	r0, #128	; 0x80
 800188e:	0340      	lsls	r0, r0, #13
 8001890:	4301      	orrs	r1, r0
 8001892:	480d      	ldr	r0, [pc, #52]	; (80018c8 <__aeabi_d2iz+0x60>)
 8001894:	1ac0      	subs	r0, r0, r3
 8001896:	281f      	cmp	r0, #31
 8001898:	dd08      	ble.n	80018ac <__aeabi_d2iz+0x44>
 800189a:	480c      	ldr	r0, [pc, #48]	; (80018cc <__aeabi_d2iz+0x64>)
 800189c:	1ac3      	subs	r3, r0, r3
 800189e:	40d9      	lsrs	r1, r3
 80018a0:	000b      	movs	r3, r1
 80018a2:	4258      	negs	r0, r3
 80018a4:	2a00      	cmp	r2, #0
 80018a6:	d1f0      	bne.n	800188a <__aeabi_d2iz+0x22>
 80018a8:	0018      	movs	r0, r3
 80018aa:	e7ee      	b.n	800188a <__aeabi_d2iz+0x22>
 80018ac:	4c08      	ldr	r4, [pc, #32]	; (80018d0 <__aeabi_d2iz+0x68>)
 80018ae:	40c5      	lsrs	r5, r0
 80018b0:	46a4      	mov	ip, r4
 80018b2:	4463      	add	r3, ip
 80018b4:	4099      	lsls	r1, r3
 80018b6:	000b      	movs	r3, r1
 80018b8:	432b      	orrs	r3, r5
 80018ba:	e7f2      	b.n	80018a2 <__aeabi_d2iz+0x3a>
 80018bc:	000003fe 	.word	0x000003fe
 80018c0:	0000041d 	.word	0x0000041d
 80018c4:	7fffffff 	.word	0x7fffffff
 80018c8:	00000433 	.word	0x00000433
 80018cc:	00000413 	.word	0x00000413
 80018d0:	fffffbed 	.word	0xfffffbed

080018d4 <__aeabi_i2d>:
 80018d4:	b570      	push	{r4, r5, r6, lr}
 80018d6:	2800      	cmp	r0, #0
 80018d8:	d016      	beq.n	8001908 <__aeabi_i2d+0x34>
 80018da:	17c3      	asrs	r3, r0, #31
 80018dc:	18c5      	adds	r5, r0, r3
 80018de:	405d      	eors	r5, r3
 80018e0:	0fc4      	lsrs	r4, r0, #31
 80018e2:	0028      	movs	r0, r5
 80018e4:	f000 f8f6 	bl	8001ad4 <__clzsi2>
 80018e8:	4a11      	ldr	r2, [pc, #68]	; (8001930 <__aeabi_i2d+0x5c>)
 80018ea:	1a12      	subs	r2, r2, r0
 80018ec:	280a      	cmp	r0, #10
 80018ee:	dc16      	bgt.n	800191e <__aeabi_i2d+0x4a>
 80018f0:	0003      	movs	r3, r0
 80018f2:	002e      	movs	r6, r5
 80018f4:	3315      	adds	r3, #21
 80018f6:	409e      	lsls	r6, r3
 80018f8:	230b      	movs	r3, #11
 80018fa:	1a18      	subs	r0, r3, r0
 80018fc:	40c5      	lsrs	r5, r0
 80018fe:	0552      	lsls	r2, r2, #21
 8001900:	032d      	lsls	r5, r5, #12
 8001902:	0b2d      	lsrs	r5, r5, #12
 8001904:	0d53      	lsrs	r3, r2, #21
 8001906:	e003      	b.n	8001910 <__aeabi_i2d+0x3c>
 8001908:	2400      	movs	r4, #0
 800190a:	2300      	movs	r3, #0
 800190c:	2500      	movs	r5, #0
 800190e:	2600      	movs	r6, #0
 8001910:	051b      	lsls	r3, r3, #20
 8001912:	432b      	orrs	r3, r5
 8001914:	07e4      	lsls	r4, r4, #31
 8001916:	4323      	orrs	r3, r4
 8001918:	0030      	movs	r0, r6
 800191a:	0019      	movs	r1, r3
 800191c:	bd70      	pop	{r4, r5, r6, pc}
 800191e:	380b      	subs	r0, #11
 8001920:	4085      	lsls	r5, r0
 8001922:	0552      	lsls	r2, r2, #21
 8001924:	032d      	lsls	r5, r5, #12
 8001926:	2600      	movs	r6, #0
 8001928:	0b2d      	lsrs	r5, r5, #12
 800192a:	0d53      	lsrs	r3, r2, #21
 800192c:	e7f0      	b.n	8001910 <__aeabi_i2d+0x3c>
 800192e:	46c0      	nop			; (mov r8, r8)
 8001930:	0000041e 	.word	0x0000041e

08001934 <__aeabi_f2d>:
 8001934:	b570      	push	{r4, r5, r6, lr}
 8001936:	0043      	lsls	r3, r0, #1
 8001938:	0246      	lsls	r6, r0, #9
 800193a:	0fc4      	lsrs	r4, r0, #31
 800193c:	20fe      	movs	r0, #254	; 0xfe
 800193e:	0e1b      	lsrs	r3, r3, #24
 8001940:	1c59      	adds	r1, r3, #1
 8001942:	0a75      	lsrs	r5, r6, #9
 8001944:	4208      	tst	r0, r1
 8001946:	d00c      	beq.n	8001962 <__aeabi_f2d+0x2e>
 8001948:	22e0      	movs	r2, #224	; 0xe0
 800194a:	0092      	lsls	r2, r2, #2
 800194c:	4694      	mov	ip, r2
 800194e:	076d      	lsls	r5, r5, #29
 8001950:	0b36      	lsrs	r6, r6, #12
 8001952:	4463      	add	r3, ip
 8001954:	051b      	lsls	r3, r3, #20
 8001956:	4333      	orrs	r3, r6
 8001958:	07e4      	lsls	r4, r4, #31
 800195a:	4323      	orrs	r3, r4
 800195c:	0028      	movs	r0, r5
 800195e:	0019      	movs	r1, r3
 8001960:	bd70      	pop	{r4, r5, r6, pc}
 8001962:	2b00      	cmp	r3, #0
 8001964:	d114      	bne.n	8001990 <__aeabi_f2d+0x5c>
 8001966:	2d00      	cmp	r5, #0
 8001968:	d01b      	beq.n	80019a2 <__aeabi_f2d+0x6e>
 800196a:	0028      	movs	r0, r5
 800196c:	f000 f8b2 	bl	8001ad4 <__clzsi2>
 8001970:	280a      	cmp	r0, #10
 8001972:	dc1c      	bgt.n	80019ae <__aeabi_f2d+0x7a>
 8001974:	230b      	movs	r3, #11
 8001976:	002e      	movs	r6, r5
 8001978:	1a1b      	subs	r3, r3, r0
 800197a:	40de      	lsrs	r6, r3
 800197c:	0003      	movs	r3, r0
 800197e:	3315      	adds	r3, #21
 8001980:	409d      	lsls	r5, r3
 8001982:	4a0e      	ldr	r2, [pc, #56]	; (80019bc <__aeabi_f2d+0x88>)
 8001984:	0336      	lsls	r6, r6, #12
 8001986:	1a12      	subs	r2, r2, r0
 8001988:	0552      	lsls	r2, r2, #21
 800198a:	0b36      	lsrs	r6, r6, #12
 800198c:	0d53      	lsrs	r3, r2, #21
 800198e:	e7e1      	b.n	8001954 <__aeabi_f2d+0x20>
 8001990:	2d00      	cmp	r5, #0
 8001992:	d009      	beq.n	80019a8 <__aeabi_f2d+0x74>
 8001994:	2280      	movs	r2, #128	; 0x80
 8001996:	0b36      	lsrs	r6, r6, #12
 8001998:	0312      	lsls	r2, r2, #12
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <__aeabi_f2d+0x8c>)
 800199c:	076d      	lsls	r5, r5, #29
 800199e:	4316      	orrs	r6, r2
 80019a0:	e7d8      	b.n	8001954 <__aeabi_f2d+0x20>
 80019a2:	2300      	movs	r3, #0
 80019a4:	2600      	movs	r6, #0
 80019a6:	e7d5      	b.n	8001954 <__aeabi_f2d+0x20>
 80019a8:	2600      	movs	r6, #0
 80019aa:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <__aeabi_f2d+0x8c>)
 80019ac:	e7d2      	b.n	8001954 <__aeabi_f2d+0x20>
 80019ae:	0003      	movs	r3, r0
 80019b0:	3b0b      	subs	r3, #11
 80019b2:	409d      	lsls	r5, r3
 80019b4:	002e      	movs	r6, r5
 80019b6:	2500      	movs	r5, #0
 80019b8:	e7e3      	b.n	8001982 <__aeabi_f2d+0x4e>
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	00000389 	.word	0x00000389
 80019c0:	000007ff 	.word	0x000007ff

080019c4 <__aeabi_d2f>:
 80019c4:	0002      	movs	r2, r0
 80019c6:	004b      	lsls	r3, r1, #1
 80019c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ca:	0d5b      	lsrs	r3, r3, #21
 80019cc:	030c      	lsls	r4, r1, #12
 80019ce:	4e3d      	ldr	r6, [pc, #244]	; (8001ac4 <__aeabi_d2f+0x100>)
 80019d0:	0a64      	lsrs	r4, r4, #9
 80019d2:	0f40      	lsrs	r0, r0, #29
 80019d4:	1c5f      	adds	r7, r3, #1
 80019d6:	0fc9      	lsrs	r1, r1, #31
 80019d8:	4304      	orrs	r4, r0
 80019da:	00d5      	lsls	r5, r2, #3
 80019dc:	4237      	tst	r7, r6
 80019de:	d00a      	beq.n	80019f6 <__aeabi_d2f+0x32>
 80019e0:	4839      	ldr	r0, [pc, #228]	; (8001ac8 <__aeabi_d2f+0x104>)
 80019e2:	181e      	adds	r6, r3, r0
 80019e4:	2efe      	cmp	r6, #254	; 0xfe
 80019e6:	dd16      	ble.n	8001a16 <__aeabi_d2f+0x52>
 80019e8:	20ff      	movs	r0, #255	; 0xff
 80019ea:	2400      	movs	r4, #0
 80019ec:	05c0      	lsls	r0, r0, #23
 80019ee:	4320      	orrs	r0, r4
 80019f0:	07c9      	lsls	r1, r1, #31
 80019f2:	4308      	orrs	r0, r1
 80019f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d106      	bne.n	8001a08 <__aeabi_d2f+0x44>
 80019fa:	432c      	orrs	r4, r5
 80019fc:	d026      	beq.n	8001a4c <__aeabi_d2f+0x88>
 80019fe:	2205      	movs	r2, #5
 8001a00:	0192      	lsls	r2, r2, #6
 8001a02:	0a54      	lsrs	r4, r2, #9
 8001a04:	b2d8      	uxtb	r0, r3
 8001a06:	e7f1      	b.n	80019ec <__aeabi_d2f+0x28>
 8001a08:	4325      	orrs	r5, r4
 8001a0a:	d0ed      	beq.n	80019e8 <__aeabi_d2f+0x24>
 8001a0c:	2080      	movs	r0, #128	; 0x80
 8001a0e:	03c0      	lsls	r0, r0, #15
 8001a10:	4304      	orrs	r4, r0
 8001a12:	20ff      	movs	r0, #255	; 0xff
 8001a14:	e7ea      	b.n	80019ec <__aeabi_d2f+0x28>
 8001a16:	2e00      	cmp	r6, #0
 8001a18:	dd1b      	ble.n	8001a52 <__aeabi_d2f+0x8e>
 8001a1a:	0192      	lsls	r2, r2, #6
 8001a1c:	1e53      	subs	r3, r2, #1
 8001a1e:	419a      	sbcs	r2, r3
 8001a20:	00e4      	lsls	r4, r4, #3
 8001a22:	0f6d      	lsrs	r5, r5, #29
 8001a24:	4322      	orrs	r2, r4
 8001a26:	432a      	orrs	r2, r5
 8001a28:	0753      	lsls	r3, r2, #29
 8001a2a:	d048      	beq.n	8001abe <__aeabi_d2f+0xfa>
 8001a2c:	230f      	movs	r3, #15
 8001a2e:	4013      	ands	r3, r2
 8001a30:	2b04      	cmp	r3, #4
 8001a32:	d000      	beq.n	8001a36 <__aeabi_d2f+0x72>
 8001a34:	3204      	adds	r2, #4
 8001a36:	2380      	movs	r3, #128	; 0x80
 8001a38:	04db      	lsls	r3, r3, #19
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d03f      	beq.n	8001abe <__aeabi_d2f+0xfa>
 8001a3e:	1c70      	adds	r0, r6, #1
 8001a40:	2efe      	cmp	r6, #254	; 0xfe
 8001a42:	d0d1      	beq.n	80019e8 <__aeabi_d2f+0x24>
 8001a44:	0192      	lsls	r2, r2, #6
 8001a46:	0a54      	lsrs	r4, r2, #9
 8001a48:	b2c0      	uxtb	r0, r0
 8001a4a:	e7cf      	b.n	80019ec <__aeabi_d2f+0x28>
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	2400      	movs	r4, #0
 8001a50:	e7cc      	b.n	80019ec <__aeabi_d2f+0x28>
 8001a52:	0032      	movs	r2, r6
 8001a54:	3217      	adds	r2, #23
 8001a56:	db22      	blt.n	8001a9e <__aeabi_d2f+0xda>
 8001a58:	2080      	movs	r0, #128	; 0x80
 8001a5a:	0400      	lsls	r0, r0, #16
 8001a5c:	4320      	orrs	r0, r4
 8001a5e:	241e      	movs	r4, #30
 8001a60:	1ba4      	subs	r4, r4, r6
 8001a62:	2c1f      	cmp	r4, #31
 8001a64:	dd1d      	ble.n	8001aa2 <__aeabi_d2f+0xde>
 8001a66:	2202      	movs	r2, #2
 8001a68:	4252      	negs	r2, r2
 8001a6a:	1b96      	subs	r6, r2, r6
 8001a6c:	0002      	movs	r2, r0
 8001a6e:	40f2      	lsrs	r2, r6
 8001a70:	0016      	movs	r6, r2
 8001a72:	2c20      	cmp	r4, #32
 8001a74:	d004      	beq.n	8001a80 <__aeabi_d2f+0xbc>
 8001a76:	4a15      	ldr	r2, [pc, #84]	; (8001acc <__aeabi_d2f+0x108>)
 8001a78:	4694      	mov	ip, r2
 8001a7a:	4463      	add	r3, ip
 8001a7c:	4098      	lsls	r0, r3
 8001a7e:	4305      	orrs	r5, r0
 8001a80:	002a      	movs	r2, r5
 8001a82:	1e53      	subs	r3, r2, #1
 8001a84:	419a      	sbcs	r2, r3
 8001a86:	4332      	orrs	r2, r6
 8001a88:	2600      	movs	r6, #0
 8001a8a:	0753      	lsls	r3, r2, #29
 8001a8c:	d1ce      	bne.n	8001a2c <__aeabi_d2f+0x68>
 8001a8e:	2480      	movs	r4, #128	; 0x80
 8001a90:	0013      	movs	r3, r2
 8001a92:	04e4      	lsls	r4, r4, #19
 8001a94:	2001      	movs	r0, #1
 8001a96:	4023      	ands	r3, r4
 8001a98:	4222      	tst	r2, r4
 8001a9a:	d1d3      	bne.n	8001a44 <__aeabi_d2f+0x80>
 8001a9c:	e7b0      	b.n	8001a00 <__aeabi_d2f+0x3c>
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	e7ad      	b.n	80019fe <__aeabi_d2f+0x3a>
 8001aa2:	4a0b      	ldr	r2, [pc, #44]	; (8001ad0 <__aeabi_d2f+0x10c>)
 8001aa4:	4694      	mov	ip, r2
 8001aa6:	002a      	movs	r2, r5
 8001aa8:	40e2      	lsrs	r2, r4
 8001aaa:	0014      	movs	r4, r2
 8001aac:	002a      	movs	r2, r5
 8001aae:	4463      	add	r3, ip
 8001ab0:	409a      	lsls	r2, r3
 8001ab2:	4098      	lsls	r0, r3
 8001ab4:	1e55      	subs	r5, r2, #1
 8001ab6:	41aa      	sbcs	r2, r5
 8001ab8:	4302      	orrs	r2, r0
 8001aba:	4322      	orrs	r2, r4
 8001abc:	e7e4      	b.n	8001a88 <__aeabi_d2f+0xc4>
 8001abe:	0033      	movs	r3, r6
 8001ac0:	e79e      	b.n	8001a00 <__aeabi_d2f+0x3c>
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	000007fe 	.word	0x000007fe
 8001ac8:	fffffc80 	.word	0xfffffc80
 8001acc:	fffffca2 	.word	0xfffffca2
 8001ad0:	fffffc82 	.word	0xfffffc82

08001ad4 <__clzsi2>:
 8001ad4:	211c      	movs	r1, #28
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	041b      	lsls	r3, r3, #16
 8001ada:	4298      	cmp	r0, r3
 8001adc:	d301      	bcc.n	8001ae2 <__clzsi2+0xe>
 8001ade:	0c00      	lsrs	r0, r0, #16
 8001ae0:	3910      	subs	r1, #16
 8001ae2:	0a1b      	lsrs	r3, r3, #8
 8001ae4:	4298      	cmp	r0, r3
 8001ae6:	d301      	bcc.n	8001aec <__clzsi2+0x18>
 8001ae8:	0a00      	lsrs	r0, r0, #8
 8001aea:	3908      	subs	r1, #8
 8001aec:	091b      	lsrs	r3, r3, #4
 8001aee:	4298      	cmp	r0, r3
 8001af0:	d301      	bcc.n	8001af6 <__clzsi2+0x22>
 8001af2:	0900      	lsrs	r0, r0, #4
 8001af4:	3904      	subs	r1, #4
 8001af6:	a202      	add	r2, pc, #8	; (adr r2, 8001b00 <__clzsi2+0x2c>)
 8001af8:	5c10      	ldrb	r0, [r2, r0]
 8001afa:	1840      	adds	r0, r0, r1
 8001afc:	4770      	bx	lr
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	02020304 	.word	0x02020304
 8001b04:	01010101 	.word	0x01010101
	...

08001b10 <LL_ADC_SetCommonFrequencyMode>:
  *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_HIGH
  *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_LOW
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonFrequencyMode(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonFrequencyMode)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_LFMEN, CommonFrequencyMode);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a05      	ldr	r2, [pc, #20]	; (8001b34 <LL_ADC_SetCommonFrequencyMode+0x24>)
 8001b20:	401a      	ands	r2, r3
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	431a      	orrs	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	601a      	str	r2, [r3, #0]
}
 8001b2a:	46c0      	nop			; (mov r8, r8)
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	b002      	add	sp, #8
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	46c0      	nop			; (mov r8, r8)
 8001b34:	fdffffff 	.word	0xfdffffff

08001b38 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTime)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	2207      	movs	r2, #7
 8001b48:	4393      	bics	r3, r2
 8001b4a:	001a      	movs	r2, r3
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	615a      	str	r2, [r3, #20]
}
 8001b54:	46c0      	nop			; (mov r8, r8)
 8001b56:	46bd      	mov	sp, r7
 8001b58:	b002      	add	sp, #8
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <LL_ADC_REG_SetSequencerScanDirection>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	2204      	movs	r2, #4
 8001b6c:	4393      	bics	r3, r2
 8001b6e:	001a      	movs	r2, r3
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	431a      	orrs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	60da      	str	r2, [r3, #12]
}
 8001b78:	46c0      	nop			; (mov r8, r8)
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	b002      	add	sp, #8
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <LL_ADC_REG_SetSequencerChAdd>:
  *         
  *         (1) On STM32L0, parameter not available on all devices: only on STM32L053xx, STM32L063xx, STM32L073xx, STM32L083xx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	035b      	lsls	r3, r3, #13
 8001b92:	0b5b      	lsrs	r3, r3, #13
 8001b94:	431a      	orrs	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b9a:	46c0      	nop			; (mov r8, r8)
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	b002      	add	sp, #8
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_DISABLE
  *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	4393      	bics	r3, r2
 8001bb4:	001a      	movs	r2, r3
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	611a      	str	r2, [r3, #16]
}
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	b002      	add	sp, #8
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	4a05      	ldr	r2, [pc, #20]	; (8001bec <LL_ADC_EnableInternalRegulator+0x24>)
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2280      	movs	r2, #128	; 0x80
 8001bda:	0552      	lsls	r2, r2, #21
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	46bd      	mov	sp, r7
 8001be6:	b002      	add	sp, #8
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	6fffffe8 	.word	0x6fffffe8

08001bf0 <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2204      	movs	r2, #4
 8001bfe:	4393      	bics	r3, r2
 8001c00:	001a      	movs	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	605a      	str	r2, [r3, #4]
}
 8001c06:	46c0      	nop			; (mov r8, r8)
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	b002      	add	sp, #8
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSEQIE        LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2208      	movs	r2, #8
 8001c1c:	4393      	bics	r3, r2
 8001c1e:	001a      	movs	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	605a      	str	r2, [r3, #4]
}
 8001c24:	46c0      	nop			; (mov r8, r8)
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b002      	add	sp, #8
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c34:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <LL_APB2_GRP1_EnableClock+0x28>)
 8001c36:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <LL_APB2_GRP1_EnableClock+0x28>)
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c40:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <LL_APB2_GRP1_EnableClock+0x28>)
 8001c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	4013      	ands	r3, r2
 8001c48:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
}
 8001c4c:	46c0      	nop			; (mov r8, r8)
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	b004      	add	sp, #16
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40021000 	.word	0x40021000

08001c58 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8001c60:	4b07      	ldr	r3, [pc, #28]	; (8001c80 <LL_IOP_GRP1_EnableClock+0x28>)
 8001c62:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <LL_IOP_GRP1_EnableClock+0x28>)
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8001c6c:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <LL_IOP_GRP1_EnableClock+0x28>)
 8001c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	4013      	ands	r3, r2
 8001c74:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c76:	68fb      	ldr	r3, [r7, #12]
}
 8001c78:	46c0      	nop			; (mov r8, r8)
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	b004      	add	sp, #16
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40021000 	.word	0x40021000

08001c84 <MX_ADC_Init>:

/* USER CODE END 0 */

/* ADC init function */
void MX_ADC_Init(void)
{
 8001c84:	b5b0      	push	{r4, r5, r7, lr}
 8001c86:	b090      	sub	sp, #64	; 0x40
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001c8a:	2428      	movs	r4, #40	; 0x28
 8001c8c:	193b      	adds	r3, r7, r4
 8001c8e:	0018      	movs	r0, r3
 8001c90:	2314      	movs	r3, #20
 8001c92:	001a      	movs	r2, r3
 8001c94:	2100      	movs	r1, #0
 8001c96:	f001 fdaf 	bl	80037f8 <memset>
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001c9a:	2518      	movs	r5, #24
 8001c9c:	197b      	adds	r3, r7, r5
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	2310      	movs	r3, #16
 8001ca2:	001a      	movs	r2, r3
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	f001 fda7 	bl	80037f8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001caa:	003b      	movs	r3, r7
 8001cac:	0018      	movs	r0, r3
 8001cae:	2318      	movs	r3, #24
 8001cb0:	001a      	movs	r2, r3
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	f001 fda0 	bl	80037f8 <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	f7ff ffb5 	bl	8001c2c <LL_APB2_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	f7ff ffc8 	bl	8001c58 <LL_IOP_GRP1_EnableClock>
  /**ADC GPIO Configuration
  PA0   ------> ADC_IN0
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8001cc8:	003b      	movs	r3, r7
 8001cca:	2201      	movs	r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001cce:	003b      	movs	r3, r7
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cd4:	003b      	movs	r3, r7
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cda:	003a      	movs	r2, r7
 8001cdc:	23a0      	movs	r3, #160	; 0xa0
 8001cde:	05db      	lsls	r3, r3, #23
 8001ce0:	0011      	movs	r1, r2
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f001 f9d2 	bl	800308c <LL_GPIO_Init>

  /* USER CODE END ADC_Init 1 */

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_0);
 8001ce8:	4b35      	ldr	r3, [pc, #212]	; (8001dc0 <MX_ADC_Init+0x13c>)
 8001cea:	2101      	movs	r1, #1
 8001cec:	0018      	movs	r0, r3
 8001cee:	f7ff ff47 	bl	8001b80 <LL_ADC_REG_SetSequencerChAdd>

  /** Common config
  */
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001cf2:	0021      	movs	r1, r4
 8001cf4:	187b      	adds	r3, r7, r1
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001cfa:	187b      	adds	r3, r7, r1
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	605a      	str	r2, [r3, #4]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8001d00:	187b      	adds	r3, r7, r1
 8001d02:	2200      	movs	r2, #0
 8001d04:	609a      	str	r2, [r3, #8]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8001d06:	187b      	adds	r3, r7, r1
 8001d08:	2200      	movs	r2, #0
 8001d0a:	60da      	str	r2, [r3, #12]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8001d0c:	187b      	adds	r3, r7, r1
 8001d0e:	2200      	movs	r2, #0
 8001d10:	611a      	str	r2, [r3, #16]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001d12:	187b      	adds	r3, r7, r1
 8001d14:	4a2a      	ldr	r2, [pc, #168]	; (8001dc0 <MX_ADC_Init+0x13c>)
 8001d16:	0019      	movs	r1, r3
 8001d18:	0010      	movs	r0, r2
 8001d1a:	f000 ffbb 	bl	8002c94 <LL_ADC_REG_Init>
  LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8001d1e:	4b28      	ldr	r3, [pc, #160]	; (8001dc0 <MX_ADC_Init+0x13c>)
 8001d20:	2100      	movs	r1, #0
 8001d22:	0018      	movs	r0, r3
 8001d24:	f7ff ff08 	bl	8001b38 <LL_ADC_SetSamplingTimeCommonChannels>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 8001d28:	4b25      	ldr	r3, [pc, #148]	; (8001dc0 <MX_ADC_Init+0x13c>)
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	f7ff ff38 	bl	8001ba2 <LL_ADC_SetOverSamplingScope>
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
 8001d32:	4b23      	ldr	r3, [pc, #140]	; (8001dc0 <MX_ADC_Init+0x13c>)
 8001d34:	2100      	movs	r1, #0
 8001d36:	0018      	movs	r0, r3
 8001d38:	f7ff ff10 	bl	8001b5c <LL_ADC_REG_SetSequencerScanDirection>
  LL_ADC_SetCommonFrequencyMode(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_CLOCK_FREQ_MODE_HIGH);
 8001d3c:	4b21      	ldr	r3, [pc, #132]	; (8001dc4 <MX_ADC_Init+0x140>)
 8001d3e:	2100      	movs	r1, #0
 8001d40:	0018      	movs	r0, r3
 8001d42:	f7ff fee5 	bl	8001b10 <LL_ADC_SetCommonFrequencyMode>
  LL_ADC_DisableIT_EOC(ADC1);
 8001d46:	4b1e      	ldr	r3, [pc, #120]	; (8001dc0 <MX_ADC_Init+0x13c>)
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f7ff ff51 	bl	8001bf0 <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 8001d4e:	4b1c      	ldr	r3, [pc, #112]	; (8001dc0 <MX_ADC_Init+0x13c>)
 8001d50:	0018      	movs	r0, r3
 8001d52:	f7ff ff5c 	bl	8001c0e <LL_ADC_DisableIT_EOS>
  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV1;
 8001d56:	197b      	adds	r3, r7, r5
 8001d58:	22c0      	movs	r2, #192	; 0xc0
 8001d5a:	0612      	lsls	r2, r2, #24
 8001d5c:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001d5e:	197b      	adds	r3, r7, r5
 8001d60:	2200      	movs	r2, #0
 8001d62:	605a      	str	r2, [r3, #4]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001d64:	197b      	adds	r3, r7, r5
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8001d6a:	197b      	adds	r3, r7, r5
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	60da      	str	r2, [r3, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001d70:	197b      	adds	r3, r7, r5
 8001d72:	4a13      	ldr	r2, [pc, #76]	; (8001dc0 <MX_ADC_Init+0x13c>)
 8001d74:	0019      	movs	r1, r3
 8001d76:	0010      	movs	r0, r2
 8001d78:	f000 ff56 	bl	8002c28 <LL_ADC_Init>

  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8001d7c:	4b10      	ldr	r3, [pc, #64]	; (8001dc0 <MX_ADC_Init+0x13c>)
 8001d7e:	0018      	movs	r0, r3
 8001d80:	f7ff ff22 	bl	8001bc8 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8001d84:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <MX_ADC_Init+0x144>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4910      	ldr	r1, [pc, #64]	; (8001dcc <MX_ADC_Init+0x148>)
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	f7fe f9bc 	bl	8000108 <__udivsi3>
 8001d90:	0003      	movs	r3, r0
 8001d92:	001a      	movs	r2, r3
 8001d94:	0013      	movs	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	189b      	adds	r3, r3, r2
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	210a      	movs	r1, #10
 8001d9e:	0018      	movs	r0, r3
 8001da0:	f7fe f9b2 	bl	8000108 <__udivsi3>
 8001da4:	0003      	movs	r3, r0
 8001da6:	63fb      	str	r3, [r7, #60]	; 0x3c
  while(wait_loop_index != 0)
 8001da8:	e002      	b.n	8001db0 <MX_ADC_Init+0x12c>
  {
    wait_loop_index--;
 8001daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dac:	3b01      	subs	r3, #1
 8001dae:	63fb      	str	r3, [r7, #60]	; 0x3c
  while(wait_loop_index != 0)
 8001db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f9      	bne.n	8001daa <MX_ADC_Init+0x126>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001db6:	46c0      	nop			; (mov r8, r8)
 8001db8:	46c0      	nop			; (mov r8, r8)
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	b010      	add	sp, #64	; 0x40
 8001dbe:	bdb0      	pop	{r4, r5, r7, pc}
 8001dc0:	40012400 	.word	0x40012400
 8001dc4:	40012708 	.word	0x40012708
 8001dc8:	20000000 	.word	0x20000000
 8001dcc:	00030d40 	.word	0x00030d40

08001dd0 <LL_IOP_GRP1_EnableClock>:
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8001dd8:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <LL_IOP_GRP1_EnableClock+0x28>)
 8001dda:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <LL_IOP_GRP1_EnableClock+0x28>)
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	430a      	orrs	r2, r1
 8001de2:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8001de4:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <LL_IOP_GRP1_EnableClock+0x28>)
 8001de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	4013      	ands	r3, r2
 8001dec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dee:	68fb      	ldr	r3, [r7, #12]
}
 8001df0:	46c0      	nop			; (mov r8, r8)
 8001df2:	46bd      	mov	sp, r7
 8001df4:	b004      	add	sp, #16
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40021000 	.word	0x40021000

08001dfc <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001dfc:	b590      	push	{r4, r7, lr}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], SYSCFG_EXTICR1_EXTI0 << (Line >> 16U), Port << (Line >> 16U));
 8001e06:	4a0f      	ldr	r2, [pc, #60]	; (8001e44 <LL_SYSCFG_SetEXTISource+0x48>)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	21ff      	movs	r1, #255	; 0xff
 8001e0c:	400b      	ands	r3, r1
 8001e0e:	3302      	adds	r3, #2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	589b      	ldr	r3, [r3, r2]
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	0c12      	lsrs	r2, r2, #16
 8001e18:	210f      	movs	r1, #15
 8001e1a:	4091      	lsls	r1, r2
 8001e1c:	000a      	movs	r2, r1
 8001e1e:	43d2      	mvns	r2, r2
 8001e20:	401a      	ands	r2, r3
 8001e22:	0011      	movs	r1, r2
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	0c1b      	lsrs	r3, r3, #16
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	409a      	lsls	r2, r3
 8001e2c:	4805      	ldr	r0, [pc, #20]	; (8001e44 <LL_SYSCFG_SetEXTISource+0x48>)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	24ff      	movs	r4, #255	; 0xff
 8001e32:	4023      	ands	r3, r4
 8001e34:	430a      	orrs	r2, r1
 8001e36:	3302      	adds	r3, #2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	501a      	str	r2, [r3, r0]
}
 8001e3c:	46c0      	nop			; (mov r8, r8)
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	b003      	add	sp, #12
 8001e42:	bd90      	pop	{r4, r7, pc}
 8001e44:	40010000 	.word	0x40010000

08001e48 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6819      	ldr	r1, [r3, #0]
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	435b      	muls	r3, r3
 8001e5c:	001a      	movs	r2, r3
 8001e5e:	0013      	movs	r3, r2
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	189b      	adds	r3, r3, r2
 8001e64:	43db      	mvns	r3, r3
 8001e66:	400b      	ands	r3, r1
 8001e68:	001a      	movs	r2, r3
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	435b      	muls	r3, r3
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	434b      	muls	r3, r1
 8001e72:	431a      	orrs	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	601a      	str	r2, [r3, #0]
}
 8001e78:	46c0      	nop			; (mov r8, r8)
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	b004      	add	sp, #16
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	68d9      	ldr	r1, [r3, #12]
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	435b      	muls	r3, r3
 8001e94:	001a      	movs	r2, r3
 8001e96:	0013      	movs	r3, r2
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	189b      	adds	r3, r3, r2
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	400b      	ands	r3, r1
 8001ea0:	001a      	movs	r2, r3
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	435b      	muls	r3, r3
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	434b      	muls	r3, r1
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	60da      	str	r2, [r3, #12]
}
 8001eb0:	46c0      	nop			; (mov r8, r8)
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	b004      	add	sp, #16
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ec8:	46c0      	nop			; (mov r8, r8)
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	b002      	add	sp, #8
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ed0:	b590      	push	{r4, r7, lr}
 8001ed2:	b089      	sub	sp, #36	; 0x24
 8001ed4:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001ed6:	2418      	movs	r4, #24
 8001ed8:	193b      	adds	r3, r7, r4
 8001eda:	0018      	movs	r0, r3
 8001edc:	2308      	movs	r3, #8
 8001ede:	001a      	movs	r2, r3
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	f001 fc89 	bl	80037f8 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee6:	003b      	movs	r3, r7
 8001ee8:	0018      	movs	r0, r3
 8001eea:	2318      	movs	r3, #24
 8001eec:	001a      	movs	r2, r3
 8001eee:	2100      	movs	r1, #0
 8001ef0:	f001 fc82 	bl	80037f8 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8001ef4:	2004      	movs	r0, #4
 8001ef6:	f7ff ff6b 	bl	8001dd0 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOH);
 8001efa:	2080      	movs	r0, #128	; 0x80
 8001efc:	f7ff ff68 	bl	8001dd0 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8001f00:	2001      	movs	r0, #1
 8001f02:	f7ff ff65 	bl	8001dd0 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8001f06:	23a0      	movs	r3, #160	; 0xa0
 8001f08:	05db      	lsls	r3, r3, #23
 8001f0a:	2120      	movs	r1, #32
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f7ff ffd3 	bl	8001eb8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8001f12:	4b1f      	ldr	r3, [pc, #124]	; (8001f90 <MX_GPIO_Init+0xc0>)
 8001f14:	0019      	movs	r1, r3
 8001f16:	2002      	movs	r0, #2
 8001f18:	f7ff ff70 	bl	8001dfc <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8001f1c:	2380      	movs	r3, #128	; 0x80
 8001f1e:	019b      	lsls	r3, r3, #6
 8001f20:	481c      	ldr	r0, [pc, #112]	; (8001f94 <MX_GPIO_Init+0xc4>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	0019      	movs	r1, r3
 8001f26:	f7ff ffab 	bl	8001e80 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8001f2a:	2380      	movs	r3, #128	; 0x80
 8001f2c:	019b      	lsls	r3, r3, #6
 8001f2e:	4819      	ldr	r0, [pc, #100]	; (8001f94 <MX_GPIO_Init+0xc4>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	0019      	movs	r1, r3
 8001f34:	f7ff ff88 	bl	8001e48 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001f38:	0021      	movs	r1, r4
 8001f3a:	187b      	adds	r3, r7, r1
 8001f3c:	2280      	movs	r2, #128	; 0x80
 8001f3e:	0192      	lsls	r2, r2, #6
 8001f40:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001f42:	187b      	adds	r3, r7, r1
 8001f44:	2201      	movs	r2, #1
 8001f46:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001f48:	187b      	adds	r3, r7, r1
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001f4e:	187b      	adds	r3, r7, r1
 8001f50:	2202      	movs	r2, #2
 8001f52:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001f54:	187b      	adds	r3, r7, r1
 8001f56:	0018      	movs	r0, r3
 8001f58:	f000 ff56 	bl	8002e08 <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8001f5c:	003b      	movs	r3, r7
 8001f5e:	2220      	movs	r2, #32
 8001f60:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001f62:	003b      	movs	r3, r7
 8001f64:	2201      	movs	r2, #1
 8001f66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001f68:	003b      	movs	r3, r7
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f6e:	003b      	movs	r3, r7
 8001f70:	2200      	movs	r2, #0
 8001f72:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f74:	003b      	movs	r3, r7
 8001f76:	2200      	movs	r2, #0
 8001f78:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f7a:	003a      	movs	r2, r7
 8001f7c:	23a0      	movs	r3, #160	; 0xa0
 8001f7e:	05db      	lsls	r3, r3, #23
 8001f80:	0011      	movs	r1, r2
 8001f82:	0018      	movs	r0, r3
 8001f84:	f001 f882 	bl	800308c <LL_GPIO_Init>

}
 8001f88:	46c0      	nop			; (mov r8, r8)
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	b009      	add	sp, #36	; 0x24
 8001f8e:	bd90      	pop	{r4, r7, pc}
 8001f90:	00040003 	.word	0x00040003
 8001f94:	50000800 	.word	0x50000800

08001f98 <Ecrire>:
#include "lcd.h"

void Ecrire(char f){
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	0002      	movs	r2, r0
 8001fa0:	1dfb      	adds	r3, r7, #7
 8001fa2:	701a      	strb	r2, [r3, #0]

//mettre les sorties � 0
PORT_CHAR->ODR&=~(1<<DB4);
 8001fa4:	23a0      	movs	r3, #160	; 0xa0
 8001fa6:	05db      	lsls	r3, r3, #23
 8001fa8:	695a      	ldr	r2, [r3, #20]
 8001faa:	23a0      	movs	r3, #160	; 0xa0
 8001fac:	05db      	lsls	r3, r3, #23
 8001fae:	2140      	movs	r1, #64	; 0x40
 8001fb0:	438a      	bics	r2, r1
 8001fb2:	615a      	str	r2, [r3, #20]
PORT_CHAR->ODR&=~(1<<DB5);
 8001fb4:	23a0      	movs	r3, #160	; 0xa0
 8001fb6:	05db      	lsls	r3, r3, #23
 8001fb8:	695a      	ldr	r2, [r3, #20]
 8001fba:	23a0      	movs	r3, #160	; 0xa0
 8001fbc:	05db      	lsls	r3, r3, #23
 8001fbe:	2180      	movs	r1, #128	; 0x80
 8001fc0:	438a      	bics	r2, r1
 8001fc2:	615a      	str	r2, [r3, #20]
PORT_CHAR->ODR&=~(1<<DB6);
 8001fc4:	23a0      	movs	r3, #160	; 0xa0
 8001fc6:	05db      	lsls	r3, r3, #23
 8001fc8:	695a      	ldr	r2, [r3, #20]
 8001fca:	23a0      	movs	r3, #160	; 0xa0
 8001fcc:	05db      	lsls	r3, r3, #23
 8001fce:	4922      	ldr	r1, [pc, #136]	; (8002058 <Ecrire+0xc0>)
 8001fd0:	400a      	ands	r2, r1
 8001fd2:	615a      	str	r2, [r3, #20]
PORT_CHAR->ODR&=~(1<<DB7);
 8001fd4:	23a0      	movs	r3, #160	; 0xa0
 8001fd6:	05db      	lsls	r3, r3, #23
 8001fd8:	695a      	ldr	r2, [r3, #20]
 8001fda:	23a0      	movs	r3, #160	; 0xa0
 8001fdc:	05db      	lsls	r3, r3, #23
 8001fde:	491f      	ldr	r1, [pc, #124]	; (800205c <Ecrire+0xc4>)
 8001fe0:	400a      	ands	r2, r1
 8001fe2:	615a      	str	r2, [r3, #20]

//si le bit 7 de f est � 1 mettre le bit DB7 � 1
if((f & 0b10000000)!=0) PORT_CHAR->ODR|=(1<<DB7);
 8001fe4:	1dfb      	adds	r3, r7, #7
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	b25b      	sxtb	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	da08      	bge.n	8002000 <Ecrire+0x68>
 8001fee:	23a0      	movs	r3, #160	; 0xa0
 8001ff0:	05db      	lsls	r3, r3, #23
 8001ff2:	695a      	ldr	r2, [r3, #20]
 8001ff4:	23a0      	movs	r3, #160	; 0xa0
 8001ff6:	05db      	lsls	r3, r3, #23
 8001ff8:	2180      	movs	r1, #128	; 0x80
 8001ffa:	0089      	lsls	r1, r1, #2
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	615a      	str	r2, [r3, #20]

//si le bit 6 de f est � 1 mettre le bit DB6 � 1
if((f & 0b01000000)!=0) PORT_CHAR->ODR|=(1<<DB6);
 8002000:	1dfb      	adds	r3, r7, #7
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2240      	movs	r2, #64	; 0x40
 8002006:	4013      	ands	r3, r2
 8002008:	d008      	beq.n	800201c <Ecrire+0x84>
 800200a:	23a0      	movs	r3, #160	; 0xa0
 800200c:	05db      	lsls	r3, r3, #23
 800200e:	695a      	ldr	r2, [r3, #20]
 8002010:	23a0      	movs	r3, #160	; 0xa0
 8002012:	05db      	lsls	r3, r3, #23
 8002014:	2180      	movs	r1, #128	; 0x80
 8002016:	0049      	lsls	r1, r1, #1
 8002018:	430a      	orrs	r2, r1
 800201a:	615a      	str	r2, [r3, #20]

//si le bit 5 de f est � 1 mettre le bit DB5 � 1
if((f & 0b00100000)!=0) PORT_CHAR->ODR|=(1<<DB5);
 800201c:	1dfb      	adds	r3, r7, #7
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2220      	movs	r2, #32
 8002022:	4013      	ands	r3, r2
 8002024:	d007      	beq.n	8002036 <Ecrire+0x9e>
 8002026:	23a0      	movs	r3, #160	; 0xa0
 8002028:	05db      	lsls	r3, r3, #23
 800202a:	695a      	ldr	r2, [r3, #20]
 800202c:	23a0      	movs	r3, #160	; 0xa0
 800202e:	05db      	lsls	r3, r3, #23
 8002030:	2180      	movs	r1, #128	; 0x80
 8002032:	430a      	orrs	r2, r1
 8002034:	615a      	str	r2, [r3, #20]

//si le bit 7 de f est � 1 mettre le bit DB4 � 1
if((f & 0b00010000)!=0) PORT_CHAR->ODR|=(1<<DB4);
 8002036:	1dfb      	adds	r3, r7, #7
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2210      	movs	r2, #16
 800203c:	4013      	ands	r3, r2
 800203e:	d007      	beq.n	8002050 <Ecrire+0xb8>
 8002040:	23a0      	movs	r3, #160	; 0xa0
 8002042:	05db      	lsls	r3, r3, #23
 8002044:	695a      	ldr	r2, [r3, #20]
 8002046:	23a0      	movs	r3, #160	; 0xa0
 8002048:	05db      	lsls	r3, r3, #23
 800204a:	2140      	movs	r1, #64	; 0x40
 800204c:	430a      	orrs	r2, r1
 800204e:	615a      	str	r2, [r3, #20]
}
 8002050:	46c0      	nop			; (mov r8, r8)
 8002052:	46bd      	mov	sp, r7
 8002054:	b002      	add	sp, #8
 8002056:	bd80      	pop	{r7, pc}
 8002058:	fffffeff 	.word	0xfffffeff
 800205c:	fffffdff 	.word	0xfffffdff

08002060 <toggle_e>:


void toggle_e(){
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
	//mettre la pin E du LCD � 1
	Port_E->ODR|=(1<<E);
 8002064:	4b08      	ldr	r3, [pc, #32]	; (8002088 <toggle_e+0x28>)
 8002066:	695a      	ldr	r2, [r3, #20]
 8002068:	4b07      	ldr	r3, [pc, #28]	; (8002088 <toggle_e+0x28>)
 800206a:	2120      	movs	r1, #32
 800206c:	430a      	orrs	r2, r1
 800206e:	615a      	str	r2, [r3, #20]


	//attendre un peu
	  LL_mDelay(50);//delay=50us
 8002070:	2032      	movs	r0, #50	; 0x32
 8002072:	f001 fb6d 	bl	8003750 <LL_mDelay>

	//mettre la pin E du LCD � 0
	Port_E->ODR&=~(1<<E);	//mettre E � 0
 8002076:	4b04      	ldr	r3, [pc, #16]	; (8002088 <toggle_e+0x28>)
 8002078:	695a      	ldr	r2, [r3, #20]
 800207a:	4b03      	ldr	r3, [pc, #12]	; (8002088 <toggle_e+0x28>)
 800207c:	2120      	movs	r1, #32
 800207e:	438a      	bics	r2, r1
 8002080:	615a      	str	r2, [r3, #20]

}
 8002082:	46c0      	nop			; (mov r8, r8)
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	50000400 	.word	0x50000400

0800208c <D_set_E_Toggle>:
void D_set_E_Toggle (char f){
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	0002      	movs	r2, r0
 8002094:	1dfb      	adds	r3, r7, #7
 8002096:	701a      	strb	r2, [r3, #0]


Ecrire(f);
 8002098:	1dfb      	adds	r3, r7, #7
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	0018      	movs	r0, r3
 800209e:	f7ff ff7b 	bl	8001f98 <Ecrire>

toggle_e();
 80020a2:	f7ff ffdd 	bl	8002060 <toggle_e>

}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	46bd      	mov	sp, r7
 80020aa:	b002      	add	sp, #8
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <EcrireFonction>:


void EcrireFonction(char f){
 80020b0:	b590      	push	{r4, r7, lr}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	0002      	movs	r2, r0
 80020b8:	1dfb      	adds	r3, r7, #7
 80020ba:	701a      	strb	r2, [r3, #0]
	char nibble_pfort;
	char nibble_pfaible;
//mettre la pin RS du LCD � 0
Port_RS->ODR&=~(1<<rs);
 80020bc:	4b15      	ldr	r3, [pc, #84]	; (8002114 <EcrireFonction+0x64>)
 80020be:	695a      	ldr	r2, [r3, #20]
 80020c0:	4b14      	ldr	r3, [pc, #80]	; (8002114 <EcrireFonction+0x64>)
 80020c2:	2110      	movs	r1, #16
 80020c4:	438a      	bics	r2, r1
 80020c6:	615a      	str	r2, [r3, #20]

//�crire le nibble de poids fort de f
D_set_E_Toggle(f);
 80020c8:	1dfb      	adds	r3, r7, #7
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	0018      	movs	r0, r3
 80020ce:	f7ff ffdd 	bl	800208c <D_set_E_Toggle>

//inverser le nibble de poids fort et le nibble de poids faible de f
nibble_pfort=(f&0b11110000)>>4;
 80020d2:	200f      	movs	r0, #15
 80020d4:	183b      	adds	r3, r7, r0
 80020d6:	1dfa      	adds	r2, r7, #7
 80020d8:	7812      	ldrb	r2, [r2, #0]
 80020da:	0912      	lsrs	r2, r2, #4
 80020dc:	701a      	strb	r2, [r3, #0]
nibble_pfaible=f&0b00001111;
 80020de:	240e      	movs	r4, #14
 80020e0:	193b      	adds	r3, r7, r4
 80020e2:	1dfa      	adds	r2, r7, #7
 80020e4:	7812      	ldrb	r2, [r2, #0]
 80020e6:	210f      	movs	r1, #15
 80020e8:	400a      	ands	r2, r1
 80020ea:	701a      	strb	r2, [r3, #0]
int swap=nibble_pfort|(nibble_pfaible<<4);
 80020ec:	183b      	adds	r3, r7, r0
 80020ee:	781a      	ldrb	r2, [r3, #0]
 80020f0:	193b      	adds	r3, r7, r4
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	011b      	lsls	r3, r3, #4
 80020f6:	4313      	orrs	r3, r2
 80020f8:	60bb      	str	r3, [r7, #8]

//�crire le nibble
D_set_E_Toggle(swap);
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	0018      	movs	r0, r3
 8002100:	f7ff ffc4 	bl	800208c <D_set_E_Toggle>

//attendre un peu
LL_mDelay(50);//delay=50us
 8002104:	2032      	movs	r0, #50	; 0x32
 8002106:	f001 fb23 	bl	8003750 <LL_mDelay>

}
 800210a:	46c0      	nop			; (mov r8, r8)
 800210c:	46bd      	mov	sp, r7
 800210e:	b005      	add	sp, #20
 8002110:	bd90      	pop	{r4, r7, pc}
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	50000400 	.word	0x50000400

08002118 <EcrireCaractere>:


void EcrireCaractere(char c){
 8002118:	b590      	push	{r4, r7, lr}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	0002      	movs	r2, r0
 8002120:	1dfb      	adds	r3, r7, #7
 8002122:	701a      	strb	r2, [r3, #0]
	//mettre la pin RS du LCD � 1
	 Port_RS->ODR|=(1<<rs);
 8002124:	4b15      	ldr	r3, [pc, #84]	; (800217c <EcrireCaractere+0x64>)
 8002126:	695a      	ldr	r2, [r3, #20]
 8002128:	4b14      	ldr	r3, [pc, #80]	; (800217c <EcrireCaractere+0x64>)
 800212a:	2110      	movs	r1, #16
 800212c:	430a      	orrs	r2, r1
 800212e:	615a      	str	r2, [r3, #20]

    //�crire le nibble de poids fort de c
	 D_set_E_Toggle(c); //call D_set_E_Toggle
 8002130:	1dfb      	adds	r3, r7, #7
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	0018      	movs	r0, r3
 8002136:	f7ff ffa9 	bl	800208c <D_set_E_Toggle>

    //inverser le nibble de poids fort et le nibble de poids faible de c
	char nibble_pfort=(c&0b11110000)>>4;
 800213a:	200f      	movs	r0, #15
 800213c:	183b      	adds	r3, r7, r0
 800213e:	1dfa      	adds	r2, r7, #7
 8002140:	7812      	ldrb	r2, [r2, #0]
 8002142:	0912      	lsrs	r2, r2, #4
 8002144:	701a      	strb	r2, [r3, #0]
	char nibble_pfaible=c&0b00001111;
 8002146:	240e      	movs	r4, #14
 8002148:	193b      	adds	r3, r7, r4
 800214a:	1dfa      	adds	r2, r7, #7
 800214c:	7812      	ldrb	r2, [r2, #0]
 800214e:	210f      	movs	r1, #15
 8002150:	400a      	ands	r2, r1
 8002152:	701a      	strb	r2, [r3, #0]
	int swap=nibble_pfort|(nibble_pfaible<<4);
 8002154:	183b      	adds	r3, r7, r0
 8002156:	781a      	ldrb	r2, [r3, #0]
 8002158:	193b      	adds	r3, r7, r4
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	011b      	lsls	r3, r3, #4
 800215e:	4313      	orrs	r3, r2
 8002160:	60bb      	str	r3, [r7, #8]

	//�crire le nibble
	 D_set_E_Toggle(swap);
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	b2db      	uxtb	r3, r3
 8002166:	0018      	movs	r0, r3
 8002168:	f7ff ff90 	bl	800208c <D_set_E_Toggle>

	 //attendre un peu
	  LL_mDelay(50); //delay=50us
 800216c:	2032      	movs	r0, #50	; 0x32
 800216e:	f001 faef 	bl	8003750 <LL_mDelay>
}
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	46bd      	mov	sp, r7
 8002176:	b005      	add	sp, #20
 8002178:	bd90      	pop	{r4, r7, pc}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	50000400 	.word	0x50000400

08002180 <EcrireChaine>:

void EcrireChaine(char ch[]){
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
int  i=0;
 8002188:	2300      	movs	r3, #0
 800218a:	60fb      	str	r3, [r7, #12]
while(ch[i]!='\0') {EcrireCaractere (ch[i]); i++;}
 800218c:	e009      	b.n	80021a2 <EcrireChaine+0x22>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	18d3      	adds	r3, r2, r3
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	0018      	movs	r0, r3
 8002198:	f7ff ffbe 	bl	8002118 <EcrireCaractere>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	3301      	adds	r3, #1
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	18d3      	adds	r3, r2, r3
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1ef      	bne.n	800218e <EcrireChaine+0xe>

}
 80021ae:	46c0      	nop			; (mov r8, r8)
 80021b0:	46c0      	nop			; (mov r8, r8)
 80021b2:	46bd      	mov	sp, r7
 80021b4:	b004      	add	sp, #16
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <lcdinit4>:

void lcdinit4(){
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0

	  LL_mDelay(1000000);//delay=1000ms
 80021bc:	4b4e      	ldr	r3, [pc, #312]	; (80022f8 <lcdinit4+0x140>)
 80021be:	0018      	movs	r0, r3
 80021c0:	f001 fac6 	bl	8003750 <LL_mDelay>

	//Activer les sorties du microcontr�leur
	PORT_CHAR->MODER&=~(0b11<<(2*DB4));
 80021c4:	23a0      	movs	r3, #160	; 0xa0
 80021c6:	05db      	lsls	r3, r3, #23
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	23a0      	movs	r3, #160	; 0xa0
 80021cc:	05db      	lsls	r3, r3, #23
 80021ce:	494b      	ldr	r1, [pc, #300]	; (80022fc <lcdinit4+0x144>)
 80021d0:	400a      	ands	r2, r1
 80021d2:	601a      	str	r2, [r3, #0]
	PORT_CHAR->MODER|=(0b01<<(2*DB4));
 80021d4:	23a0      	movs	r3, #160	; 0xa0
 80021d6:	05db      	lsls	r3, r3, #23
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	23a0      	movs	r3, #160	; 0xa0
 80021dc:	05db      	lsls	r3, r3, #23
 80021de:	2180      	movs	r1, #128	; 0x80
 80021e0:	0149      	lsls	r1, r1, #5
 80021e2:	430a      	orrs	r2, r1
 80021e4:	601a      	str	r2, [r3, #0]
	PORT_CHAR->MODER&=~(0b11<<(2*DB5));
 80021e6:	23a0      	movs	r3, #160	; 0xa0
 80021e8:	05db      	lsls	r3, r3, #23
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	23a0      	movs	r3, #160	; 0xa0
 80021ee:	05db      	lsls	r3, r3, #23
 80021f0:	4943      	ldr	r1, [pc, #268]	; (8002300 <lcdinit4+0x148>)
 80021f2:	400a      	ands	r2, r1
 80021f4:	601a      	str	r2, [r3, #0]
	PORT_CHAR->MODER|=(0b01<<(2*DB5));
 80021f6:	23a0      	movs	r3, #160	; 0xa0
 80021f8:	05db      	lsls	r3, r3, #23
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	23a0      	movs	r3, #160	; 0xa0
 80021fe:	05db      	lsls	r3, r3, #23
 8002200:	2180      	movs	r1, #128	; 0x80
 8002202:	01c9      	lsls	r1, r1, #7
 8002204:	430a      	orrs	r2, r1
 8002206:	601a      	str	r2, [r3, #0]
	PORT_CHAR->MODER&=~(0b11<<(2*DB6));
 8002208:	23a0      	movs	r3, #160	; 0xa0
 800220a:	05db      	lsls	r3, r3, #23
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	23a0      	movs	r3, #160	; 0xa0
 8002210:	05db      	lsls	r3, r3, #23
 8002212:	493c      	ldr	r1, [pc, #240]	; (8002304 <lcdinit4+0x14c>)
 8002214:	400a      	ands	r2, r1
 8002216:	601a      	str	r2, [r3, #0]
	PORT_CHAR->MODER|=(0b01<<(2*DB6));
 8002218:	23a0      	movs	r3, #160	; 0xa0
 800221a:	05db      	lsls	r3, r3, #23
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	23a0      	movs	r3, #160	; 0xa0
 8002220:	05db      	lsls	r3, r3, #23
 8002222:	2180      	movs	r1, #128	; 0x80
 8002224:	0249      	lsls	r1, r1, #9
 8002226:	430a      	orrs	r2, r1
 8002228:	601a      	str	r2, [r3, #0]
	PORT_CHAR->MODER&=~(0b11<<(2*DB7));
 800222a:	23a0      	movs	r3, #160	; 0xa0
 800222c:	05db      	lsls	r3, r3, #23
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	23a0      	movs	r3, #160	; 0xa0
 8002232:	05db      	lsls	r3, r3, #23
 8002234:	4934      	ldr	r1, [pc, #208]	; (8002308 <lcdinit4+0x150>)
 8002236:	400a      	ands	r2, r1
 8002238:	601a      	str	r2, [r3, #0]
	PORT_CHAR->MODER|=(0b01<<(2*DB7));
 800223a:	23a0      	movs	r3, #160	; 0xa0
 800223c:	05db      	lsls	r3, r3, #23
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	23a0      	movs	r3, #160	; 0xa0
 8002242:	05db      	lsls	r3, r3, #23
 8002244:	2180      	movs	r1, #128	; 0x80
 8002246:	02c9      	lsls	r1, r1, #11
 8002248:	430a      	orrs	r2, r1
 800224a:	601a      	str	r2, [r3, #0]


	Port_E->MODER&=~(0b11<<(2*E));
 800224c:	4b2f      	ldr	r3, [pc, #188]	; (800230c <lcdinit4+0x154>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4b2e      	ldr	r3, [pc, #184]	; (800230c <lcdinit4+0x154>)
 8002252:	492f      	ldr	r1, [pc, #188]	; (8002310 <lcdinit4+0x158>)
 8002254:	400a      	ands	r2, r1
 8002256:	601a      	str	r2, [r3, #0]
	Port_E->MODER|=(0b01<<(2*E));
 8002258:	4b2c      	ldr	r3, [pc, #176]	; (800230c <lcdinit4+0x154>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	4b2b      	ldr	r3, [pc, #172]	; (800230c <lcdinit4+0x154>)
 800225e:	2180      	movs	r1, #128	; 0x80
 8002260:	00c9      	lsls	r1, r1, #3
 8002262:	430a      	orrs	r2, r1
 8002264:	601a      	str	r2, [r3, #0]

	Port_RS->MODER&=~(0b11<<(2*rs));
 8002266:	4b29      	ldr	r3, [pc, #164]	; (800230c <lcdinit4+0x154>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	4b28      	ldr	r3, [pc, #160]	; (800230c <lcdinit4+0x154>)
 800226c:	4929      	ldr	r1, [pc, #164]	; (8002314 <lcdinit4+0x15c>)
 800226e:	400a      	ands	r2, r1
 8002270:	601a      	str	r2, [r3, #0]
	Port_RS->MODER|=(0b01<<(2*rs));
 8002272:	4b26      	ldr	r3, [pc, #152]	; (800230c <lcdinit4+0x154>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	4b25      	ldr	r3, [pc, #148]	; (800230c <lcdinit4+0x154>)
 8002278:	2180      	movs	r1, #128	; 0x80
 800227a:	0049      	lsls	r1, r1, #1
 800227c:	430a      	orrs	r2, r1
 800227e:	601a      	str	r2, [r3, #0]

	  LL_mDelay(20000);//delay=20ms
 8002280:	4b25      	ldr	r3, [pc, #148]	; (8002318 <lcdinit4+0x160>)
 8002282:	0018      	movs	r0, r3
 8002284:	f001 fa64 	bl	8003750 <LL_mDelay>

     Ecrire(0x30);
 8002288:	2030      	movs	r0, #48	; 0x30
 800228a:	f7ff fe85 	bl	8001f98 <Ecrire>
     toggle_e();
 800228e:	f7ff fee7 	bl	8002060 <toggle_e>
     LL_mDelay(5000);//delay=5ms
 8002292:	4b22      	ldr	r3, [pc, #136]	; (800231c <lcdinit4+0x164>)
 8002294:	0018      	movs	r0, r3
 8002296:	f001 fa5b 	bl	8003750 <LL_mDelay>

	Ecrire(0x30);
 800229a:	2030      	movs	r0, #48	; 0x30
 800229c:	f7ff fe7c 	bl	8001f98 <Ecrire>
     toggle_e();
 80022a0:	f7ff fede 	bl	8002060 <toggle_e>
     LL_mDelay(200);//delay=200us
 80022a4:	20c8      	movs	r0, #200	; 0xc8
 80022a6:	f001 fa53 	bl	8003750 <LL_mDelay>

     Ecrire(0x30);
 80022aa:	2030      	movs	r0, #48	; 0x30
 80022ac:	f7ff fe74 	bl	8001f98 <Ecrire>
     toggle_e();
 80022b0:	f7ff fed6 	bl	8002060 <toggle_e>
     LL_mDelay(200);//delay=200us
 80022b4:	20c8      	movs	r0, #200	; 0xc8
 80022b6:	f001 fa4b 	bl	8003750 <LL_mDelay>

	Ecrire(0x20);
 80022ba:	2020      	movs	r0, #32
 80022bc:	f7ff fe6c 	bl	8001f98 <Ecrire>
     toggle_e();
 80022c0:	f7ff fece 	bl	8002060 <toggle_e>
     LL_mDelay(200);//delay=200us
 80022c4:	20c8      	movs	r0, #200	; 0xc8
 80022c6:	f001 fa43 	bl	8003750 <LL_mDelay>



	//SET FUNCTION: choix du mode de fonctionnement
	EcrireFonction(0x28);
 80022ca:	2028      	movs	r0, #40	; 0x28
 80022cc:	f7ff fef0 	bl	80020b0 <EcrireFonction>

	//DISPLAY OFF
	EcrireFonction(0x8);
 80022d0:	2008      	movs	r0, #8
 80022d2:	f7ff feed 	bl	80020b0 <EcrireFonction>

	//DISPLAY CLEAR
	EcrireFonction(1);
 80022d6:	2001      	movs	r0, #1
 80022d8:	f7ff feea 	bl	80020b0 <EcrireFonction>
	LL_mDelay(1600);//delay=1.6ms
 80022dc:	23c8      	movs	r3, #200	; 0xc8
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	0018      	movs	r0, r3
 80022e2:	f001 fa35 	bl	8003750 <LL_mDelay>


	//ENTRY MODE SET
	EcrireFonction(0x6);
 80022e6:	2006      	movs	r0, #6
 80022e8:	f7ff fee2 	bl	80020b0 <EcrireFonction>

	//DISPLAY ON

	EcrireFonction(0xC);
 80022ec:	200c      	movs	r0, #12
 80022ee:	f7ff fedf 	bl	80020b0 <EcrireFonction>


}
 80022f2:	46c0      	nop			; (mov r8, r8)
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	000f4240 	.word	0x000f4240
 80022fc:	ffffcfff 	.word	0xffffcfff
 8002300:	ffff3fff 	.word	0xffff3fff
 8002304:	fffcffff 	.word	0xfffcffff
 8002308:	fff3ffff 	.word	0xfff3ffff
 800230c:	50000400 	.word	0x50000400
 8002310:	fffff3ff 	.word	0xfffff3ff
 8002314:	fffffcff 	.word	0xfffffcff
 8002318:	00004e20 	.word	0x00004e20
 800231c:	00001388 	.word	0x00001388

08002320 <Affichage_LCD>:

void Affichage_LCD(char * ligne1, char *ligne2){
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]

	/*effacer l'affichage*/
	// LCD <- 01, display clear
	EcrireFonction(0x80);
 800232a:	2080      	movs	r0, #128	; 0x80
 800232c:	f7ff fec0 	bl	80020b0 <EcrireFonction>
	EcrireFonction(1);
 8002330:	2001      	movs	r0, #1
 8002332:	f7ff febd 	bl	80020b0 <EcrireFonction>
	LL_mDelay(1600);//delay=1.6ms
 8002336:	23c8      	movs	r3, #200	; 0xc8
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	0018      	movs	r0, r3
 800233c:	f001 fa08 	bl	8003750 <LL_mDelay>

	/**ecriture sur la premiere ligne**/
	/*positionner le curseur avec la fonction SET DD RAM ADDRESS */
	EcrireFonction(0x80);
 8002340:	2080      	movs	r0, #128	; 0x80
 8002342:	f7ff feb5 	bl	80020b0 <EcrireFonction>
	EcrireChaine(ligne1);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	0018      	movs	r0, r3
 800234a:	f7ff ff19 	bl	8002180 <EcrireChaine>

	/**ecriture sur la deuxieme ligne**/
	/*positionner le curseur avec la fonction SET DD RAM ADDRESS*/ 
    EcrireFonction(0xC0);
 800234e:	20c0      	movs	r0, #192	; 0xc0
 8002350:	f7ff feae 	bl	80020b0 <EcrireFonction>
	EcrireChaine(ligne2);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	0018      	movs	r0, r3
 8002358:	f7ff ff12 	bl	8002180 <EcrireChaine>
}
 800235c:	46c0      	nop			; (mov r8, r8)
 800235e:	46bd      	mov	sp, r7
 8002360:	b002      	add	sp, #8
 8002362:	bd80      	pop	{r7, pc}

08002364 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	4a04      	ldr	r2, [pc, #16]	; (8002384 <LL_ADC_Enable+0x20>)
 8002372:	4013      	ands	r3, r2
 8002374:	2201      	movs	r2, #1
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800237c:	46c0      	nop			; (mov r8, r8)
 800237e:	46bd      	mov	sp, r7
 8002380:	b002      	add	sp, #8
 8002382:	bd80      	pop	{r7, pc}
 8002384:	7fffffe8 	.word	0x7fffffe8

08002388 <LL_ADC_StartCalibration>:
  * @rmtoll CR       ADCAL          LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	4a05      	ldr	r2, [pc, #20]	; (80023ac <LL_ADC_StartCalibration+0x24>)
 8002396:	4013      	ands	r3, r2
 8002398:	2280      	movs	r2, #128	; 0x80
 800239a:	0612      	lsls	r2, r2, #24
 800239c:	431a      	orrs	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL);
}
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	46bd      	mov	sp, r7
 80023a6:	b002      	add	sp, #8
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	7fffffe8 	.word	0x7fffffe8

080023b0 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	0fdb      	lsrs	r3, r3, #31
 80023be:	07db      	lsls	r3, r3, #31
 80023c0:	2280      	movs	r2, #128	; 0x80
 80023c2:	0612      	lsls	r2, r2, #24
 80023c4:	4694      	mov	ip, r2
 80023c6:	4463      	add	r3, ip
 80023c8:	425a      	negs	r2, r3
 80023ca:	4153      	adcs	r3, r2
 80023cc:	b2db      	uxtb	r3, r3
}
 80023ce:	0018      	movs	r0, r3
 80023d0:	46bd      	mov	sp, r7
 80023d2:	b002      	add	sp, #8
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	4a04      	ldr	r2, [pc, #16]	; (80023f8 <LL_ADC_REG_StartConversion+0x20>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	2204      	movs	r2, #4
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80023f0:	46c0      	nop			; (mov r8, r8)
 80023f2:	46bd      	mov	sp, r7
 80023f4:	b002      	add	sp, #8
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	7fffffe8 	.word	0x7fffffe8

080023fc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	2204      	movs	r2, #4
 800240a:	4013      	ands	r3, r2
 800240c:	3b04      	subs	r3, #4
 800240e:	425a      	negs	r2, r3
 8002410:	4153      	adcs	r3, r2
 8002412:	b2db      	uxtb	r3, r3
}
 8002414:	0018      	movs	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	b002      	add	sp, #8
 800241a:	bd80      	pop	{r7, pc}

0800241c <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       DATA           LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	b29b      	uxth	r3, r3
}
 800242a:	0018      	movs	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	b002      	add	sp, #8
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002438:	4b04      	ldr	r3, [pc, #16]	; (800244c <LL_RCC_HSI_Enable+0x18>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	4b03      	ldr	r3, [pc, #12]	; (800244c <LL_RCC_HSI_Enable+0x18>)
 800243e:	2101      	movs	r1, #1
 8002440:	430a      	orrs	r2, r1
 8002442:	601a      	str	r2, [r3, #0]
}
 8002444:	46c0      	nop			; (mov r8, r8)
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	40021000 	.word	0x40021000

08002450 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8002454:	4b05      	ldr	r3, [pc, #20]	; (800246c <LL_RCC_HSI_IsReady+0x1c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2204      	movs	r2, #4
 800245a:	4013      	ands	r3, r2
 800245c:	2b04      	cmp	r3, #4
 800245e:	d101      	bne.n	8002464 <LL_RCC_HSI_IsReady+0x14>
 8002460:	2301      	movs	r3, #1
 8002462:	e000      	b.n	8002466 <LL_RCC_HSI_IsReady+0x16>
 8002464:	2300      	movs	r3, #0
}
 8002466:	0018      	movs	r0, r3
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40021000 	.word	0x40021000

08002470 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	4a06      	ldr	r2, [pc, #24]	; (8002498 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800247e:	4013      	ands	r3, r2
 8002480:	0019      	movs	r1, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	021a      	lsls	r2, r3, #8
 8002486:	4b03      	ldr	r3, [pc, #12]	; (8002494 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8002488:	430a      	orrs	r2, r1
 800248a:	605a      	str	r2, [r3, #4]
}
 800248c:	46c0      	nop			; (mov r8, r8)
 800248e:	46bd      	mov	sp, r7
 8002490:	b002      	add	sp, #8
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40021000 	.word	0x40021000
 8002498:	ffffe0ff 	.word	0xffffe0ff

0800249c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80024a4:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <LL_RCC_SetSysClkSource+0x24>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	2203      	movs	r2, #3
 80024aa:	4393      	bics	r3, r2
 80024ac:	0019      	movs	r1, r3
 80024ae:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <LL_RCC_SetSysClkSource+0x24>)
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	60da      	str	r2, [r3, #12]
}
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	46bd      	mov	sp, r7
 80024ba:	b002      	add	sp, #8
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	46c0      	nop			; (mov r8, r8)
 80024c0:	40021000 	.word	0x40021000

080024c4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80024c8:	4b03      	ldr	r3, [pc, #12]	; (80024d8 <LL_RCC_GetSysClkSource+0x14>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	220c      	movs	r2, #12
 80024ce:	4013      	ands	r3, r2
}
 80024d0:	0018      	movs	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	46c0      	nop			; (mov r8, r8)
 80024d8:	40021000 	.word	0x40021000

080024dc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80024e4:	4b06      	ldr	r3, [pc, #24]	; (8002500 <LL_RCC_SetAHBPrescaler+0x24>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	22f0      	movs	r2, #240	; 0xf0
 80024ea:	4393      	bics	r3, r2
 80024ec:	0019      	movs	r1, r3
 80024ee:	4b04      	ldr	r3, [pc, #16]	; (8002500 <LL_RCC_SetAHBPrescaler+0x24>)
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	60da      	str	r2, [r3, #12]
}
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	46bd      	mov	sp, r7
 80024fa:	b002      	add	sp, #8
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	40021000 	.word	0x40021000

08002504 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800250c:	4b06      	ldr	r3, [pc, #24]	; (8002528 <LL_RCC_SetAPB1Prescaler+0x24>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	4a06      	ldr	r2, [pc, #24]	; (800252c <LL_RCC_SetAPB1Prescaler+0x28>)
 8002512:	4013      	ands	r3, r2
 8002514:	0019      	movs	r1, r3
 8002516:	4b04      	ldr	r3, [pc, #16]	; (8002528 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	430a      	orrs	r2, r1
 800251c:	60da      	str	r2, [r3, #12]
}
 800251e:	46c0      	nop			; (mov r8, r8)
 8002520:	46bd      	mov	sp, r7
 8002522:	b002      	add	sp, #8
 8002524:	bd80      	pop	{r7, pc}
 8002526:	46c0      	nop			; (mov r8, r8)
 8002528:	40021000 	.word	0x40021000
 800252c:	fffff8ff 	.word	0xfffff8ff

08002530 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <LL_RCC_SetAPB2Prescaler+0x24>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	4a06      	ldr	r2, [pc, #24]	; (8002558 <LL_RCC_SetAPB2Prescaler+0x28>)
 800253e:	4013      	ands	r3, r2
 8002540:	0019      	movs	r1, r3
 8002542:	4b04      	ldr	r3, [pc, #16]	; (8002554 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	430a      	orrs	r2, r1
 8002548:	60da      	str	r2, [r3, #12]
}
 800254a:	46c0      	nop			; (mov r8, r8)
 800254c:	46bd      	mov	sp, r7
 800254e:	b002      	add	sp, #8
 8002550:	bd80      	pop	{r7, pc}
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	40021000 	.word	0x40021000
 8002558:	ffffc7ff 	.word	0xffffc7ff

0800255c <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8002564:	4b08      	ldr	r3, [pc, #32]	; (8002588 <LL_RCC_SetUSARTClockSource+0x2c>)
 8002566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	0c12      	lsrs	r2, r2, #16
 800256c:	43d2      	mvns	r2, r2
 800256e:	401a      	ands	r2, r3
 8002570:	0011      	movs	r1, r2
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	041b      	lsls	r3, r3, #16
 8002576:	0c1a      	lsrs	r2, r3, #16
 8002578:	4b03      	ldr	r3, [pc, #12]	; (8002588 <LL_RCC_SetUSARTClockSource+0x2c>)
 800257a:	430a      	orrs	r2, r1
 800257c:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	46bd      	mov	sp, r7
 8002582:	b002      	add	sp, #8
 8002584:	bd80      	pop	{r7, pc}
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	40021000 	.word	0x40021000

0800258c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8002594:	4b07      	ldr	r3, [pc, #28]	; (80025b4 <LL_APB1_GRP1_EnableClock+0x28>)
 8002596:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002598:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <LL_APB1_GRP1_EnableClock+0x28>)
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	430a      	orrs	r2, r1
 800259e:	639a      	str	r2, [r3, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80025a0:	4b04      	ldr	r3, [pc, #16]	; (80025b4 <LL_APB1_GRP1_EnableClock+0x28>)
 80025a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	4013      	ands	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025aa:	68fb      	ldr	r3, [r7, #12]
}
 80025ac:	46c0      	nop			; (mov r8, r8)
 80025ae:	46bd      	mov	sp, r7
 80025b0:	b004      	add	sp, #16
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40021000 	.word	0x40021000

080025b8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80025c0:	4b07      	ldr	r3, [pc, #28]	; (80025e0 <LL_APB2_GRP1_EnableClock+0x28>)
 80025c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025c4:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <LL_APB2_GRP1_EnableClock+0x28>)
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80025cc:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <LL_APB2_GRP1_EnableClock+0x28>)
 80025ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	4013      	ands	r3, r2
 80025d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025d6:	68fb      	ldr	r3, [r7, #12]
}
 80025d8:	46c0      	nop			; (mov r8, r8)
 80025da:	46bd      	mov	sp, r7
 80025dc:	b004      	add	sp, #16
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40021000 	.word	0x40021000

080025e4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80025ec:	4b06      	ldr	r3, [pc, #24]	; (8002608 <LL_FLASH_SetLatency+0x24>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2201      	movs	r2, #1
 80025f2:	4393      	bics	r3, r2
 80025f4:	0019      	movs	r1, r3
 80025f6:	4b04      	ldr	r3, [pc, #16]	; (8002608 <LL_FLASH_SetLatency+0x24>)
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	601a      	str	r2, [r3, #0]
}
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	46bd      	mov	sp, r7
 8002602:	b002      	add	sp, #8
 8002604:	bd80      	pop	{r7, pc}
 8002606:	46c0      	nop			; (mov r8, r8)
 8002608:	40022000 	.word	0x40022000

0800260c <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002610:	4b03      	ldr	r3, [pc, #12]	; (8002620 <LL_FLASH_GetLatency+0x14>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2201      	movs	r2, #1
 8002616:	4013      	ands	r3, r2
}
 8002618:	0018      	movs	r0, r3
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	40022000 	.word	0x40022000

08002624 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 800262c:	4b06      	ldr	r3, [pc, #24]	; (8002648 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a06      	ldr	r2, [pc, #24]	; (800264c <LL_PWR_SetRegulVoltageScaling+0x28>)
 8002632:	4013      	ands	r3, r2
 8002634:	0019      	movs	r1, r3
 8002636:	4b04      	ldr	r3, [pc, #16]	; (8002648 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	430a      	orrs	r2, r1
 800263c:	601a      	str	r2, [r3, #0]
}
 800263e:	46c0      	nop			; (mov r8, r8)
 8002640:	46bd      	mov	sp, r7
 8002642:	b002      	add	sp, #8
 8002644:	bd80      	pop	{r7, pc}
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	40007000 	.word	0x40007000
 800264c:	ffffe7ff 	.word	0xffffe7ff

08002650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002650:	b5b0      	push	{r4, r5, r7, lr}
 8002652:	b09a      	sub	sp, #104	; 0x68
 8002654:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8002656:	2001      	movs	r0, #1
 8002658:	f7ff ffae 	bl	80025b8 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800265c:	2380      	movs	r3, #128	; 0x80
 800265e:	055b      	lsls	r3, r3, #21
 8002660:	0018      	movs	r0, r3
 8002662:	f7ff ff93 	bl	800258c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002666:	f000 f983 	bl	8002970 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  //activation de l'horloge pour GPIOA et GPIOB
  RCC->IOPENR |= RCC_IOPENR_GPIOAEN | RCC_IOPENR_GPIOBEN;
 800266a:	4bb6      	ldr	r3, [pc, #728]	; (8002944 <main+0x2f4>)
 800266c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800266e:	4bb5      	ldr	r3, [pc, #724]	; (8002944 <main+0x2f4>)
 8002670:	2103      	movs	r1, #3
 8002672:	430a      	orrs	r2, r1
 8002674:	62da      	str	r2, [r3, #44]	; 0x2c
  /*Ici la fonction LL_mDelay sera utilisée pour faire des temps d'attente en us Pour cette raison on initialise le nombre de ticks nécessaire pour faire 1ms à 16000 au lieu de 16000000
  */
  LL_Init1msTick(16000);
 8002676:	23fa      	movs	r3, #250	; 0xfa
 8002678:	019b      	lsls	r3, r3, #6
 800267a:	0018      	movs	r0, r3
 800267c:	f001 f858 	bl	8003730 <LL_Init1msTick>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002680:	f7ff fc26 	bl	8001ed0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002684:	f000 fa1e 	bl	8002ac4 <MX_USART2_UART_Init>
  MX_ADC_Init();
 8002688:	f7ff fafc 	bl	8001c84 <MX_ADC_Init>

  /* USER CODE BEGIN 2 */

  //Initialisation du LCD
  lcdinit4(); //call lcdinit4
 800268c:	f7ff fd94 	bl	80021b8 <lcdinit4>
  LL_ADC_StartCalibration(ADC1);
 8002690:	4bad      	ldr	r3, [pc, #692]	; (8002948 <main+0x2f8>)
 8002692:	0018      	movs	r0, r3
 8002694:	f7ff fe78 	bl	8002388 <LL_ADC_StartCalibration>
  while(LL_ADC_IsCalibrationOnGoing(ADC1) != 0);
 8002698:	46c0      	nop			; (mov r8, r8)
 800269a:	4bab      	ldr	r3, [pc, #684]	; (8002948 <main+0x2f8>)
 800269c:	0018      	movs	r0, r3
 800269e:	f7ff fe87 	bl	80023b0 <LL_ADC_IsCalibrationOnGoing>
 80026a2:	1e03      	subs	r3, r0, #0
 80026a4:	d1f9      	bne.n	800269a <main+0x4a>


  /* USER CODE END 2 */
  float voltage=0;
 80026a6:	2300      	movs	r3, #0
 80026a8:	667b      	str	r3, [r7, #100]	; 0x64
  int Lumens=0,Resistance=0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	663b      	str	r3, [r7, #96]	; 0x60
 80026ae:	2300      	movs	r3, #0
 80026b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint16_t adc_value=0;
 80026b2:	235a      	movs	r3, #90	; 0x5a
 80026b4:	18fb      	adds	r3, r7, r3
 80026b6:	2200      	movs	r2, #0
 80026b8:	801a      	strh	r2, [r3, #0]
  int resistor_value=220;
 80026ba:	23dc      	movs	r3, #220	; 0xdc
 80026bc:	657b      	str	r3, [r7, #84]	; 0x54

  int tmpV=0,m=0,c=0,d=0,u=0;
 80026be:	2300      	movs	r3, #0
 80026c0:	653b      	str	r3, [r7, #80]	; 0x50
 80026c2:	2300      	movs	r3, #0
 80026c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026c6:	2300      	movs	r3, #0
 80026c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80026ca:	2300      	movs	r3, #0
 80026cc:	647b      	str	r3, [r7, #68]	; 0x44
 80026ce:	2300      	movs	r3, #0
 80026d0:	643b      	str	r3, [r7, #64]	; 0x40
  int tmpL=0,M100=0,M10=0,M=0,C=0,D=0,U=0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026d6:	2300      	movs	r3, #0
 80026d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80026da:	2300      	movs	r3, #0
 80026dc:	637b      	str	r3, [r7, #52]	; 0x34
 80026de:	2300      	movs	r3, #0
 80026e0:	633b      	str	r3, [r7, #48]	; 0x30
 80026e2:	2300      	movs	r3, #0
 80026e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026e6:	2300      	movs	r3, #0
 80026e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80026ea:	2300      	movs	r3, #0
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24

  char Text_LCD1[16] = "Voltage u.dcm V ";
 80026ee:	2314      	movs	r3, #20
 80026f0:	18fb      	adds	r3, r7, r3
 80026f2:	4a96      	ldr	r2, [pc, #600]	; (800294c <main+0x2fc>)
 80026f4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80026f6:	c313      	stmia	r3!, {r0, r1, r4}
 80026f8:	6812      	ldr	r2, [r2, #0]
 80026fa:	601a      	str	r2, [r3, #0]
  //char Text_LCD2[16] = "Lumens MMMCDU lm";
  char Text_LCD2[16] = "Res MMMCDU ohm  ";
 80026fc:	1d3b      	adds	r3, r7, #4
 80026fe:	4a94      	ldr	r2, [pc, #592]	; (8002950 <main+0x300>)
 8002700:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002702:	c313      	stmia	r3!, {r0, r1, r4}
 8002704:	6812      	ldr	r2, [r2, #0]
 8002706:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	    LL_ADC_Enable(ADC1);
 8002708:	4b8f      	ldr	r3, [pc, #572]	; (8002948 <main+0x2f8>)
 800270a:	0018      	movs	r0, r3
 800270c:	f7ff fe2a 	bl	8002364 <LL_ADC_Enable>
		LL_ADC_REG_StartConversion(ADC1);
 8002710:	4b8d      	ldr	r3, [pc, #564]	; (8002948 <main+0x2f8>)
 8002712:	0018      	movs	r0, r3
 8002714:	f7ff fe60 	bl	80023d8 <LL_ADC_REG_StartConversion>
		while(LL_ADC_REG_IsConversionOngoing(ADC1) != 0);
 8002718:	46c0      	nop			; (mov r8, r8)
 800271a:	4b8b      	ldr	r3, [pc, #556]	; (8002948 <main+0x2f8>)
 800271c:	0018      	movs	r0, r3
 800271e:	f7ff fe6d 	bl	80023fc <LL_ADC_REG_IsConversionOngoing>
 8002722:	1e03      	subs	r3, r0, #0
 8002724:	d1f9      	bne.n	800271a <main+0xca>

		adc_value=LL_ADC_REG_ReadConversionData12(ADC1);
 8002726:	255a      	movs	r5, #90	; 0x5a
 8002728:	197c      	adds	r4, r7, r5
 800272a:	4b87      	ldr	r3, [pc, #540]	; (8002948 <main+0x2f8>)
 800272c:	0018      	movs	r0, r3
 800272e:	f7ff fe75 	bl	800241c <LL_ADC_REG_ReadConversionData12>
 8002732:	0003      	movs	r3, r0
 8002734:	8023      	strh	r3, [r4, #0]

		voltage=adc_value*5.0/4095.0;
 8002736:	197b      	adds	r3, r7, r5
 8002738:	881b      	ldrh	r3, [r3, #0]
 800273a:	0018      	movs	r0, r3
 800273c:	f7ff f8ca 	bl	80018d4 <__aeabi_i2d>
 8002740:	2200      	movs	r2, #0
 8002742:	4b84      	ldr	r3, [pc, #528]	; (8002954 <main+0x304>)
 8002744:	f7fe fa92 	bl	8000c6c <__aeabi_dmul>
 8002748:	0002      	movs	r2, r0
 800274a:	000b      	movs	r3, r1
 800274c:	0010      	movs	r0, r2
 800274e:	0019      	movs	r1, r3
 8002750:	2200      	movs	r2, #0
 8002752:	4b81      	ldr	r3, [pc, #516]	; (8002958 <main+0x308>)
 8002754:	f7fd ff94 	bl	8000680 <__aeabi_ddiv>
 8002758:	0002      	movs	r2, r0
 800275a:	000b      	movs	r3, r1
 800275c:	0010      	movs	r0, r2
 800275e:	0019      	movs	r1, r3
 8002760:	f7ff f930 	bl	80019c4 <__aeabi_d2f>
 8002764:	1c03      	adds	r3, r0, #0
 8002766:	667b      	str	r3, [r7, #100]	; 0x64

		Resistance=resistor_value * ((5.0/voltage) - 1.0); //10k * ( (Vin/Vout) -1)
 8002768:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800276a:	f7ff f8b3 	bl	80018d4 <__aeabi_i2d>
 800276e:	0004      	movs	r4, r0
 8002770:	000d      	movs	r5, r1
 8002772:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002774:	f7ff f8de 	bl	8001934 <__aeabi_f2d>
 8002778:	0002      	movs	r2, r0
 800277a:	000b      	movs	r3, r1
 800277c:	2000      	movs	r0, #0
 800277e:	4975      	ldr	r1, [pc, #468]	; (8002954 <main+0x304>)
 8002780:	f7fd ff7e 	bl	8000680 <__aeabi_ddiv>
 8002784:	0002      	movs	r2, r0
 8002786:	000b      	movs	r3, r1
 8002788:	0010      	movs	r0, r2
 800278a:	0019      	movs	r1, r3
 800278c:	2200      	movs	r2, #0
 800278e:	4b73      	ldr	r3, [pc, #460]	; (800295c <main+0x30c>)
 8002790:	f7fe fcd8 	bl	8001144 <__aeabi_dsub>
 8002794:	0002      	movs	r2, r0
 8002796:	000b      	movs	r3, r1
 8002798:	0020      	movs	r0, r4
 800279a:	0029      	movs	r1, r5
 800279c:	f7fe fa66 	bl	8000c6c <__aeabi_dmul>
 80027a0:	0002      	movs	r2, r0
 80027a2:	000b      	movs	r3, r1
 80027a4:	0010      	movs	r0, r2
 80027a6:	0019      	movs	r1, r3
 80027a8:	f7ff f85e 	bl	8001868 <__aeabi_d2iz>
 80027ac:	0003      	movs	r3, r0
 80027ae:	65fb      	str	r3, [r7, #92]	; 0x5c

		Lumens=Resistance;
 80027b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027b2:	663b      	str	r3, [r7, #96]	; 0x60


		tmpV=voltage*1000;
 80027b4:	496a      	ldr	r1, [pc, #424]	; (8002960 <main+0x310>)
 80027b6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80027b8:	f7fd fe1c 	bl	80003f4 <__aeabi_fmul>
 80027bc:	1c03      	adds	r3, r0, #0
 80027be:	1c18      	adds	r0, r3, #0
 80027c0:	f7fd ff3e 	bl	8000640 <__aeabi_f2iz>
 80027c4:	0003      	movs	r3, r0
 80027c6:	653b      	str	r3, [r7, #80]	; 0x50
		u=tmpV/1000; //Unite
 80027c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ca:	22fa      	movs	r2, #250	; 0xfa
 80027cc:	0091      	lsls	r1, r2, #2
 80027ce:	0018      	movs	r0, r3
 80027d0:	f7fd fd24 	bl	800021c <__divsi3>
 80027d4:	0003      	movs	r3, r0
 80027d6:	643b      	str	r3, [r7, #64]	; 0x40
		tmpV=tmpV%1000;
 80027d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027da:	22fa      	movs	r2, #250	; 0xfa
 80027dc:	0091      	lsls	r1, r2, #2
 80027de:	0018      	movs	r0, r3
 80027e0:	f7fd fe02 	bl	80003e8 <__aeabi_idivmod>
 80027e4:	000b      	movs	r3, r1
 80027e6:	653b      	str	r3, [r7, #80]	; 0x50
		d=tmpV/100; //Dixieme
 80027e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ea:	2164      	movs	r1, #100	; 0x64
 80027ec:	0018      	movs	r0, r3
 80027ee:	f7fd fd15 	bl	800021c <__divsi3>
 80027f2:	0003      	movs	r3, r0
 80027f4:	647b      	str	r3, [r7, #68]	; 0x44
		tmpV=tmpV%100;
 80027f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027f8:	2164      	movs	r1, #100	; 0x64
 80027fa:	0018      	movs	r0, r3
 80027fc:	f7fd fdf4 	bl	80003e8 <__aeabi_idivmod>
 8002800:	000b      	movs	r3, r1
 8002802:	653b      	str	r3, [r7, #80]	; 0x50
		c=tmpV/10; //Centieme
 8002804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002806:	210a      	movs	r1, #10
 8002808:	0018      	movs	r0, r3
 800280a:	f7fd fd07 	bl	800021c <__divsi3>
 800280e:	0003      	movs	r3, r0
 8002810:	64bb      	str	r3, [r7, #72]	; 0x48
		m=tmpV%10; //Milieme
 8002812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002814:	210a      	movs	r1, #10
 8002816:	0018      	movs	r0, r3
 8002818:	f7fd fde6 	bl	80003e8 <__aeabi_idivmod>
 800281c:	000b      	movs	r3, r1
 800281e:	64fb      	str	r3, [r7, #76]	; 0x4c


		Text_LCD1[8] = u+48;
 8002820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002822:	b2db      	uxtb	r3, r3
 8002824:	3330      	adds	r3, #48	; 0x30
 8002826:	b2da      	uxtb	r2, r3
 8002828:	2414      	movs	r4, #20
 800282a:	193b      	adds	r3, r7, r4
 800282c:	721a      	strb	r2, [r3, #8]
		Text_LCD1[10] = d+48;
 800282e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002830:	b2db      	uxtb	r3, r3
 8002832:	3330      	adds	r3, #48	; 0x30
 8002834:	b2da      	uxtb	r2, r3
 8002836:	193b      	adds	r3, r7, r4
 8002838:	729a      	strb	r2, [r3, #10]
		Text_LCD1[11] = c+48;
 800283a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800283c:	b2db      	uxtb	r3, r3
 800283e:	3330      	adds	r3, #48	; 0x30
 8002840:	b2da      	uxtb	r2, r3
 8002842:	193b      	adds	r3, r7, r4
 8002844:	72da      	strb	r2, [r3, #11]
		Text_LCD1[12] = m+48;
 8002846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002848:	b2db      	uxtb	r3, r3
 800284a:	3330      	adds	r3, #48	; 0x30
 800284c:	b2da      	uxtb	r2, r3
 800284e:	193b      	adds	r3, r7, r4
 8002850:	731a      	strb	r2, [r3, #12]

		tmpL=Lumens;
 8002852:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002854:	63fb      	str	r3, [r7, #60]	; 0x3c
		M10=tmpL/100000; //10^5
 8002856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002858:	4942      	ldr	r1, [pc, #264]	; (8002964 <main+0x314>)
 800285a:	0018      	movs	r0, r3
 800285c:	f7fd fcde 	bl	800021c <__divsi3>
 8002860:	0003      	movs	r3, r0
 8002862:	637b      	str	r3, [r7, #52]	; 0x34
		tmpL=tmpL%100000;
 8002864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002866:	493f      	ldr	r1, [pc, #252]	; (8002964 <main+0x314>)
 8002868:	0018      	movs	r0, r3
 800286a:	f7fd fdbd 	bl	80003e8 <__aeabi_idivmod>
 800286e:	000b      	movs	r3, r1
 8002870:	63fb      	str	r3, [r7, #60]	; 0x3c
		M10=tmpL/10000; //10^4
 8002872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002874:	493c      	ldr	r1, [pc, #240]	; (8002968 <main+0x318>)
 8002876:	0018      	movs	r0, r3
 8002878:	f7fd fcd0 	bl	800021c <__divsi3>
 800287c:	0003      	movs	r3, r0
 800287e:	637b      	str	r3, [r7, #52]	; 0x34
		tmpL=tmpL%10000;
 8002880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002882:	4939      	ldr	r1, [pc, #228]	; (8002968 <main+0x318>)
 8002884:	0018      	movs	r0, r3
 8002886:	f7fd fdaf 	bl	80003e8 <__aeabi_idivmod>
 800288a:	000b      	movs	r3, r1
 800288c:	63fb      	str	r3, [r7, #60]	; 0x3c
		M=tmpL/1000; //10^3
 800288e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002890:	22fa      	movs	r2, #250	; 0xfa
 8002892:	0091      	lsls	r1, r2, #2
 8002894:	0018      	movs	r0, r3
 8002896:	f7fd fcc1 	bl	800021c <__divsi3>
 800289a:	0003      	movs	r3, r0
 800289c:	633b      	str	r3, [r7, #48]	; 0x30
		tmpL=tmpL%1000;
 800289e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028a0:	22fa      	movs	r2, #250	; 0xfa
 80028a2:	0091      	lsls	r1, r2, #2
 80028a4:	0018      	movs	r0, r3
 80028a6:	f7fd fd9f 	bl	80003e8 <__aeabi_idivmod>
 80028aa:	000b      	movs	r3, r1
 80028ac:	63fb      	str	r3, [r7, #60]	; 0x3c
		C=tmpL/100; //10^2
 80028ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028b0:	2164      	movs	r1, #100	; 0x64
 80028b2:	0018      	movs	r0, r3
 80028b4:	f7fd fcb2 	bl	800021c <__divsi3>
 80028b8:	0003      	movs	r3, r0
 80028ba:	62fb      	str	r3, [r7, #44]	; 0x2c
		tmpL=tmpL%100;
 80028bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028be:	2164      	movs	r1, #100	; 0x64
 80028c0:	0018      	movs	r0, r3
 80028c2:	f7fd fd91 	bl	80003e8 <__aeabi_idivmod>
 80028c6:	000b      	movs	r3, r1
 80028c8:	63fb      	str	r3, [r7, #60]	; 0x3c
		D=tmpL/10; //10^1
 80028ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028cc:	210a      	movs	r1, #10
 80028ce:	0018      	movs	r0, r3
 80028d0:	f7fd fca4 	bl	800021c <__divsi3>
 80028d4:	0003      	movs	r3, r0
 80028d6:	62bb      	str	r3, [r7, #40]	; 0x28
		U=tmpL%10; //10^0
 80028d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028da:	210a      	movs	r1, #10
 80028dc:	0018      	movs	r0, r3
 80028de:	f7fd fd83 	bl	80003e8 <__aeabi_idivmod>
 80028e2:	000b      	movs	r3, r1
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
//		Text_LCD2[9] = M+48;
//		Text_LCD2[10] = C+48;
//		Text_LCD2[11] = D+48;
//		Text_LCD2[12] = U+48;

		Text_LCD2[4] = M100+48;
 80028e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	3330      	adds	r3, #48	; 0x30
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	1d3b      	adds	r3, r7, #4
 80028f0:	711a      	strb	r2, [r3, #4]
		Text_LCD2[5] = M10+48;
 80028f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	3330      	adds	r3, #48	; 0x30
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	1d3b      	adds	r3, r7, #4
 80028fc:	715a      	strb	r2, [r3, #5]
		Text_LCD2[6] = M+48;
 80028fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002900:	b2db      	uxtb	r3, r3
 8002902:	3330      	adds	r3, #48	; 0x30
 8002904:	b2da      	uxtb	r2, r3
 8002906:	1d3b      	adds	r3, r7, #4
 8002908:	719a      	strb	r2, [r3, #6]
		Text_LCD2[7] = C+48;
 800290a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290c:	b2db      	uxtb	r3, r3
 800290e:	3330      	adds	r3, #48	; 0x30
 8002910:	b2da      	uxtb	r2, r3
 8002912:	1d3b      	adds	r3, r7, #4
 8002914:	71da      	strb	r2, [r3, #7]
		Text_LCD2[8] = D+48;
 8002916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002918:	b2db      	uxtb	r3, r3
 800291a:	3330      	adds	r3, #48	; 0x30
 800291c:	b2da      	uxtb	r2, r3
 800291e:	1d3b      	adds	r3, r7, #4
 8002920:	721a      	strb	r2, [r3, #8]
		Text_LCD2[9] = U+48;
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	b2db      	uxtb	r3, r3
 8002926:	3330      	adds	r3, #48	; 0x30
 8002928:	b2da      	uxtb	r2, r3
 800292a:	1d3b      	adds	r3, r7, #4
 800292c:	725a      	strb	r2, [r3, #9]

		//Affichage sur le LCD
		Affichage_LCD(Text_LCD1, Text_LCD2); //call Affichage_LCD
 800292e:	1d3a      	adds	r2, r7, #4
 8002930:	193b      	adds	r3, r7, r4
 8002932:	0011      	movs	r1, r2
 8002934:	0018      	movs	r0, r3
 8002936:	f7ff fcf3 	bl	8002320 <Affichage_LCD>

		LL_mDelay(330000);
 800293a:	4b0c      	ldr	r3, [pc, #48]	; (800296c <main+0x31c>)
 800293c:	0018      	movs	r0, r3
 800293e:	f000 ff07 	bl	8003750 <LL_mDelay>
  {
 8002942:	e6e1      	b.n	8002708 <main+0xb8>
 8002944:	40021000 	.word	0x40021000
 8002948:	40012400 	.word	0x40012400
 800294c:	08003820 	.word	0x08003820
 8002950:	08003830 	.word	0x08003830
 8002954:	40140000 	.word	0x40140000
 8002958:	40affe00 	.word	0x40affe00
 800295c:	3ff00000 	.word	0x3ff00000
 8002960:	447a0000 	.word	0x447a0000
 8002964:	000186a0 	.word	0x000186a0
 8002968:	00002710 	.word	0x00002710
 800296c:	00050910 	.word	0x00050910

08002970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8002974:	2000      	movs	r0, #0
 8002976:	f7ff fe35 	bl	80025e4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 800297a:	46c0      	nop			; (mov r8, r8)
 800297c:	f7ff fe46 	bl	800260c <LL_FLASH_GetLatency>
 8002980:	1e03      	subs	r3, r0, #0
 8002982:	d1fb      	bne.n	800297c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8002984:	2380      	movs	r3, #128	; 0x80
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	0018      	movs	r0, r3
 800298a:	f7ff fe4b 	bl	8002624 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 800298e:	f7ff fd51 	bl	8002434 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8002992:	46c0      	nop			; (mov r8, r8)
 8002994:	f7ff fd5c 	bl	8002450 <LL_RCC_HSI_IsReady>
 8002998:	0003      	movs	r3, r0
 800299a:	2b01      	cmp	r3, #1
 800299c:	d1fa      	bne.n	8002994 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800299e:	2010      	movs	r0, #16
 80029a0:	f7ff fd66 	bl	8002470 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80029a4:	2000      	movs	r0, #0
 80029a6:	f7ff fd99 	bl	80024dc <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80029aa:	2000      	movs	r0, #0
 80029ac:	f7ff fdaa 	bl	8002504 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80029b0:	2000      	movs	r0, #0
 80029b2:	f7ff fdbd 	bl	8002530 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80029b6:	2001      	movs	r0, #1
 80029b8:	f7ff fd70 	bl	800249c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80029bc:	46c0      	nop			; (mov r8, r8)
 80029be:	f7ff fd81 	bl	80024c4 <LL_RCC_GetSysClkSource>
 80029c2:	0003      	movs	r3, r0
 80029c4:	2b04      	cmp	r3, #4
 80029c6:	d1fa      	bne.n	80029be <SystemClock_Config+0x4e>
  {

  }

  LL_Init1msTick(16000000);
 80029c8:	4b07      	ldr	r3, [pc, #28]	; (80029e8 <SystemClock_Config+0x78>)
 80029ca:	0018      	movs	r0, r3
 80029cc:	f000 feb0 	bl	8003730 <LL_Init1msTick>

  LL_SetSystemCoreClock(16000000);
 80029d0:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <SystemClock_Config+0x78>)
 80029d2:	0018      	movs	r0, r3
 80029d4:	f000 fede 	bl	8003794 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 80029d8:	23c0      	movs	r3, #192	; 0xc0
 80029da:	031b      	lsls	r3, r3, #12
 80029dc:	0018      	movs	r0, r3
 80029de:	f7ff fdbd 	bl	800255c <LL_RCC_SetUSARTClockSource>
}
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	00f42400 	.word	0x00f42400

080029ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029f0:	e7fe      	b.n	80029f0 <NMI_Handler+0x4>

080029f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029f6:	e7fe      	b.n	80029f6 <HardFault_Handler+0x4>

080029f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80029fc:	46c0      	nop			; (mov r8, r8)
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a06:	46c0      	nop			; (mov r8, r8)
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a10:	46c0      	nop			; (mov r8, r8)
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <LL_APB1_GRP1_EnableClock>:
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002a28:	4b07      	ldr	r3, [pc, #28]	; (8002a48 <LL_APB1_GRP1_EnableClock+0x28>)
 8002a2a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002a2c:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <LL_APB1_GRP1_EnableClock+0x28>)
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	430a      	orrs	r2, r1
 8002a32:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002a34:	4b04      	ldr	r3, [pc, #16]	; (8002a48 <LL_APB1_GRP1_EnableClock+0x28>)
 8002a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
}
 8002a40:	46c0      	nop			; (mov r8, r8)
 8002a42:	46bd      	mov	sp, r7
 8002a44:	b004      	add	sp, #16
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40021000 	.word	0x40021000

08002a4c <LL_IOP_GRP1_EnableClock>:
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8002a54:	4b07      	ldr	r3, [pc, #28]	; (8002a74 <LL_IOP_GRP1_EnableClock+0x28>)
 8002a56:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a58:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <LL_IOP_GRP1_EnableClock+0x28>)
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8002a60:	4b04      	ldr	r3, [pc, #16]	; (8002a74 <LL_IOP_GRP1_EnableClock+0x28>)
 8002a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	4013      	ands	r3, r2
 8002a68:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
}
 8002a6c:	46c0      	nop			; (mov r8, r8)
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	b004      	add	sp, #16
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40021000 	.word	0x40021000

08002a78 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2201      	movs	r2, #1
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	601a      	str	r2, [r3, #0]
}
 8002a8c:	46c0      	nop			; (mov r8, r8)
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	b002      	add	sp, #8
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	4a07      	ldr	r2, [pc, #28]	; (8002ac0 <LL_USART_ConfigAsyncMode+0x2c>)
 8002aa2:	401a      	ands	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	222a      	movs	r2, #42	; 0x2a
 8002aae:	4393      	bics	r3, r2
 8002ab0:	001a      	movs	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	609a      	str	r2, [r3, #8]
}
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	b002      	add	sp, #8
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	ffffb7ff 	.word	0xffffb7ff

08002ac4 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ac4:	b590      	push	{r4, r7, lr}
 8002ac6:	b08f      	sub	sp, #60	; 0x3c
 8002ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002aca:	241c      	movs	r4, #28
 8002acc:	193b      	adds	r3, r7, r4
 8002ace:	0018      	movs	r0, r3
 8002ad0:	231c      	movs	r3, #28
 8002ad2:	001a      	movs	r2, r3
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	f000 fe8f 	bl	80037f8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ada:	1d3b      	adds	r3, r7, #4
 8002adc:	0018      	movs	r0, r3
 8002ade:	2318      	movs	r3, #24
 8002ae0:	001a      	movs	r2, r3
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	f000 fe88 	bl	80037f8 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002ae8:	2380      	movs	r3, #128	; 0x80
 8002aea:	029b      	lsls	r3, r3, #10
 8002aec:	0018      	movs	r0, r3
 8002aee:	f7ff ff97 	bl	8002a20 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8002af2:	2001      	movs	r0, #1
 8002af4:	f7ff ffaa 	bl	8002a4c <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin;
 8002af8:	1d3b      	adds	r3, r7, #4
 8002afa:	2204      	movs	r2, #4
 8002afc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002afe:	1d3b      	adds	r3, r7, #4
 8002b00:	2202      	movs	r2, #2
 8002b02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002b04:	1d3b      	adds	r3, r7, #4
 8002b06:	2203      	movs	r2, #3
 8002b08:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002b0a:	1d3b      	adds	r3, r7, #4
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002b10:	1d3b      	adds	r3, r7, #4
 8002b12:	2200      	movs	r2, #0
 8002b14:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8002b16:	1d3b      	adds	r3, r7, #4
 8002b18:	2204      	movs	r2, #4
 8002b1a:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8002b1c:	1d3a      	adds	r2, r7, #4
 8002b1e:	23a0      	movs	r3, #160	; 0xa0
 8002b20:	05db      	lsls	r3, r3, #23
 8002b22:	0011      	movs	r1, r2
 8002b24:	0018      	movs	r0, r3
 8002b26:	f000 fab1 	bl	800308c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = USART_RX_Pin;
 8002b2a:	1d3b      	adds	r3, r7, #4
 8002b2c:	2208      	movs	r2, #8
 8002b2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002b30:	1d3b      	adds	r3, r7, #4
 8002b32:	2202      	movs	r2, #2
 8002b34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002b36:	1d3b      	adds	r3, r7, #4
 8002b38:	2203      	movs	r2, #3
 8002b3a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002b3c:	1d3b      	adds	r3, r7, #4
 8002b3e:	2200      	movs	r2, #0
 8002b40:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002b42:	1d3b      	adds	r3, r7, #4
 8002b44:	2200      	movs	r2, #0
 8002b46:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8002b48:	1d3b      	adds	r3, r7, #4
 8002b4a:	2204      	movs	r2, #4
 8002b4c:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8002b4e:	1d3a      	adds	r2, r7, #4
 8002b50:	23a0      	movs	r3, #160	; 0xa0
 8002b52:	05db      	lsls	r3, r3, #23
 8002b54:	0011      	movs	r1, r2
 8002b56:	0018      	movs	r0, r3
 8002b58:	f000 fa98 	bl	800308c <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002b5c:	193b      	adds	r3, r7, r4
 8002b5e:	22e1      	movs	r2, #225	; 0xe1
 8002b60:	0252      	lsls	r2, r2, #9
 8002b62:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002b64:	0021      	movs	r1, r4
 8002b66:	187b      	adds	r3, r7, r1
 8002b68:	2200      	movs	r2, #0
 8002b6a:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002b6c:	187b      	adds	r3, r7, r1
 8002b6e:	2200      	movs	r2, #0
 8002b70:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002b72:	187b      	adds	r3, r7, r1
 8002b74:	2200      	movs	r2, #0
 8002b76:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002b78:	187b      	adds	r3, r7, r1
 8002b7a:	220c      	movs	r2, #12
 8002b7c:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002b7e:	187b      	adds	r3, r7, r1
 8002b80:	2200      	movs	r2, #0
 8002b82:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002b84:	187b      	adds	r3, r7, r1
 8002b86:	2200      	movs	r2, #0
 8002b88:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART2, &USART_InitStruct);
 8002b8a:	187b      	adds	r3, r7, r1
 8002b8c:	4a08      	ldr	r2, [pc, #32]	; (8002bb0 <MX_USART2_UART_Init+0xec>)
 8002b8e:	0019      	movs	r1, r3
 8002b90:	0010      	movs	r0, r2
 8002b92:	f000 fd4f 	bl	8003634 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8002b96:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <MX_USART2_UART_Init+0xec>)
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f7ff ff7b 	bl	8002a94 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8002b9e:	4b04      	ldr	r3, [pc, #16]	; (8002bb0 <MX_USART2_UART_Init+0xec>)
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	f7ff ff69 	bl	8002a78 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ba6:	46c0      	nop			; (mov r8, r8)
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	b00f      	add	sp, #60	; 0x3c
 8002bac:	bd90      	pop	{r4, r7, pc}
 8002bae:	46c0      	nop			; (mov r8, r8)
 8002bb0:	40004400 	.word	0x40004400

08002bb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8002bb4:	480d      	ldr	r0, [pc, #52]	; (8002bec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002bb6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bb8:	480d      	ldr	r0, [pc, #52]	; (8002bf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002bba:	490e      	ldr	r1, [pc, #56]	; (8002bf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002bbc:	4a0e      	ldr	r2, [pc, #56]	; (8002bf8 <LoopForever+0xe>)
  movs r3, #0
 8002bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bc0:	e002      	b.n	8002bc8 <LoopCopyDataInit>

08002bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bc6:	3304      	adds	r3, #4

08002bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bcc:	d3f9      	bcc.n	8002bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bce:	4a0b      	ldr	r2, [pc, #44]	; (8002bfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002bd0:	4c0b      	ldr	r4, [pc, #44]	; (8002c00 <LoopForever+0x16>)
  movs r3, #0
 8002bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bd4:	e001      	b.n	8002bda <LoopFillZerobss>

08002bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bd8:	3204      	adds	r2, #4

08002bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bdc:	d3fb      	bcc.n	8002bd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002bde:	f7ff ff1a 	bl	8002a16 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002be2:	f000 fde5 	bl	80037b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002be6:	f7ff fd33 	bl	8002650 <main>

08002bea <LoopForever>:

LoopForever:
    b LoopForever
 8002bea:	e7fe      	b.n	8002bea <LoopForever>
  ldr   r0, =_estack
 8002bec:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bf4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8002bf8:	0800392c 	.word	0x0800392c
  ldr r2, =_sbss
 8002bfc:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8002c00:	20000020 	.word	0x20000020

08002c04 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c04:	e7fe      	b.n	8002c04 <ADC1_COMP_IRQHandler>

08002c06 <LL_ADC_IsEnabled>:
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b082      	sub	sp, #8
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	2201      	movs	r2, #1
 8002c14:	4013      	ands	r3, r2
 8002c16:	3b01      	subs	r3, #1
 8002c18:	425a      	negs	r2, r3
 8002c1a:	4153      	adcs	r3, r2
 8002c1c:	b2db      	uxtb	r3, r3
}
 8002c1e:	0018      	movs	r0, r3
 8002c20:	46bd      	mov	sp, r7
 8002c22:	b002      	add	sp, #8
 8002c24:	bd80      	pop	{r7, pc}
	...

08002c28 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002c32:	230f      	movs	r3, #15
 8002c34:	18fb      	adds	r3, r7, r3
 8002c36:	2200      	movs	r2, #0
 8002c38:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f7ff ffe2 	bl	8002c06 <LL_ADC_IsEnabled>
 8002c42:	1e03      	subs	r3, r0, #0
 8002c44:	d118      	bne.n	8002c78 <LL_ADC_Init+0x50>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	4a11      	ldr	r2, [pc, #68]	; (8002c90 <LL_ADC_Init+0x68>)
 8002c4c:	401a      	ands	r2, r3
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	6859      	ldr	r1, [r3, #4]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	4319      	orrs	r1, r3
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	430b      	orrs	r3, r1
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	60da      	str	r2, [r3, #12]
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );
    
    MODIFY_REG(ADCx->CFGR2,
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	089a      	lsrs	r2, r3, #2
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	431a      	orrs	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	611a      	str	r2, [r3, #16]
 8002c76:	e003      	b.n	8002c80 <LL_ADC_Init+0x58>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002c78:	230f      	movs	r3, #15
 8002c7a:	18fb      	adds	r3, r7, r3
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8002c80:	230f      	movs	r3, #15
 8002c82:	18fb      	adds	r3, r7, r3
 8002c84:	781b      	ldrb	r3, [r3, #0]
}
 8002c86:	0018      	movs	r0, r3
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	b004      	add	sp, #16
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	ffff3fc7 	.word	0xffff3fc7

08002c94 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002c9e:	230f      	movs	r3, #15
 8002ca0:	18fb      	adds	r3, r7, r3
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	701a      	strb	r2, [r3, #0]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	0018      	movs	r0, r3
 8002caa:	f7ff ffac 	bl	8002c06 <LL_ADC_IsEnabled>
 8002cae:	1e03      	subs	r3, r0, #0
 8002cb0:	d115      	bne.n	8002cde <LL_ADC_REG_Init+0x4a>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    MODIFY_REG(ADCx->CFGR1,
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	4a0f      	ldr	r2, [pc, #60]	; (8002cf4 <LL_ADC_REG_Init+0x60>)
 8002cb8:	401a      	ands	r2, r3
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	6819      	ldr	r1, [r3, #0]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	4319      	orrs	r1, r3
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	4319      	orrs	r1, r3
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	4319      	orrs	r1, r3
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	430b      	orrs	r3, r1
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	60da      	str	r2, [r3, #12]
 8002cdc:	e003      	b.n	8002ce6 <LL_ADC_REG_Init+0x52>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002cde:	230f      	movs	r3, #15
 8002ce0:	18fb      	adds	r3, r7, r3
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8002ce6:	230f      	movs	r3, #15
 8002ce8:	18fb      	adds	r3, r7, r3
 8002cea:	781b      	ldrb	r3, [r3, #0]
}
 8002cec:	0018      	movs	r0, r3
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	b004      	add	sp, #16
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	fffec23c 	.word	0xfffec23c

08002cf8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002d00:	4b04      	ldr	r3, [pc, #16]	; (8002d14 <LL_EXTI_EnableIT_0_31+0x1c>)
 8002d02:	6819      	ldr	r1, [r3, #0]
 8002d04:	4b03      	ldr	r3, [pc, #12]	; (8002d14 <LL_EXTI_EnableIT_0_31+0x1c>)
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	601a      	str	r2, [r3, #0]
}
 8002d0c:	46c0      	nop			; (mov r8, r8)
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	b002      	add	sp, #8
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40010400 	.word	0x40010400

08002d18 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002d20:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <LL_EXTI_DisableIT_0_31+0x20>)
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	43d9      	mvns	r1, r3
 8002d28:	4b03      	ldr	r3, [pc, #12]	; (8002d38 <LL_EXTI_DisableIT_0_31+0x20>)
 8002d2a:	400a      	ands	r2, r1
 8002d2c:	601a      	str	r2, [r3, #0]
}
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	46bd      	mov	sp, r7
 8002d32:	b002      	add	sp, #8
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	46c0      	nop			; (mov r8, r8)
 8002d38:	40010400 	.word	0x40010400

08002d3c <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002d44:	4b04      	ldr	r3, [pc, #16]	; (8002d58 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8002d46:	6859      	ldr	r1, [r3, #4]
 8002d48:	4b03      	ldr	r3, [pc, #12]	; (8002d58 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	605a      	str	r2, [r3, #4]

}
 8002d50:	46c0      	nop			; (mov r8, r8)
 8002d52:	46bd      	mov	sp, r7
 8002d54:	b002      	add	sp, #8
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40010400 	.word	0x40010400

08002d5c <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002d64:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <LL_EXTI_DisableEvent_0_31+0x20>)
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	43d9      	mvns	r1, r3
 8002d6c:	4b03      	ldr	r3, [pc, #12]	; (8002d7c <LL_EXTI_DisableEvent_0_31+0x20>)
 8002d6e:	400a      	ands	r2, r1
 8002d70:	605a      	str	r2, [r3, #4]
}
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	46bd      	mov	sp, r7
 8002d76:	b002      	add	sp, #8
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	40010400 	.word	0x40010400

08002d80 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002d88:	4b04      	ldr	r3, [pc, #16]	; (8002d9c <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8002d8a:	6899      	ldr	r1, [r3, #8]
 8002d8c:	4b03      	ldr	r3, [pc, #12]	; (8002d9c <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	609a      	str	r2, [r3, #8]

}
 8002d94:	46c0      	nop			; (mov r8, r8)
 8002d96:	46bd      	mov	sp, r7
 8002d98:	b002      	add	sp, #8
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40010400 	.word	0x40010400

08002da0 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002da8:	4b05      	ldr	r3, [pc, #20]	; (8002dc0 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	43d9      	mvns	r1, r3
 8002db0:	4b03      	ldr	r3, [pc, #12]	; (8002dc0 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002db2:	400a      	ands	r2, r1
 8002db4:	609a      	str	r2, [r3, #8]

}
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	46bd      	mov	sp, r7
 8002dba:	b002      	add	sp, #8
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	46c0      	nop			; (mov r8, r8)
 8002dc0:	40010400 	.word	0x40010400

08002dc4 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002dcc:	4b04      	ldr	r3, [pc, #16]	; (8002de0 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002dce:	68d9      	ldr	r1, [r3, #12]
 8002dd0:	4b03      	ldr	r3, [pc, #12]	; (8002de0 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	60da      	str	r2, [r3, #12]
}
 8002dd8:	46c0      	nop			; (mov r8, r8)
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	b002      	add	sp, #8
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40010400 	.word	0x40010400

08002de4 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002dec:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002dee:	68da      	ldr	r2, [r3, #12]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	43d9      	mvns	r1, r3
 8002df4:	4b03      	ldr	r3, [pc, #12]	; (8002e04 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002df6:	400a      	ands	r2, r1
 8002df8:	60da      	str	r2, [r3, #12]
}
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	b002      	add	sp, #8
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	40010400 	.word	0x40010400

08002e08 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002e10:	230f      	movs	r3, #15
 8002e12:	18fb      	adds	r3, r7, r3
 8002e14:	2200      	movs	r2, #0
 8002e16:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	791b      	ldrb	r3, [r3, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d100      	bne.n	8002e22 <LL_EXTI_Init+0x1a>
 8002e20:	e068      	b.n	8002ef4 <LL_EXTI_Init+0xec>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d100      	bne.n	8002e2c <LL_EXTI_Init+0x24>
 8002e2a:	e06e      	b.n	8002f0a <LL_EXTI_Init+0x102>
    {
      switch (EXTI_InitStruct->Mode)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	795b      	ldrb	r3, [r3, #5]
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d01b      	beq.n	8002e6c <LL_EXTI_Init+0x64>
 8002e34:	dc25      	bgt.n	8002e82 <LL_EXTI_Init+0x7a>
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d002      	beq.n	8002e40 <LL_EXTI_Init+0x38>
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d00b      	beq.n	8002e56 <LL_EXTI_Init+0x4e>
 8002e3e:	e020      	b.n	8002e82 <LL_EXTI_Init+0x7a>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	0018      	movs	r0, r3
 8002e46:	f7ff ff89 	bl	8002d5c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	0018      	movs	r0, r3
 8002e50:	f7ff ff52 	bl	8002cf8 <LL_EXTI_EnableIT_0_31>
          break;
 8002e54:	e01a      	b.n	8002e8c <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f7ff ff5c 	bl	8002d18 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	0018      	movs	r0, r3
 8002e66:	f7ff ff69 	bl	8002d3c <LL_EXTI_EnableEvent_0_31>
          break;
 8002e6a:	e00f      	b.n	8002e8c <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	0018      	movs	r0, r3
 8002e72:	f7ff ff41 	bl	8002cf8 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f7ff ff5e 	bl	8002d3c <LL_EXTI_EnableEvent_0_31>
          break;
 8002e80:	e004      	b.n	8002e8c <LL_EXTI_Init+0x84>
        default:
          status = ERROR;
 8002e82:	230f      	movs	r3, #15
 8002e84:	18fb      	adds	r3, r7, r3
 8002e86:	2201      	movs	r2, #1
 8002e88:	701a      	strb	r2, [r3, #0]
          break;
 8002e8a:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	799b      	ldrb	r3, [r3, #6]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d03a      	beq.n	8002f0a <LL_EXTI_Init+0x102>
      {
        switch (EXTI_InitStruct->Trigger)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	799b      	ldrb	r3, [r3, #6]
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d01b      	beq.n	8002ed4 <LL_EXTI_Init+0xcc>
 8002e9c:	dc25      	bgt.n	8002eea <LL_EXTI_Init+0xe2>
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d002      	beq.n	8002ea8 <LL_EXTI_Init+0xa0>
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d00b      	beq.n	8002ebe <LL_EXTI_Init+0xb6>
 8002ea6:	e020      	b.n	8002eea <LL_EXTI_Init+0xe2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	0018      	movs	r0, r3
 8002eae:	f7ff ff99 	bl	8002de4 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	f7ff ff62 	bl	8002d80 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002ebc:	e026      	b.n	8002f0c <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f7ff ff6c 	bl	8002da0 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	0018      	movs	r0, r3
 8002ece:	f7ff ff79 	bl	8002dc4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002ed2:	e01b      	b.n	8002f0c <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	0018      	movs	r0, r3
 8002eda:	f7ff ff51 	bl	8002d80 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	f7ff ff6e 	bl	8002dc4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002ee8:	e010      	b.n	8002f0c <LL_EXTI_Init+0x104>
          default:
            status = ERROR;
 8002eea:	230f      	movs	r3, #15
 8002eec:	18fb      	adds	r3, r7, r3
 8002eee:	2201      	movs	r2, #1
 8002ef0:	701a      	strb	r2, [r3, #0]
            break;
 8002ef2:	e00b      	b.n	8002f0c <LL_EXTI_Init+0x104>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	0018      	movs	r0, r3
 8002efa:	f7ff ff0d 	bl	8002d18 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	0018      	movs	r0, r3
 8002f04:	f7ff ff2a 	bl	8002d5c <LL_EXTI_DisableEvent_0_31>
 8002f08:	e000      	b.n	8002f0c <LL_EXTI_Init+0x104>
      }
 8002f0a:	46c0      	nop			; (mov r8, r8)
  }
  return status;
 8002f0c:	230f      	movs	r3, #15
 8002f0e:	18fb      	adds	r3, r7, r3
 8002f10:	781b      	ldrb	r3, [r3, #0]
}
 8002f12:	0018      	movs	r0, r3
 8002f14:	46bd      	mov	sp, r7
 8002f16:	b004      	add	sp, #16
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <LL_GPIO_SetPinMode>:
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b084      	sub	sp, #16
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	60f8      	str	r0, [r7, #12]
 8002f22:	60b9      	str	r1, [r7, #8]
 8002f24:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6819      	ldr	r1, [r3, #0]
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	435b      	muls	r3, r3
 8002f2e:	001a      	movs	r2, r3
 8002f30:	0013      	movs	r3, r2
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	189b      	adds	r3, r3, r2
 8002f36:	43db      	mvns	r3, r3
 8002f38:	400b      	ands	r3, r1
 8002f3a:	001a      	movs	r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	435b      	muls	r3, r3
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	434b      	muls	r3, r1
 8002f44:	431a      	orrs	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	601a      	str	r2, [r3, #0]
}
 8002f4a:	46c0      	nop			; (mov r8, r8)
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	b004      	add	sp, #16
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <LL_GPIO_SetPinOutputType>:
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b084      	sub	sp, #16
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	60f8      	str	r0, [r7, #12]
 8002f5a:	60b9      	str	r1, [r7, #8]
 8002f5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	43d2      	mvns	r2, r2
 8002f66:	401a      	ands	r2, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	434b      	muls	r3, r1
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	605a      	str	r2, [r3, #4]
}
 8002f74:	46c0      	nop			; (mov r8, r8)
 8002f76:	46bd      	mov	sp, r7
 8002f78:	b004      	add	sp, #16
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <LL_GPIO_SetPinSpeed>:
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6899      	ldr	r1, [r3, #8]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	435b      	muls	r3, r3
 8002f90:	001a      	movs	r2, r3
 8002f92:	0013      	movs	r3, r2
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	189b      	adds	r3, r3, r2
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	400b      	ands	r3, r1
 8002f9c:	001a      	movs	r2, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	435b      	muls	r3, r3
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	434b      	muls	r3, r1
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	609a      	str	r2, [r3, #8]
}
 8002fac:	46c0      	nop			; (mov r8, r8)
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	b004      	add	sp, #16
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <LL_GPIO_SetPinPull>:
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	68d9      	ldr	r1, [r3, #12]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	435b      	muls	r3, r3
 8002fc8:	001a      	movs	r2, r3
 8002fca:	0013      	movs	r3, r2
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	189b      	adds	r3, r3, r2
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	400b      	ands	r3, r1
 8002fd4:	001a      	movs	r2, r3
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	435b      	muls	r3, r3
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	434b      	muls	r3, r1
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	60da      	str	r2, [r3, #12]
}
 8002fe4:	46c0      	nop			; (mov r8, r8)
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	b004      	add	sp, #16
 8002fea:	bd80      	pop	{r7, pc}

08002fec <LL_GPIO_SetAFPin_0_7>:
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6a19      	ldr	r1, [r3, #32]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	435b      	muls	r3, r3
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	4353      	muls	r3, r2
 8003004:	68ba      	ldr	r2, [r7, #8]
 8003006:	435a      	muls	r2, r3
 8003008:	0013      	movs	r3, r2
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	1a9b      	subs	r3, r3, r2
 800300e:	43db      	mvns	r3, r3
 8003010:	400b      	ands	r3, r1
 8003012:	001a      	movs	r2, r3
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	435b      	muls	r3, r3
 8003018:	68b9      	ldr	r1, [r7, #8]
 800301a:	434b      	muls	r3, r1
 800301c:	68b9      	ldr	r1, [r7, #8]
 800301e:	434b      	muls	r3, r1
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	434b      	muls	r3, r1
 8003024:	431a      	orrs	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	621a      	str	r2, [r3, #32]
}
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	46bd      	mov	sp, r7
 800302e:	b004      	add	sp, #16
 8003030:	bd80      	pop	{r7, pc}

08003032 <LL_GPIO_SetAFPin_8_15>:
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b084      	sub	sp, #16
 8003036:	af00      	add	r7, sp, #0
 8003038:	60f8      	str	r0, [r7, #12]
 800303a:	60b9      	str	r1, [r7, #8]
 800303c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	0a1b      	lsrs	r3, r3, #8
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	0a12      	lsrs	r2, r2, #8
 800304a:	4353      	muls	r3, r2
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	0a12      	lsrs	r2, r2, #8
 8003050:	4353      	muls	r3, r2
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	0a12      	lsrs	r2, r2, #8
 8003056:	435a      	muls	r2, r3
 8003058:	0013      	movs	r3, r2
 800305a:	011b      	lsls	r3, r3, #4
 800305c:	1a9b      	subs	r3, r3, r2
 800305e:	43db      	mvns	r3, r3
 8003060:	400b      	ands	r3, r1
 8003062:	001a      	movs	r2, r3
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	0a1b      	lsrs	r3, r3, #8
 8003068:	68b9      	ldr	r1, [r7, #8]
 800306a:	0a09      	lsrs	r1, r1, #8
 800306c:	434b      	muls	r3, r1
 800306e:	68b9      	ldr	r1, [r7, #8]
 8003070:	0a09      	lsrs	r1, r1, #8
 8003072:	434b      	muls	r3, r1
 8003074:	68b9      	ldr	r1, [r7, #8]
 8003076:	0a09      	lsrs	r1, r1, #8
 8003078:	434b      	muls	r3, r1
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	434b      	muls	r3, r1
 800307e:	431a      	orrs	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003084:	46c0      	nop			; (mov r8, r8)
 8003086:	46bd      	mov	sp, r7
 8003088:	b004      	add	sp, #16
 800308a:	bd80      	pop	{r7, pc}

0800308c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003096:	2300      	movs	r3, #0
 8003098:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 800309a:	2300      	movs	r3, #0
 800309c:	60bb      	str	r3, [r7, #8]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800309e:	e048      	b.n	8003132 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2101      	movs	r1, #1
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	4091      	lsls	r1, r2
 80030aa:	000a      	movs	r2, r1
 80030ac:	4013      	ands	r3, r2
 80030ae:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d03a      	beq.n	800312c <LL_GPIO_Init+0xa0>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d003      	beq.n	80030c6 <LL_GPIO_Init+0x3a>
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d10e      	bne.n	80030e4 <LL_GPIO_Init+0x58>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	68b9      	ldr	r1, [r7, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	0018      	movs	r0, r3
 80030d0:	f7ff ff54 	bl	8002f7c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	6819      	ldr	r1, [r3, #0]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	0018      	movs	r0, r3
 80030e0:	f7ff ff37 	bl	8002f52 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	691a      	ldr	r2, [r3, #16]
 80030e8:	68b9      	ldr	r1, [r7, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	0018      	movs	r0, r3
 80030ee:	f7ff ff61 	bl	8002fb4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d111      	bne.n	800311e <LL_GPIO_Init+0x92>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2bff      	cmp	r3, #255	; 0xff
 80030fe:	d807      	bhi.n	8003110 <LL_GPIO_Init+0x84>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	695a      	ldr	r2, [r3, #20]
 8003104:	68b9      	ldr	r1, [r7, #8]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	0018      	movs	r0, r3
 800310a:	f7ff ff6f 	bl	8002fec <LL_GPIO_SetAFPin_0_7>
 800310e:	e006      	b.n	800311e <LL_GPIO_Init+0x92>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	695a      	ldr	r2, [r3, #20]
 8003114:	68b9      	ldr	r1, [r7, #8]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	0018      	movs	r0, r3
 800311a:	f7ff ff8a 	bl	8003032 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	68b9      	ldr	r1, [r7, #8]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	0018      	movs	r0, r3
 8003128:	f7ff fef7 	bl	8002f1a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	3301      	adds	r3, #1
 8003130:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	40da      	lsrs	r2, r3
 800313a:	1e13      	subs	r3, r2, #0
 800313c:	d1b0      	bne.n	80030a0 <LL_GPIO_Init+0x14>
  }


  return (SUCCESS);
 800313e:	2300      	movs	r3, #0
}
 8003140:	0018      	movs	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	b004      	add	sp, #16
 8003146:	bd80      	pop	{r7, pc}

08003148 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800314c:	4b05      	ldr	r3, [pc, #20]	; (8003164 <LL_RCC_HSI_IsReady+0x1c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2204      	movs	r2, #4
 8003152:	4013      	ands	r3, r2
 8003154:	2b04      	cmp	r3, #4
 8003156:	d101      	bne.n	800315c <LL_RCC_HSI_IsReady+0x14>
 8003158:	2301      	movs	r3, #1
 800315a:	e000      	b.n	800315e <LL_RCC_HSI_IsReady+0x16>
 800315c:	2300      	movs	r3, #0
}
 800315e:	0018      	movs	r0, r3
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	40021000 	.word	0x40021000

08003168 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll CSR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 800316c:	4b07      	ldr	r3, [pc, #28]	; (800318c <LL_RCC_LSE_IsReady+0x24>)
 800316e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003170:	2380      	movs	r3, #128	; 0x80
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	401a      	ands	r2, r3
 8003176:	2380      	movs	r3, #128	; 0x80
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	429a      	cmp	r2, r3
 800317c:	d101      	bne.n	8003182 <LL_RCC_LSE_IsReady+0x1a>
 800317e:	2301      	movs	r3, #1
 8003180:	e000      	b.n	8003184 <LL_RCC_LSE_IsReady+0x1c>
 8003182:	2300      	movs	r3, #0
}
 8003184:	0018      	movs	r0, r3
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	40021000 	.word	0x40021000

08003190 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_4
  *         @arg @ref LL_RCC_MSIRANGE_5
  *         @arg @ref LL_RCC_MSIRANGE_6
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 8003194:	4b03      	ldr	r3, [pc, #12]	; (80031a4 <LL_RCC_MSI_GetRange+0x14>)
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	23e0      	movs	r3, #224	; 0xe0
 800319a:	021b      	lsls	r3, r3, #8
 800319c:	4013      	ands	r3, r2
}
 800319e:	0018      	movs	r0, r3
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40021000 	.word	0x40021000

080031a8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80031ac:	4b03      	ldr	r3, [pc, #12]	; (80031bc <LL_RCC_GetSysClkSource+0x14>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	220c      	movs	r2, #12
 80031b2:	4013      	ands	r3, r2
}
 80031b4:	0018      	movs	r0, r3
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	40021000 	.word	0x40021000

080031c0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80031c4:	4b03      	ldr	r3, [pc, #12]	; (80031d4 <LL_RCC_GetAHBPrescaler+0x14>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	22f0      	movs	r2, #240	; 0xf0
 80031ca:	4013      	ands	r3, r2
}
 80031cc:	0018      	movs	r0, r3
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	40021000 	.word	0x40021000

080031d8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80031dc:	4b03      	ldr	r3, [pc, #12]	; (80031ec <LL_RCC_GetAPB1Prescaler+0x14>)
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	23e0      	movs	r3, #224	; 0xe0
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	4013      	ands	r3, r2
}
 80031e6:	0018      	movs	r0, r3
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40021000 	.word	0x40021000

080031f0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80031f4:	4b03      	ldr	r3, [pc, #12]	; (8003204 <LL_RCC_GetAPB2Prescaler+0x14>)
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	23e0      	movs	r3, #224	; 0xe0
 80031fa:	019b      	lsls	r3, r3, #6
 80031fc:	4013      	ands	r3, r2
}
 80031fe:	0018      	movs	r0, r3
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	40021000 	.word	0x40021000

08003208 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART2_CLKSOURCE_LSE
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8003210:	4b05      	ldr	r3, [pc, #20]	; (8003228 <LL_RCC_GetUSARTClockSource+0x20>)
 8003212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	401a      	ands	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	041b      	lsls	r3, r3, #16
 800321c:	4313      	orrs	r3, r2
}
 800321e:	0018      	movs	r0, r3
 8003220:	46bd      	mov	sp, r7
 8003222:	b002      	add	sp, #8
 8003224:	bd80      	pop	{r7, pc}
 8003226:	46c0      	nop			; (mov r8, r8)
 8003228:	40021000 	.word	0x40021000

0800322c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8003230:	4b03      	ldr	r3, [pc, #12]	; (8003240 <LL_RCC_PLL_GetMainSource+0x14>)
 8003232:	68da      	ldr	r2, [r3, #12]
 8003234:	2380      	movs	r3, #128	; 0x80
 8003236:	025b      	lsls	r3, r3, #9
 8003238:	4013      	ands	r3, r2
}
 800323a:	0018      	movs	r0, r3
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40021000 	.word	0x40021000

08003244 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_24
  *         @arg @ref LL_RCC_PLL_MUL_32
  *         @arg @ref LL_RCC_PLL_MUL_48
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8003248:	4b03      	ldr	r3, [pc, #12]	; (8003258 <LL_RCC_PLL_GetMultiplicator+0x14>)
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	23f0      	movs	r3, #240	; 0xf0
 800324e:	039b      	lsls	r3, r3, #14
 8003250:	4013      	ands	r3, r2
}
 8003252:	0018      	movs	r0, r3
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40021000 	.word	0x40021000

0800325c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLL_DIV_2
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 8003260:	4b03      	ldr	r3, [pc, #12]	; (8003270 <LL_RCC_PLL_GetDivider+0x14>)
 8003262:	68da      	ldr	r2, [r3, #12]
 8003264:	23c0      	movs	r3, #192	; 0xc0
 8003266:	041b      	lsls	r3, r3, #16
 8003268:	4013      	ands	r3, r2
}
 800326a:	0018      	movs	r0, r3
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40021000 	.word	0x40021000

08003274 <LL_RCC_IsActiveFlag_HSIDIV>:
  * @brief  Check if HSI Divider is enabled (it divides by 4)
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8003278:	4b05      	ldr	r3, [pc, #20]	; (8003290 <LL_RCC_IsActiveFlag_HSIDIV+0x1c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2210      	movs	r2, #16
 800327e:	4013      	ands	r3, r2
 8003280:	2b10      	cmp	r3, #16
 8003282:	d101      	bne.n	8003288 <LL_RCC_IsActiveFlag_HSIDIV+0x14>
 8003284:	2301      	movs	r3, #1
 8003286:	e000      	b.n	800328a <LL_RCC_IsActiveFlag_HSIDIV+0x16>
 8003288:	2300      	movs	r3, #0
}
 800328a:	0018      	movs	r0, r3
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40021000 	.word	0x40021000

08003294 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800329c:	2300      	movs	r3, #0
 800329e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CCIPR_USART1SEL)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b03      	cmp	r3, #3
 80032a4:	d139      	bne.n	800331a <LL_RCC_GetUSARTClockFreq+0x86>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	0018      	movs	r0, r3
 80032aa:	f7ff ffad 	bl	8003208 <LL_RCC_GetUSARTClockSource>
 80032ae:	0003      	movs	r3, r0
 80032b0:	4a40      	ldr	r2, [pc, #256]	; (80033b4 <LL_RCC_GetUSARTClockFreq+0x120>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d01c      	beq.n	80032f0 <LL_RCC_GetUSARTClockFreq+0x5c>
 80032b6:	4a3f      	ldr	r2, [pc, #252]	; (80033b4 <LL_RCC_GetUSARTClockFreq+0x120>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d821      	bhi.n	8003300 <LL_RCC_GetUSARTClockFreq+0x6c>
 80032bc:	4a3e      	ldr	r2, [pc, #248]	; (80033b8 <LL_RCC_GetUSARTClockFreq+0x124>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d003      	beq.n	80032ca <LL_RCC_GetUSARTClockFreq+0x36>
 80032c2:	4a3e      	ldr	r2, [pc, #248]	; (80033bc <LL_RCC_GetUSARTClockFreq+0x128>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d005      	beq.n	80032d4 <LL_RCC_GetUSARTClockFreq+0x40>
 80032c8:	e01a      	b.n	8003300 <LL_RCC_GetUSARTClockFreq+0x6c>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80032ca:	f000 f883 	bl	80033d4 <RCC_GetSystemClockFreq>
 80032ce:	0003      	movs	r3, r0
 80032d0:	60fb      	str	r3, [r7, #12]
        break;
 80032d2:	e027      	b.n	8003324 <LL_RCC_GetUSARTClockFreq+0x90>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80032d4:	f7ff ff38 	bl	8003148 <LL_RCC_HSI_IsReady>
 80032d8:	1e03      	subs	r3, r0, #0
 80032da:	d020      	beq.n	800331e <LL_RCC_GetUSARTClockFreq+0x8a>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 80032dc:	f7ff ffca 	bl	8003274 <LL_RCC_IsActiveFlag_HSIDIV>
 80032e0:	1e03      	subs	r3, r0, #0
 80032e2:	d002      	beq.n	80032ea <LL_RCC_GetUSARTClockFreq+0x56>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 80032e4:	4b36      	ldr	r3, [pc, #216]	; (80033c0 <LL_RCC_GetUSARTClockFreq+0x12c>)
 80032e6:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 80032e8:	e019      	b.n	800331e <LL_RCC_GetUSARTClockFreq+0x8a>
            usart_frequency = HSI_VALUE;
 80032ea:	4b36      	ldr	r3, [pc, #216]	; (80033c4 <LL_RCC_GetUSARTClockFreq+0x130>)
 80032ec:	60fb      	str	r3, [r7, #12]
        break;
 80032ee:	e016      	b.n	800331e <LL_RCC_GetUSARTClockFreq+0x8a>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80032f0:	f7ff ff3a 	bl	8003168 <LL_RCC_LSE_IsReady>
 80032f4:	1e03      	subs	r3, r0, #0
 80032f6:	d014      	beq.n	8003322 <LL_RCC_GetUSARTClockFreq+0x8e>
        {
          usart_frequency = LSE_VALUE;
 80032f8:	2380      	movs	r3, #128	; 0x80
 80032fa:	021b      	lsls	r3, r3, #8
 80032fc:	60fb      	str	r3, [r7, #12]
        }
        break;
 80032fe:	e010      	b.n	8003322 <LL_RCC_GetUSARTClockFreq+0x8e>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003300:	f000 f868 	bl	80033d4 <RCC_GetSystemClockFreq>
 8003304:	0003      	movs	r3, r0
 8003306:	0018      	movs	r0, r3
 8003308:	f000 f8a8 	bl	800345c <RCC_GetHCLKClockFreq>
 800330c:	0003      	movs	r3, r0
 800330e:	0018      	movs	r0, r3
 8003310:	f000 f8ce 	bl	80034b0 <RCC_GetPCLK2ClockFreq>
 8003314:	0003      	movs	r3, r0
 8003316:	60fb      	str	r3, [r7, #12]
        break;
 8003318:	e004      	b.n	8003324 <LL_RCC_GetUSARTClockFreq+0x90>
    }
  }
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	e002      	b.n	8003324 <LL_RCC_GetUSARTClockFreq+0x90>
        break;
 800331e:	46c0      	nop			; (mov r8, r8)
 8003320:	e000      	b.n	8003324 <LL_RCC_GetUSARTClockFreq+0x90>
        break;
 8003322:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART1SEL  */

#if defined(RCC_CCIPR_USART2SEL)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b0c      	cmp	r3, #12
 8003328:	d139      	bne.n	800339e <LL_RCC_GetUSARTClockFreq+0x10a>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	0018      	movs	r0, r3
 800332e:	f7ff ff6b 	bl	8003208 <LL_RCC_GetUSARTClockSource>
 8003332:	0003      	movs	r3, r0
 8003334:	4a24      	ldr	r2, [pc, #144]	; (80033c8 <LL_RCC_GetUSARTClockFreq+0x134>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d01c      	beq.n	8003374 <LL_RCC_GetUSARTClockFreq+0xe0>
 800333a:	4a23      	ldr	r2, [pc, #140]	; (80033c8 <LL_RCC_GetUSARTClockFreq+0x134>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d821      	bhi.n	8003384 <LL_RCC_GetUSARTClockFreq+0xf0>
 8003340:	4a22      	ldr	r2, [pc, #136]	; (80033cc <LL_RCC_GetUSARTClockFreq+0x138>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d003      	beq.n	800334e <LL_RCC_GetUSARTClockFreq+0xba>
 8003346:	4a22      	ldr	r2, [pc, #136]	; (80033d0 <LL_RCC_GetUSARTClockFreq+0x13c>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d005      	beq.n	8003358 <LL_RCC_GetUSARTClockFreq+0xc4>
 800334c:	e01a      	b.n	8003384 <LL_RCC_GetUSARTClockFreq+0xf0>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800334e:	f000 f841 	bl	80033d4 <RCC_GetSystemClockFreq>
 8003352:	0003      	movs	r3, r0
 8003354:	60fb      	str	r3, [r7, #12]
        break;
 8003356:	e027      	b.n	80033a8 <LL_RCC_GetUSARTClockFreq+0x114>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8003358:	f7ff fef6 	bl	8003148 <LL_RCC_HSI_IsReady>
 800335c:	1e03      	subs	r3, r0, #0
 800335e:	d020      	beq.n	80033a2 <LL_RCC_GetUSARTClockFreq+0x10e>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8003360:	f7ff ff88 	bl	8003274 <LL_RCC_IsActiveFlag_HSIDIV>
 8003364:	1e03      	subs	r3, r0, #0
 8003366:	d002      	beq.n	800336e <LL_RCC_GetUSARTClockFreq+0xda>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 8003368:	4b15      	ldr	r3, [pc, #84]	; (80033c0 <LL_RCC_GetUSARTClockFreq+0x12c>)
 800336a:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 800336c:	e019      	b.n	80033a2 <LL_RCC_GetUSARTClockFreq+0x10e>
            usart_frequency = HSI_VALUE;
 800336e:	4b15      	ldr	r3, [pc, #84]	; (80033c4 <LL_RCC_GetUSARTClockFreq+0x130>)
 8003370:	60fb      	str	r3, [r7, #12]
        break;
 8003372:	e016      	b.n	80033a2 <LL_RCC_GetUSARTClockFreq+0x10e>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8003374:	f7ff fef8 	bl	8003168 <LL_RCC_LSE_IsReady>
 8003378:	1e03      	subs	r3, r0, #0
 800337a:	d014      	beq.n	80033a6 <LL_RCC_GetUSARTClockFreq+0x112>
        {
          usart_frequency = LSE_VALUE;
 800337c:	2380      	movs	r3, #128	; 0x80
 800337e:	021b      	lsls	r3, r3, #8
 8003380:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003382:	e010      	b.n	80033a6 <LL_RCC_GetUSARTClockFreq+0x112>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003384:	f000 f826 	bl	80033d4 <RCC_GetSystemClockFreq>
 8003388:	0003      	movs	r3, r0
 800338a:	0018      	movs	r0, r3
 800338c:	f000 f866 	bl	800345c <RCC_GetHCLKClockFreq>
 8003390:	0003      	movs	r3, r0
 8003392:	0018      	movs	r0, r3
 8003394:	f000 f878 	bl	8003488 <RCC_GetPCLK1ClockFreq>
 8003398:	0003      	movs	r3, r0
 800339a:	60fb      	str	r3, [r7, #12]
        break;
 800339c:	e004      	b.n	80033a8 <LL_RCC_GetUSARTClockFreq+0x114>
    }
  }
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	e002      	b.n	80033a8 <LL_RCC_GetUSARTClockFreq+0x114>
        break;
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	e000      	b.n	80033a8 <LL_RCC_GetUSARTClockFreq+0x114>
        break;
 80033a6:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART2SEL */

  return usart_frequency;
 80033a8:	68fb      	ldr	r3, [r7, #12]
}
 80033aa:	0018      	movs	r0, r3
 80033ac:	46bd      	mov	sp, r7
 80033ae:	b004      	add	sp, #16
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	00030003 	.word	0x00030003
 80033b8:	00030001 	.word	0x00030001
 80033bc:	00030002 	.word	0x00030002
 80033c0:	003d0900 	.word	0x003d0900
 80033c4:	00f42400 	.word	0x00f42400
 80033c8:	000c000c 	.word	0x000c000c
 80033cc:	000c0004 	.word	0x000c0004
 80033d0:	000c0008 	.word	0x000c0008

080033d4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80033da:	f7ff fee5 	bl	80031a8 <LL_RCC_GetSysClkSource>
 80033de:	0003      	movs	r3, r0
 80033e0:	2b0c      	cmp	r3, #12
 80033e2:	d020      	beq.n	8003426 <RCC_GetSystemClockFreq+0x52>
 80033e4:	d824      	bhi.n	8003430 <RCC_GetSystemClockFreq+0x5c>
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d01a      	beq.n	8003420 <RCC_GetSystemClockFreq+0x4c>
 80033ea:	d821      	bhi.n	8003430 <RCC_GetSystemClockFreq+0x5c>
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d002      	beq.n	80033f6 <RCC_GetSystemClockFreq+0x22>
 80033f0:	2b04      	cmp	r3, #4
 80033f2:	d00b      	beq.n	800340c <RCC_GetSystemClockFreq+0x38>
 80033f4:	e01c      	b.n	8003430 <RCC_GetSystemClockFreq+0x5c>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80033f6:	f7ff fecb 	bl	8003190 <LL_RCC_MSI_GetRange>
 80033fa:	0003      	movs	r3, r0
 80033fc:	0b5b      	lsrs	r3, r3, #13
 80033fe:	3301      	adds	r3, #1
 8003400:	2280      	movs	r2, #128	; 0x80
 8003402:	0212      	lsls	r2, r2, #8
 8003404:	409a      	lsls	r2, r3
 8003406:	0013      	movs	r3, r2
 8003408:	607b      	str	r3, [r7, #4]
      break;
 800340a:	e01c      	b.n	8003446 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 800340c:	f7ff ff32 	bl	8003274 <LL_RCC_IsActiveFlag_HSIDIV>
 8003410:	1e03      	subs	r3, r0, #0
 8003412:	d002      	beq.n	800341a <RCC_GetSystemClockFreq+0x46>
      {
        frequency = (HSI_VALUE >> 2U);
 8003414:	4b0e      	ldr	r3, [pc, #56]	; (8003450 <RCC_GetSystemClockFreq+0x7c>)
 8003416:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSI_VALUE;
      }
      break;
 8003418:	e015      	b.n	8003446 <RCC_GetSystemClockFreq+0x72>
        frequency = HSI_VALUE;
 800341a:	4b0e      	ldr	r3, [pc, #56]	; (8003454 <RCC_GetSystemClockFreq+0x80>)
 800341c:	607b      	str	r3, [r7, #4]
      break;
 800341e:	e012      	b.n	8003446 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock source */
      frequency = HSE_VALUE;
 8003420:	4b0d      	ldr	r3, [pc, #52]	; (8003458 <RCC_GetSystemClockFreq+0x84>)
 8003422:	607b      	str	r3, [r7, #4]
      break;
 8003424:	e00f      	b.n	8003446 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8003426:	f000 f857 	bl	80034d8 <RCC_PLL_GetFreqDomain_SYS>
 800342a:	0003      	movs	r3, r0
 800342c:	607b      	str	r3, [r7, #4]
      break;
 800342e:	e00a      	b.n	8003446 <RCC_GetSystemClockFreq+0x72>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003430:	f7ff feae 	bl	8003190 <LL_RCC_MSI_GetRange>
 8003434:	0003      	movs	r3, r0
 8003436:	0b5b      	lsrs	r3, r3, #13
 8003438:	3301      	adds	r3, #1
 800343a:	2280      	movs	r2, #128	; 0x80
 800343c:	0212      	lsls	r2, r2, #8
 800343e:	409a      	lsls	r2, r3
 8003440:	0013      	movs	r3, r2
 8003442:	607b      	str	r3, [r7, #4]
      break;
 8003444:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8003446:	687b      	ldr	r3, [r7, #4]
}
 8003448:	0018      	movs	r0, r3
 800344a:	46bd      	mov	sp, r7
 800344c:	b002      	add	sp, #8
 800344e:	bd80      	pop	{r7, pc}
 8003450:	003d0900 	.word	0x003d0900
 8003454:	00f42400 	.word	0x00f42400
 8003458:	007a1200 	.word	0x007a1200

0800345c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003464:	f7ff feac 	bl	80031c0 <LL_RCC_GetAHBPrescaler>
 8003468:	0003      	movs	r3, r0
 800346a:	091b      	lsrs	r3, r3, #4
 800346c:	220f      	movs	r2, #15
 800346e:	4013      	ands	r3, r2
 8003470:	4a04      	ldr	r2, [pc, #16]	; (8003484 <RCC_GetHCLKClockFreq+0x28>)
 8003472:	5cd3      	ldrb	r3, [r2, r3]
 8003474:	001a      	movs	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	40d3      	lsrs	r3, r2
}
 800347a:	0018      	movs	r0, r3
 800347c:	46bd      	mov	sp, r7
 800347e:	b002      	add	sp, #8
 8003480:	bd80      	pop	{r7, pc}
 8003482:	46c0      	nop			; (mov r8, r8)
 8003484:	08003900 	.word	0x08003900

08003488 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003490:	f7ff fea2 	bl	80031d8 <LL_RCC_GetAPB1Prescaler>
 8003494:	0003      	movs	r3, r0
 8003496:	0a1b      	lsrs	r3, r3, #8
 8003498:	4a04      	ldr	r2, [pc, #16]	; (80034ac <RCC_GetPCLK1ClockFreq+0x24>)
 800349a:	5cd3      	ldrb	r3, [r2, r3]
 800349c:	001a      	movs	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	40d3      	lsrs	r3, r2
}
 80034a2:	0018      	movs	r0, r3
 80034a4:	46bd      	mov	sp, r7
 80034a6:	b002      	add	sp, #8
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	46c0      	nop			; (mov r8, r8)
 80034ac:	08003910 	.word	0x08003910

080034b0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80034b8:	f7ff fe9a 	bl	80031f0 <LL_RCC_GetAPB2Prescaler>
 80034bc:	0003      	movs	r3, r0
 80034be:	0adb      	lsrs	r3, r3, #11
 80034c0:	4a04      	ldr	r2, [pc, #16]	; (80034d4 <RCC_GetPCLK2ClockFreq+0x24>)
 80034c2:	5cd3      	ldrb	r3, [r2, r3]
 80034c4:	001a      	movs	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	40d3      	lsrs	r3, r2
}
 80034ca:	0018      	movs	r0, r3
 80034cc:	46bd      	mov	sp, r7
 80034ce:	b002      	add	sp, #8
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	46c0      	nop			; (mov r8, r8)
 80034d4:	08003910 	.word	0x08003910

080034d8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80034d8:	b590      	push	{r4, r7, lr}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80034de:	f7ff fea5 	bl	800322c <LL_RCC_PLL_GetMainSource>
 80034e2:	0003      	movs	r3, r0
 80034e4:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d109      	bne.n	8003500 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 80034ec:	f7ff fec2 	bl	8003274 <LL_RCC_IsActiveFlag_HSIDIV>
 80034f0:	1e03      	subs	r3, r0, #0
 80034f2:	d002      	beq.n	80034fa <RCC_PLL_GetFreqDomain_SYS+0x22>
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 80034f4:	4b10      	ldr	r3, [pc, #64]	; (8003538 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 80034f6:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSI_VALUE;
      }
      break;
 80034f8:	e005      	b.n	8003506 <RCC_PLL_GetFreqDomain_SYS+0x2e>
        pllinputfreq = HSI_VALUE;
 80034fa:	4b10      	ldr	r3, [pc, #64]	; (800353c <RCC_PLL_GetFreqDomain_SYS+0x64>)
 80034fc:	607b      	str	r3, [r7, #4]
      break;
 80034fe:	e002      	b.n	8003506 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003500:	4b0f      	ldr	r3, [pc, #60]	; (8003540 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8003502:	607b      	str	r3, [r7, #4]
      break;
 8003504:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 8003506:	f7ff fe9d 	bl	8003244 <LL_RCC_PLL_GetMultiplicator>
 800350a:	0003      	movs	r3, r0
 800350c:	0c9b      	lsrs	r3, r3, #18
 800350e:	4a0d      	ldr	r2, [pc, #52]	; (8003544 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8003510:	5cd3      	ldrb	r3, [r2, r3]
 8003512:	001a      	movs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4353      	muls	r3, r2
 8003518:	001c      	movs	r4, r3
 800351a:	f7ff fe9f 	bl	800325c <LL_RCC_PLL_GetDivider>
 800351e:	0003      	movs	r3, r0
 8003520:	0d9b      	lsrs	r3, r3, #22
 8003522:	3301      	adds	r3, #1
 8003524:	0019      	movs	r1, r3
 8003526:	0020      	movs	r0, r4
 8003528:	f7fc fdee 	bl	8000108 <__udivsi3>
 800352c:	0003      	movs	r3, r0
}
 800352e:	0018      	movs	r0, r3
 8003530:	46bd      	mov	sp, r7
 8003532:	b003      	add	sp, #12
 8003534:	bd90      	pop	{r4, r7, pc}
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	003d0900 	.word	0x003d0900
 800353c:	00f42400 	.word	0x00f42400
 8003540:	007a1200 	.word	0x007a1200
 8003544:	08003918 	.word	0x08003918

08003548 <LL_USART_IsEnabled>:
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2201      	movs	r2, #1
 8003556:	4013      	ands	r3, r2
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <LL_USART_IsEnabled+0x18>
 800355c:	2301      	movs	r3, #1
 800355e:	e000      	b.n	8003562 <LL_USART_IsEnabled+0x1a>
 8003560:	2300      	movs	r3, #0
}
 8003562:	0018      	movs	r0, r3
 8003564:	46bd      	mov	sp, r7
 8003566:	b002      	add	sp, #8
 8003568:	bd80      	pop	{r7, pc}
	...

0800356c <LL_USART_SetStopBitsLength>:
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	4a05      	ldr	r2, [pc, #20]	; (8003590 <LL_USART_SetStopBitsLength+0x24>)
 800357c:	401a      	ands	r2, r3
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	431a      	orrs	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	605a      	str	r2, [r3, #4]
}
 8003586:	46c0      	nop			; (mov r8, r8)
 8003588:	46bd      	mov	sp, r7
 800358a:	b002      	add	sp, #8
 800358c:	bd80      	pop	{r7, pc}
 800358e:	46c0      	nop			; (mov r8, r8)
 8003590:	ffffcfff 	.word	0xffffcfff

08003594 <LL_USART_SetHWFlowCtrl>:
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	4a05      	ldr	r2, [pc, #20]	; (80035b8 <LL_USART_SetHWFlowCtrl+0x24>)
 80035a4:	401a      	ands	r2, r3
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	431a      	orrs	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	609a      	str	r2, [r3, #8]
}
 80035ae:	46c0      	nop			; (mov r8, r8)
 80035b0:	46bd      	mov	sp, r7
 80035b2:	b002      	add	sp, #8
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	46c0      	nop			; (mov r8, r8)
 80035b8:	fffffcff 	.word	0xfffffcff

080035bc <LL_USART_SetBaudRate>:
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
 80035c8:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	2380      	movs	r3, #128	; 0x80
 80035ce:	021b      	lsls	r3, r3, #8
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d11c      	bne.n	800360e <LL_USART_SetBaudRate+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	005a      	lsls	r2, r3, #1
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	085b      	lsrs	r3, r3, #1
 80035dc:	18d3      	adds	r3, r2, r3
 80035de:	6839      	ldr	r1, [r7, #0]
 80035e0:	0018      	movs	r0, r3
 80035e2:	f7fc fd91 	bl	8000108 <__udivsi3>
 80035e6:	0003      	movs	r3, r0
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	4a10      	ldr	r2, [pc, #64]	; (8003630 <LL_USART_SetBaudRate+0x74>)
 80035f0:	4013      	ands	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	085b      	lsrs	r3, r3, #1
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	001a      	movs	r2, r3
 80035fc:	2307      	movs	r3, #7
 80035fe:	4013      	ands	r3, r2
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	4313      	orrs	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	60da      	str	r2, [r3, #12]
}
 800360c:	e00c      	b.n	8003628 <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	085a      	lsrs	r2, r3, #1
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	18d3      	adds	r3, r2, r3
 8003616:	6839      	ldr	r1, [r7, #0]
 8003618:	0018      	movs	r0, r3
 800361a:	f7fc fd75 	bl	8000108 <__udivsi3>
 800361e:	0003      	movs	r3, r0
 8003620:	b29b      	uxth	r3, r3
 8003622:	001a      	movs	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	60da      	str	r2, [r3, #12]
}
 8003628:	46c0      	nop			; (mov r8, r8)
 800362a:	46bd      	mov	sp, r7
 800362c:	b006      	add	sp, #24
 800362e:	bd80      	pop	{r7, pc}
 8003630:	0000fff0 	.word	0x0000fff0

08003634 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800363e:	230f      	movs	r3, #15
 8003640:	18fb      	adds	r3, r7, r3
 8003642:	2201      	movs	r2, #1
 8003644:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003646:	2300      	movs	r3, #0
 8003648:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	0018      	movs	r0, r3
 800364e:	f7ff ff7b 	bl	8003548 <LL_USART_IsEnabled>
 8003652:	1e03      	subs	r3, r0, #0
 8003654:	d145      	bne.n	80036e2 <LL_USART_Init+0xae>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a25      	ldr	r2, [pc, #148]	; (80036f0 <LL_USART_Init+0xbc>)
 800365c:	401a      	ands	r2, r3
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	6859      	ldr	r1, [r3, #4]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	4319      	orrs	r1, r3
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	4319      	orrs	r1, r3
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	430b      	orrs	r3, r1
 8003674:	431a      	orrs	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	0011      	movs	r1, r2
 8003682:	0018      	movs	r0, r3
 8003684:	f7ff ff72 	bl	800356c <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	695a      	ldr	r2, [r3, #20]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	0011      	movs	r1, r2
 8003690:	0018      	movs	r0, r3
 8003692:	f7ff ff7f 	bl	8003594 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
#if defined(USART1)
    if (USARTx == USART1)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a16      	ldr	r2, [pc, #88]	; (80036f4 <LL_USART_Init+0xc0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d105      	bne.n	80036aa <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800369e:	2003      	movs	r0, #3
 80036a0:	f7ff fdf8 	bl	8003294 <LL_RCC_GetUSARTClockFreq>
 80036a4:	0003      	movs	r3, r0
 80036a6:	60bb      	str	r3, [r7, #8]
 80036a8:	e008      	b.n	80036bc <LL_USART_Init+0x88>
    }
#endif /* USART1 */
#if defined(USART1)
    else if (USARTx == USART2)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a12      	ldr	r2, [pc, #72]	; (80036f8 <LL_USART_Init+0xc4>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d104      	bne.n	80036bc <LL_USART_Init+0x88>
#else
    if (USARTx == USART2)
#endif /* USART1 */
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80036b2:	200c      	movs	r0, #12
 80036b4:	f7ff fdee 	bl	8003294 <LL_RCC_GetUSARTClockFreq>
 80036b8:	0003      	movs	r3, r0
 80036ba:	60bb      	str	r3, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00f      	beq.n	80036e2 <LL_USART_Init+0xae>
        && (USART_InitStruct->BaudRate != 0U))
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00b      	beq.n	80036e2 <LL_USART_Init+0xae>
    {
      status = SUCCESS;
 80036ca:	230f      	movs	r3, #15
 80036cc:	18fb      	adds	r3, r7, r3
 80036ce:	2200      	movs	r2, #0
 80036d0:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	699a      	ldr	r2, [r3, #24]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68b9      	ldr	r1, [r7, #8]
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7ff ff6d 	bl	80035bc <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80036e2:	230f      	movs	r3, #15
 80036e4:	18fb      	adds	r3, r7, r3
 80036e6:	781b      	ldrb	r3, [r3, #0]
}
 80036e8:	0018      	movs	r0, r3
 80036ea:	46bd      	mov	sp, r7
 80036ec:	b004      	add	sp, #16
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	efff69f3 	.word	0xefff69f3
 80036f4:	40013800 	.word	0x40013800
 80036f8:	40004400 	.word	0x40004400

080036fc <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003706:	6839      	ldr	r1, [r7, #0]
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f7fc fcfd 	bl	8000108 <__udivsi3>
 800370e:	0003      	movs	r3, r0
 8003710:	001a      	movs	r2, r3
 8003712:	4b06      	ldr	r3, [pc, #24]	; (800372c <LL_InitTick+0x30>)
 8003714:	3a01      	subs	r2, #1
 8003716:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003718:	4b04      	ldr	r3, [pc, #16]	; (800372c <LL_InitTick+0x30>)
 800371a:	2200      	movs	r2, #0
 800371c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800371e:	4b03      	ldr	r3, [pc, #12]	; (800372c <LL_InitTick+0x30>)
 8003720:	2205      	movs	r2, #5
 8003722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003724:	46c0      	nop			; (mov r8, r8)
 8003726:	46bd      	mov	sp, r7
 8003728:	b002      	add	sp, #8
 800372a:	bd80      	pop	{r7, pc}
 800372c:	e000e010 	.word	0xe000e010

08003730 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003738:	23fa      	movs	r3, #250	; 0xfa
 800373a:	009a      	lsls	r2, r3, #2
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	0011      	movs	r1, r2
 8003740:	0018      	movs	r0, r3
 8003742:	f7ff ffdb 	bl	80036fc <LL_InitTick>
}
 8003746:	46c0      	nop			; (mov r8, r8)
 8003748:	46bd      	mov	sp, r7
 800374a:	b002      	add	sp, #8
 800374c:	bd80      	pop	{r7, pc}
	...

08003750 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003758:	4b0d      	ldr	r3, [pc, #52]	; (8003790 <LL_mDelay+0x40>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800375e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3301      	adds	r3, #1
 8003764:	d00c      	beq.n	8003780 <LL_mDelay+0x30>
  {
    Delay++;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	3301      	adds	r3, #1
 800376a:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800376c:	e008      	b.n	8003780 <LL_mDelay+0x30>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800376e:	4b08      	ldr	r3, [pc, #32]	; (8003790 <LL_mDelay+0x40>)
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	2380      	movs	r3, #128	; 0x80
 8003774:	025b      	lsls	r3, r3, #9
 8003776:	4013      	ands	r3, r2
 8003778:	d002      	beq.n	8003780 <LL_mDelay+0x30>
    {
      Delay--;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	3b01      	subs	r3, #1
 800377e:	607b      	str	r3, [r7, #4]
  while (Delay)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f3      	bne.n	800376e <LL_mDelay+0x1e>
    }
  }
}
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	46c0      	nop			; (mov r8, r8)
 800378a:	46bd      	mov	sp, r7
 800378c:	b004      	add	sp, #16
 800378e:	bd80      	pop	{r7, pc}
 8003790:	e000e010 	.word	0xe000e010

08003794 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800379c:	4b03      	ldr	r3, [pc, #12]	; (80037ac <LL_SetSystemCoreClock+0x18>)
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	601a      	str	r2, [r3, #0]
}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	46bd      	mov	sp, r7
 80037a6:	b002      	add	sp, #8
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	20000000 	.word	0x20000000

080037b0 <__libc_init_array>:
 80037b0:	b570      	push	{r4, r5, r6, lr}
 80037b2:	2600      	movs	r6, #0
 80037b4:	4d0c      	ldr	r5, [pc, #48]	; (80037e8 <__libc_init_array+0x38>)
 80037b6:	4c0d      	ldr	r4, [pc, #52]	; (80037ec <__libc_init_array+0x3c>)
 80037b8:	1b64      	subs	r4, r4, r5
 80037ba:	10a4      	asrs	r4, r4, #2
 80037bc:	42a6      	cmp	r6, r4
 80037be:	d109      	bne.n	80037d4 <__libc_init_array+0x24>
 80037c0:	2600      	movs	r6, #0
 80037c2:	f000 f821 	bl	8003808 <_init>
 80037c6:	4d0a      	ldr	r5, [pc, #40]	; (80037f0 <__libc_init_array+0x40>)
 80037c8:	4c0a      	ldr	r4, [pc, #40]	; (80037f4 <__libc_init_array+0x44>)
 80037ca:	1b64      	subs	r4, r4, r5
 80037cc:	10a4      	asrs	r4, r4, #2
 80037ce:	42a6      	cmp	r6, r4
 80037d0:	d105      	bne.n	80037de <__libc_init_array+0x2e>
 80037d2:	bd70      	pop	{r4, r5, r6, pc}
 80037d4:	00b3      	lsls	r3, r6, #2
 80037d6:	58eb      	ldr	r3, [r5, r3]
 80037d8:	4798      	blx	r3
 80037da:	3601      	adds	r6, #1
 80037dc:	e7ee      	b.n	80037bc <__libc_init_array+0xc>
 80037de:	00b3      	lsls	r3, r6, #2
 80037e0:	58eb      	ldr	r3, [r5, r3]
 80037e2:	4798      	blx	r3
 80037e4:	3601      	adds	r6, #1
 80037e6:	e7f2      	b.n	80037ce <__libc_init_array+0x1e>
 80037e8:	08003924 	.word	0x08003924
 80037ec:	08003924 	.word	0x08003924
 80037f0:	08003924 	.word	0x08003924
 80037f4:	08003928 	.word	0x08003928

080037f8 <memset>:
 80037f8:	0003      	movs	r3, r0
 80037fa:	1882      	adds	r2, r0, r2
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d100      	bne.n	8003802 <memset+0xa>
 8003800:	4770      	bx	lr
 8003802:	7019      	strb	r1, [r3, #0]
 8003804:	3301      	adds	r3, #1
 8003806:	e7f9      	b.n	80037fc <memset+0x4>

08003808 <_init>:
 8003808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800380e:	bc08      	pop	{r3}
 8003810:	469e      	mov	lr, r3
 8003812:	4770      	bx	lr

08003814 <_fini>:
 8003814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800381a:	bc08      	pop	{r3}
 800381c:	469e      	mov	lr, r3
 800381e:	4770      	bx	lr
