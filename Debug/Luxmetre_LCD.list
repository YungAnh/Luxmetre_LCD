
Luxmetre_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e04  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08002ec4  08002ec4  00012ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fc8  08002fc8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08002fc8  08002fc8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fc8  08002fc8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fc8  08002fc8  00012fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fcc  08002fcc  00012fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002fd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08002fd4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08002fd4  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004b2d  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000152a  00000000  00000000  00024b59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d8  00000000  00000000  00026088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000600  00000000  00000000  00026760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e57f  00000000  00000000  00026d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005d32  00000000  00000000  000352df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004cc21  00000000  00000000  0003b011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00087c32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017c0  00000000  00000000  00087c84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002eac 	.word	0x08002eac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08002eac 	.word	0x08002eac

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_fmul>:
 80003f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f6:	464f      	mov	r7, r9
 80003f8:	4646      	mov	r6, r8
 80003fa:	46d6      	mov	lr, sl
 80003fc:	0244      	lsls	r4, r0, #9
 80003fe:	0045      	lsls	r5, r0, #1
 8000400:	b5c0      	push	{r6, r7, lr}
 8000402:	0a64      	lsrs	r4, r4, #9
 8000404:	1c0f      	adds	r7, r1, #0
 8000406:	0e2d      	lsrs	r5, r5, #24
 8000408:	0fc6      	lsrs	r6, r0, #31
 800040a:	2d00      	cmp	r5, #0
 800040c:	d100      	bne.n	8000410 <__aeabi_fmul+0x1c>
 800040e:	e08d      	b.n	800052c <__aeabi_fmul+0x138>
 8000410:	2dff      	cmp	r5, #255	; 0xff
 8000412:	d100      	bne.n	8000416 <__aeabi_fmul+0x22>
 8000414:	e092      	b.n	800053c <__aeabi_fmul+0x148>
 8000416:	2300      	movs	r3, #0
 8000418:	2080      	movs	r0, #128	; 0x80
 800041a:	4699      	mov	r9, r3
 800041c:	469a      	mov	sl, r3
 800041e:	00e4      	lsls	r4, r4, #3
 8000420:	04c0      	lsls	r0, r0, #19
 8000422:	4304      	orrs	r4, r0
 8000424:	3d7f      	subs	r5, #127	; 0x7f
 8000426:	0278      	lsls	r0, r7, #9
 8000428:	0a43      	lsrs	r3, r0, #9
 800042a:	4698      	mov	r8, r3
 800042c:	007b      	lsls	r3, r7, #1
 800042e:	0e1b      	lsrs	r3, r3, #24
 8000430:	0fff      	lsrs	r7, r7, #31
 8000432:	2b00      	cmp	r3, #0
 8000434:	d100      	bne.n	8000438 <__aeabi_fmul+0x44>
 8000436:	e070      	b.n	800051a <__aeabi_fmul+0x126>
 8000438:	2bff      	cmp	r3, #255	; 0xff
 800043a:	d100      	bne.n	800043e <__aeabi_fmul+0x4a>
 800043c:	e086      	b.n	800054c <__aeabi_fmul+0x158>
 800043e:	4642      	mov	r2, r8
 8000440:	00d0      	lsls	r0, r2, #3
 8000442:	2280      	movs	r2, #128	; 0x80
 8000444:	3b7f      	subs	r3, #127	; 0x7f
 8000446:	18ed      	adds	r5, r5, r3
 8000448:	2300      	movs	r3, #0
 800044a:	04d2      	lsls	r2, r2, #19
 800044c:	4302      	orrs	r2, r0
 800044e:	4690      	mov	r8, r2
 8000450:	469c      	mov	ip, r3
 8000452:	0031      	movs	r1, r6
 8000454:	464b      	mov	r3, r9
 8000456:	4079      	eors	r1, r7
 8000458:	1c68      	adds	r0, r5, #1
 800045a:	2b0f      	cmp	r3, #15
 800045c:	d81c      	bhi.n	8000498 <__aeabi_fmul+0xa4>
 800045e:	4a76      	ldr	r2, [pc, #472]	; (8000638 <__aeabi_fmul+0x244>)
 8000460:	009b      	lsls	r3, r3, #2
 8000462:	58d3      	ldr	r3, [r2, r3]
 8000464:	469f      	mov	pc, r3
 8000466:	0039      	movs	r1, r7
 8000468:	4644      	mov	r4, r8
 800046a:	46e2      	mov	sl, ip
 800046c:	4653      	mov	r3, sl
 800046e:	2b02      	cmp	r3, #2
 8000470:	d00f      	beq.n	8000492 <__aeabi_fmul+0x9e>
 8000472:	2b03      	cmp	r3, #3
 8000474:	d100      	bne.n	8000478 <__aeabi_fmul+0x84>
 8000476:	e0d7      	b.n	8000628 <__aeabi_fmul+0x234>
 8000478:	2b01      	cmp	r3, #1
 800047a:	d137      	bne.n	80004ec <__aeabi_fmul+0xf8>
 800047c:	2000      	movs	r0, #0
 800047e:	2400      	movs	r4, #0
 8000480:	05c0      	lsls	r0, r0, #23
 8000482:	4320      	orrs	r0, r4
 8000484:	07c9      	lsls	r1, r1, #31
 8000486:	4308      	orrs	r0, r1
 8000488:	bce0      	pop	{r5, r6, r7}
 800048a:	46ba      	mov	sl, r7
 800048c:	46b1      	mov	r9, r6
 800048e:	46a8      	mov	r8, r5
 8000490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000492:	20ff      	movs	r0, #255	; 0xff
 8000494:	2400      	movs	r4, #0
 8000496:	e7f3      	b.n	8000480 <__aeabi_fmul+0x8c>
 8000498:	0c26      	lsrs	r6, r4, #16
 800049a:	0424      	lsls	r4, r4, #16
 800049c:	0c22      	lsrs	r2, r4, #16
 800049e:	4644      	mov	r4, r8
 80004a0:	0424      	lsls	r4, r4, #16
 80004a2:	0c24      	lsrs	r4, r4, #16
 80004a4:	4643      	mov	r3, r8
 80004a6:	0027      	movs	r7, r4
 80004a8:	0c1b      	lsrs	r3, r3, #16
 80004aa:	4357      	muls	r7, r2
 80004ac:	4374      	muls	r4, r6
 80004ae:	435a      	muls	r2, r3
 80004b0:	435e      	muls	r6, r3
 80004b2:	1912      	adds	r2, r2, r4
 80004b4:	0c3b      	lsrs	r3, r7, #16
 80004b6:	189b      	adds	r3, r3, r2
 80004b8:	429c      	cmp	r4, r3
 80004ba:	d903      	bls.n	80004c4 <__aeabi_fmul+0xd0>
 80004bc:	2280      	movs	r2, #128	; 0x80
 80004be:	0252      	lsls	r2, r2, #9
 80004c0:	4694      	mov	ip, r2
 80004c2:	4466      	add	r6, ip
 80004c4:	043f      	lsls	r7, r7, #16
 80004c6:	041a      	lsls	r2, r3, #16
 80004c8:	0c3f      	lsrs	r7, r7, #16
 80004ca:	19d2      	adds	r2, r2, r7
 80004cc:	0194      	lsls	r4, r2, #6
 80004ce:	1e67      	subs	r7, r4, #1
 80004d0:	41bc      	sbcs	r4, r7
 80004d2:	0c1b      	lsrs	r3, r3, #16
 80004d4:	0e92      	lsrs	r2, r2, #26
 80004d6:	199b      	adds	r3, r3, r6
 80004d8:	4314      	orrs	r4, r2
 80004da:	019b      	lsls	r3, r3, #6
 80004dc:	431c      	orrs	r4, r3
 80004de:	011b      	lsls	r3, r3, #4
 80004e0:	d400      	bmi.n	80004e4 <__aeabi_fmul+0xf0>
 80004e2:	e09b      	b.n	800061c <__aeabi_fmul+0x228>
 80004e4:	2301      	movs	r3, #1
 80004e6:	0862      	lsrs	r2, r4, #1
 80004e8:	401c      	ands	r4, r3
 80004ea:	4314      	orrs	r4, r2
 80004ec:	0002      	movs	r2, r0
 80004ee:	327f      	adds	r2, #127	; 0x7f
 80004f0:	2a00      	cmp	r2, #0
 80004f2:	dd64      	ble.n	80005be <__aeabi_fmul+0x1ca>
 80004f4:	0763      	lsls	r3, r4, #29
 80004f6:	d004      	beq.n	8000502 <__aeabi_fmul+0x10e>
 80004f8:	230f      	movs	r3, #15
 80004fa:	4023      	ands	r3, r4
 80004fc:	2b04      	cmp	r3, #4
 80004fe:	d000      	beq.n	8000502 <__aeabi_fmul+0x10e>
 8000500:	3404      	adds	r4, #4
 8000502:	0123      	lsls	r3, r4, #4
 8000504:	d503      	bpl.n	800050e <__aeabi_fmul+0x11a>
 8000506:	0002      	movs	r2, r0
 8000508:	4b4c      	ldr	r3, [pc, #304]	; (800063c <__aeabi_fmul+0x248>)
 800050a:	3280      	adds	r2, #128	; 0x80
 800050c:	401c      	ands	r4, r3
 800050e:	2afe      	cmp	r2, #254	; 0xfe
 8000510:	dcbf      	bgt.n	8000492 <__aeabi_fmul+0x9e>
 8000512:	01a4      	lsls	r4, r4, #6
 8000514:	0a64      	lsrs	r4, r4, #9
 8000516:	b2d0      	uxtb	r0, r2
 8000518:	e7b2      	b.n	8000480 <__aeabi_fmul+0x8c>
 800051a:	4643      	mov	r3, r8
 800051c:	2b00      	cmp	r3, #0
 800051e:	d13d      	bne.n	800059c <__aeabi_fmul+0x1a8>
 8000520:	464a      	mov	r2, r9
 8000522:	3301      	adds	r3, #1
 8000524:	431a      	orrs	r2, r3
 8000526:	4691      	mov	r9, r2
 8000528:	469c      	mov	ip, r3
 800052a:	e792      	b.n	8000452 <__aeabi_fmul+0x5e>
 800052c:	2c00      	cmp	r4, #0
 800052e:	d129      	bne.n	8000584 <__aeabi_fmul+0x190>
 8000530:	2304      	movs	r3, #4
 8000532:	4699      	mov	r9, r3
 8000534:	3b03      	subs	r3, #3
 8000536:	2500      	movs	r5, #0
 8000538:	469a      	mov	sl, r3
 800053a:	e774      	b.n	8000426 <__aeabi_fmul+0x32>
 800053c:	2c00      	cmp	r4, #0
 800053e:	d11b      	bne.n	8000578 <__aeabi_fmul+0x184>
 8000540:	2308      	movs	r3, #8
 8000542:	4699      	mov	r9, r3
 8000544:	3b06      	subs	r3, #6
 8000546:	25ff      	movs	r5, #255	; 0xff
 8000548:	469a      	mov	sl, r3
 800054a:	e76c      	b.n	8000426 <__aeabi_fmul+0x32>
 800054c:	4643      	mov	r3, r8
 800054e:	35ff      	adds	r5, #255	; 0xff
 8000550:	2b00      	cmp	r3, #0
 8000552:	d10b      	bne.n	800056c <__aeabi_fmul+0x178>
 8000554:	2302      	movs	r3, #2
 8000556:	464a      	mov	r2, r9
 8000558:	431a      	orrs	r2, r3
 800055a:	4691      	mov	r9, r2
 800055c:	469c      	mov	ip, r3
 800055e:	e778      	b.n	8000452 <__aeabi_fmul+0x5e>
 8000560:	4653      	mov	r3, sl
 8000562:	0031      	movs	r1, r6
 8000564:	2b02      	cmp	r3, #2
 8000566:	d000      	beq.n	800056a <__aeabi_fmul+0x176>
 8000568:	e783      	b.n	8000472 <__aeabi_fmul+0x7e>
 800056a:	e792      	b.n	8000492 <__aeabi_fmul+0x9e>
 800056c:	2303      	movs	r3, #3
 800056e:	464a      	mov	r2, r9
 8000570:	431a      	orrs	r2, r3
 8000572:	4691      	mov	r9, r2
 8000574:	469c      	mov	ip, r3
 8000576:	e76c      	b.n	8000452 <__aeabi_fmul+0x5e>
 8000578:	230c      	movs	r3, #12
 800057a:	4699      	mov	r9, r3
 800057c:	3b09      	subs	r3, #9
 800057e:	25ff      	movs	r5, #255	; 0xff
 8000580:	469a      	mov	sl, r3
 8000582:	e750      	b.n	8000426 <__aeabi_fmul+0x32>
 8000584:	0020      	movs	r0, r4
 8000586:	f000 fe95 	bl	80012b4 <__clzsi2>
 800058a:	2576      	movs	r5, #118	; 0x76
 800058c:	1f43      	subs	r3, r0, #5
 800058e:	409c      	lsls	r4, r3
 8000590:	2300      	movs	r3, #0
 8000592:	426d      	negs	r5, r5
 8000594:	4699      	mov	r9, r3
 8000596:	469a      	mov	sl, r3
 8000598:	1a2d      	subs	r5, r5, r0
 800059a:	e744      	b.n	8000426 <__aeabi_fmul+0x32>
 800059c:	4640      	mov	r0, r8
 800059e:	f000 fe89 	bl	80012b4 <__clzsi2>
 80005a2:	4642      	mov	r2, r8
 80005a4:	1f43      	subs	r3, r0, #5
 80005a6:	409a      	lsls	r2, r3
 80005a8:	2300      	movs	r3, #0
 80005aa:	1a2d      	subs	r5, r5, r0
 80005ac:	4690      	mov	r8, r2
 80005ae:	469c      	mov	ip, r3
 80005b0:	3d76      	subs	r5, #118	; 0x76
 80005b2:	e74e      	b.n	8000452 <__aeabi_fmul+0x5e>
 80005b4:	2480      	movs	r4, #128	; 0x80
 80005b6:	2100      	movs	r1, #0
 80005b8:	20ff      	movs	r0, #255	; 0xff
 80005ba:	03e4      	lsls	r4, r4, #15
 80005bc:	e760      	b.n	8000480 <__aeabi_fmul+0x8c>
 80005be:	2301      	movs	r3, #1
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	2b1b      	cmp	r3, #27
 80005c4:	dd00      	ble.n	80005c8 <__aeabi_fmul+0x1d4>
 80005c6:	e759      	b.n	800047c <__aeabi_fmul+0x88>
 80005c8:	0022      	movs	r2, r4
 80005ca:	309e      	adds	r0, #158	; 0x9e
 80005cc:	40da      	lsrs	r2, r3
 80005ce:	4084      	lsls	r4, r0
 80005d0:	0013      	movs	r3, r2
 80005d2:	1e62      	subs	r2, r4, #1
 80005d4:	4194      	sbcs	r4, r2
 80005d6:	431c      	orrs	r4, r3
 80005d8:	0763      	lsls	r3, r4, #29
 80005da:	d004      	beq.n	80005e6 <__aeabi_fmul+0x1f2>
 80005dc:	230f      	movs	r3, #15
 80005de:	4023      	ands	r3, r4
 80005e0:	2b04      	cmp	r3, #4
 80005e2:	d000      	beq.n	80005e6 <__aeabi_fmul+0x1f2>
 80005e4:	3404      	adds	r4, #4
 80005e6:	0163      	lsls	r3, r4, #5
 80005e8:	d51a      	bpl.n	8000620 <__aeabi_fmul+0x22c>
 80005ea:	2001      	movs	r0, #1
 80005ec:	2400      	movs	r4, #0
 80005ee:	e747      	b.n	8000480 <__aeabi_fmul+0x8c>
 80005f0:	2080      	movs	r0, #128	; 0x80
 80005f2:	03c0      	lsls	r0, r0, #15
 80005f4:	4204      	tst	r4, r0
 80005f6:	d009      	beq.n	800060c <__aeabi_fmul+0x218>
 80005f8:	4643      	mov	r3, r8
 80005fa:	4203      	tst	r3, r0
 80005fc:	d106      	bne.n	800060c <__aeabi_fmul+0x218>
 80005fe:	4644      	mov	r4, r8
 8000600:	4304      	orrs	r4, r0
 8000602:	0264      	lsls	r4, r4, #9
 8000604:	0039      	movs	r1, r7
 8000606:	20ff      	movs	r0, #255	; 0xff
 8000608:	0a64      	lsrs	r4, r4, #9
 800060a:	e739      	b.n	8000480 <__aeabi_fmul+0x8c>
 800060c:	2080      	movs	r0, #128	; 0x80
 800060e:	03c0      	lsls	r0, r0, #15
 8000610:	4304      	orrs	r4, r0
 8000612:	0264      	lsls	r4, r4, #9
 8000614:	0031      	movs	r1, r6
 8000616:	20ff      	movs	r0, #255	; 0xff
 8000618:	0a64      	lsrs	r4, r4, #9
 800061a:	e731      	b.n	8000480 <__aeabi_fmul+0x8c>
 800061c:	0028      	movs	r0, r5
 800061e:	e765      	b.n	80004ec <__aeabi_fmul+0xf8>
 8000620:	01a4      	lsls	r4, r4, #6
 8000622:	2000      	movs	r0, #0
 8000624:	0a64      	lsrs	r4, r4, #9
 8000626:	e72b      	b.n	8000480 <__aeabi_fmul+0x8c>
 8000628:	2080      	movs	r0, #128	; 0x80
 800062a:	03c0      	lsls	r0, r0, #15
 800062c:	4304      	orrs	r4, r0
 800062e:	0264      	lsls	r4, r4, #9
 8000630:	20ff      	movs	r0, #255	; 0xff
 8000632:	0a64      	lsrs	r4, r4, #9
 8000634:	e724      	b.n	8000480 <__aeabi_fmul+0x8c>
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	08002ee4 	.word	0x08002ee4
 800063c:	f7ffffff 	.word	0xf7ffffff

08000640 <__aeabi_f2iz>:
 8000640:	0241      	lsls	r1, r0, #9
 8000642:	0042      	lsls	r2, r0, #1
 8000644:	0fc3      	lsrs	r3, r0, #31
 8000646:	0a49      	lsrs	r1, r1, #9
 8000648:	2000      	movs	r0, #0
 800064a:	0e12      	lsrs	r2, r2, #24
 800064c:	2a7e      	cmp	r2, #126	; 0x7e
 800064e:	dd03      	ble.n	8000658 <__aeabi_f2iz+0x18>
 8000650:	2a9d      	cmp	r2, #157	; 0x9d
 8000652:	dd02      	ble.n	800065a <__aeabi_f2iz+0x1a>
 8000654:	4a09      	ldr	r2, [pc, #36]	; (800067c <__aeabi_f2iz+0x3c>)
 8000656:	1898      	adds	r0, r3, r2
 8000658:	4770      	bx	lr
 800065a:	2080      	movs	r0, #128	; 0x80
 800065c:	0400      	lsls	r0, r0, #16
 800065e:	4301      	orrs	r1, r0
 8000660:	2a95      	cmp	r2, #149	; 0x95
 8000662:	dc07      	bgt.n	8000674 <__aeabi_f2iz+0x34>
 8000664:	2096      	movs	r0, #150	; 0x96
 8000666:	1a82      	subs	r2, r0, r2
 8000668:	40d1      	lsrs	r1, r2
 800066a:	4248      	negs	r0, r1
 800066c:	2b00      	cmp	r3, #0
 800066e:	d1f3      	bne.n	8000658 <__aeabi_f2iz+0x18>
 8000670:	0008      	movs	r0, r1
 8000672:	e7f1      	b.n	8000658 <__aeabi_f2iz+0x18>
 8000674:	3a96      	subs	r2, #150	; 0x96
 8000676:	4091      	lsls	r1, r2
 8000678:	e7f7      	b.n	800066a <__aeabi_f2iz+0x2a>
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	7fffffff 	.word	0x7fffffff

08000680 <__aeabi_ddiv>:
 8000680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000682:	4657      	mov	r7, sl
 8000684:	464e      	mov	r6, r9
 8000686:	4645      	mov	r5, r8
 8000688:	46de      	mov	lr, fp
 800068a:	b5e0      	push	{r5, r6, r7, lr}
 800068c:	4681      	mov	r9, r0
 800068e:	0005      	movs	r5, r0
 8000690:	030c      	lsls	r4, r1, #12
 8000692:	0048      	lsls	r0, r1, #1
 8000694:	4692      	mov	sl, r2
 8000696:	001f      	movs	r7, r3
 8000698:	b085      	sub	sp, #20
 800069a:	0b24      	lsrs	r4, r4, #12
 800069c:	0d40      	lsrs	r0, r0, #21
 800069e:	0fce      	lsrs	r6, r1, #31
 80006a0:	2800      	cmp	r0, #0
 80006a2:	d100      	bne.n	80006a6 <__aeabi_ddiv+0x26>
 80006a4:	e156      	b.n	8000954 <__aeabi_ddiv+0x2d4>
 80006a6:	4bd4      	ldr	r3, [pc, #848]	; (80009f8 <__aeabi_ddiv+0x378>)
 80006a8:	4298      	cmp	r0, r3
 80006aa:	d100      	bne.n	80006ae <__aeabi_ddiv+0x2e>
 80006ac:	e172      	b.n	8000994 <__aeabi_ddiv+0x314>
 80006ae:	0f6b      	lsrs	r3, r5, #29
 80006b0:	00e4      	lsls	r4, r4, #3
 80006b2:	431c      	orrs	r4, r3
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	041b      	lsls	r3, r3, #16
 80006b8:	4323      	orrs	r3, r4
 80006ba:	4698      	mov	r8, r3
 80006bc:	4bcf      	ldr	r3, [pc, #828]	; (80009fc <__aeabi_ddiv+0x37c>)
 80006be:	00ed      	lsls	r5, r5, #3
 80006c0:	469b      	mov	fp, r3
 80006c2:	2300      	movs	r3, #0
 80006c4:	4699      	mov	r9, r3
 80006c6:	4483      	add	fp, r0
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	033c      	lsls	r4, r7, #12
 80006cc:	007b      	lsls	r3, r7, #1
 80006ce:	4650      	mov	r0, sl
 80006d0:	0b24      	lsrs	r4, r4, #12
 80006d2:	0d5b      	lsrs	r3, r3, #21
 80006d4:	0fff      	lsrs	r7, r7, #31
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d100      	bne.n	80006dc <__aeabi_ddiv+0x5c>
 80006da:	e11f      	b.n	800091c <__aeabi_ddiv+0x29c>
 80006dc:	4ac6      	ldr	r2, [pc, #792]	; (80009f8 <__aeabi_ddiv+0x378>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d100      	bne.n	80006e4 <__aeabi_ddiv+0x64>
 80006e2:	e162      	b.n	80009aa <__aeabi_ddiv+0x32a>
 80006e4:	49c5      	ldr	r1, [pc, #788]	; (80009fc <__aeabi_ddiv+0x37c>)
 80006e6:	0f42      	lsrs	r2, r0, #29
 80006e8:	468c      	mov	ip, r1
 80006ea:	00e4      	lsls	r4, r4, #3
 80006ec:	4659      	mov	r1, fp
 80006ee:	4314      	orrs	r4, r2
 80006f0:	2280      	movs	r2, #128	; 0x80
 80006f2:	4463      	add	r3, ip
 80006f4:	0412      	lsls	r2, r2, #16
 80006f6:	1acb      	subs	r3, r1, r3
 80006f8:	4314      	orrs	r4, r2
 80006fa:	469b      	mov	fp, r3
 80006fc:	00c2      	lsls	r2, r0, #3
 80006fe:	2000      	movs	r0, #0
 8000700:	0033      	movs	r3, r6
 8000702:	407b      	eors	r3, r7
 8000704:	469a      	mov	sl, r3
 8000706:	464b      	mov	r3, r9
 8000708:	2b0f      	cmp	r3, #15
 800070a:	d827      	bhi.n	800075c <__aeabi_ddiv+0xdc>
 800070c:	49bc      	ldr	r1, [pc, #752]	; (8000a00 <__aeabi_ddiv+0x380>)
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	58cb      	ldr	r3, [r1, r3]
 8000712:	469f      	mov	pc, r3
 8000714:	46b2      	mov	sl, r6
 8000716:	9b00      	ldr	r3, [sp, #0]
 8000718:	2b02      	cmp	r3, #2
 800071a:	d016      	beq.n	800074a <__aeabi_ddiv+0xca>
 800071c:	2b03      	cmp	r3, #3
 800071e:	d100      	bne.n	8000722 <__aeabi_ddiv+0xa2>
 8000720:	e28e      	b.n	8000c40 <__aeabi_ddiv+0x5c0>
 8000722:	2b01      	cmp	r3, #1
 8000724:	d000      	beq.n	8000728 <__aeabi_ddiv+0xa8>
 8000726:	e0d9      	b.n	80008dc <__aeabi_ddiv+0x25c>
 8000728:	2300      	movs	r3, #0
 800072a:	2400      	movs	r4, #0
 800072c:	2500      	movs	r5, #0
 800072e:	4652      	mov	r2, sl
 8000730:	051b      	lsls	r3, r3, #20
 8000732:	4323      	orrs	r3, r4
 8000734:	07d2      	lsls	r2, r2, #31
 8000736:	4313      	orrs	r3, r2
 8000738:	0028      	movs	r0, r5
 800073a:	0019      	movs	r1, r3
 800073c:	b005      	add	sp, #20
 800073e:	bcf0      	pop	{r4, r5, r6, r7}
 8000740:	46bb      	mov	fp, r7
 8000742:	46b2      	mov	sl, r6
 8000744:	46a9      	mov	r9, r5
 8000746:	46a0      	mov	r8, r4
 8000748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800074a:	2400      	movs	r4, #0
 800074c:	2500      	movs	r5, #0
 800074e:	4baa      	ldr	r3, [pc, #680]	; (80009f8 <__aeabi_ddiv+0x378>)
 8000750:	e7ed      	b.n	800072e <__aeabi_ddiv+0xae>
 8000752:	46ba      	mov	sl, r7
 8000754:	46a0      	mov	r8, r4
 8000756:	0015      	movs	r5, r2
 8000758:	9000      	str	r0, [sp, #0]
 800075a:	e7dc      	b.n	8000716 <__aeabi_ddiv+0x96>
 800075c:	4544      	cmp	r4, r8
 800075e:	d200      	bcs.n	8000762 <__aeabi_ddiv+0xe2>
 8000760:	e1c7      	b.n	8000af2 <__aeabi_ddiv+0x472>
 8000762:	d100      	bne.n	8000766 <__aeabi_ddiv+0xe6>
 8000764:	e1c2      	b.n	8000aec <__aeabi_ddiv+0x46c>
 8000766:	2301      	movs	r3, #1
 8000768:	425b      	negs	r3, r3
 800076a:	469c      	mov	ip, r3
 800076c:	002e      	movs	r6, r5
 800076e:	4640      	mov	r0, r8
 8000770:	2500      	movs	r5, #0
 8000772:	44e3      	add	fp, ip
 8000774:	0223      	lsls	r3, r4, #8
 8000776:	0e14      	lsrs	r4, r2, #24
 8000778:	431c      	orrs	r4, r3
 800077a:	0c1b      	lsrs	r3, r3, #16
 800077c:	4699      	mov	r9, r3
 800077e:	0423      	lsls	r3, r4, #16
 8000780:	0c1f      	lsrs	r7, r3, #16
 8000782:	0212      	lsls	r2, r2, #8
 8000784:	4649      	mov	r1, r9
 8000786:	9200      	str	r2, [sp, #0]
 8000788:	9701      	str	r7, [sp, #4]
 800078a:	f7ff fd43 	bl	8000214 <__aeabi_uidivmod>
 800078e:	0002      	movs	r2, r0
 8000790:	437a      	muls	r2, r7
 8000792:	040b      	lsls	r3, r1, #16
 8000794:	0c31      	lsrs	r1, r6, #16
 8000796:	4680      	mov	r8, r0
 8000798:	4319      	orrs	r1, r3
 800079a:	428a      	cmp	r2, r1
 800079c:	d907      	bls.n	80007ae <__aeabi_ddiv+0x12e>
 800079e:	2301      	movs	r3, #1
 80007a0:	425b      	negs	r3, r3
 80007a2:	469c      	mov	ip, r3
 80007a4:	1909      	adds	r1, r1, r4
 80007a6:	44e0      	add	r8, ip
 80007a8:	428c      	cmp	r4, r1
 80007aa:	d800      	bhi.n	80007ae <__aeabi_ddiv+0x12e>
 80007ac:	e207      	b.n	8000bbe <__aeabi_ddiv+0x53e>
 80007ae:	1a88      	subs	r0, r1, r2
 80007b0:	4649      	mov	r1, r9
 80007b2:	f7ff fd2f 	bl	8000214 <__aeabi_uidivmod>
 80007b6:	0409      	lsls	r1, r1, #16
 80007b8:	468c      	mov	ip, r1
 80007ba:	0431      	lsls	r1, r6, #16
 80007bc:	4666      	mov	r6, ip
 80007be:	9a01      	ldr	r2, [sp, #4]
 80007c0:	0c09      	lsrs	r1, r1, #16
 80007c2:	4342      	muls	r2, r0
 80007c4:	0003      	movs	r3, r0
 80007c6:	4331      	orrs	r1, r6
 80007c8:	428a      	cmp	r2, r1
 80007ca:	d904      	bls.n	80007d6 <__aeabi_ddiv+0x156>
 80007cc:	1909      	adds	r1, r1, r4
 80007ce:	3b01      	subs	r3, #1
 80007d0:	428c      	cmp	r4, r1
 80007d2:	d800      	bhi.n	80007d6 <__aeabi_ddiv+0x156>
 80007d4:	e1ed      	b.n	8000bb2 <__aeabi_ddiv+0x532>
 80007d6:	1a88      	subs	r0, r1, r2
 80007d8:	4642      	mov	r2, r8
 80007da:	0412      	lsls	r2, r2, #16
 80007dc:	431a      	orrs	r2, r3
 80007de:	4690      	mov	r8, r2
 80007e0:	4641      	mov	r1, r8
 80007e2:	9b00      	ldr	r3, [sp, #0]
 80007e4:	040e      	lsls	r6, r1, #16
 80007e6:	0c1b      	lsrs	r3, r3, #16
 80007e8:	001f      	movs	r7, r3
 80007ea:	9302      	str	r3, [sp, #8]
 80007ec:	9b00      	ldr	r3, [sp, #0]
 80007ee:	0c36      	lsrs	r6, r6, #16
 80007f0:	041b      	lsls	r3, r3, #16
 80007f2:	0c19      	lsrs	r1, r3, #16
 80007f4:	000b      	movs	r3, r1
 80007f6:	4373      	muls	r3, r6
 80007f8:	0c12      	lsrs	r2, r2, #16
 80007fa:	437e      	muls	r6, r7
 80007fc:	9103      	str	r1, [sp, #12]
 80007fe:	4351      	muls	r1, r2
 8000800:	437a      	muls	r2, r7
 8000802:	0c1f      	lsrs	r7, r3, #16
 8000804:	46bc      	mov	ip, r7
 8000806:	1876      	adds	r6, r6, r1
 8000808:	4466      	add	r6, ip
 800080a:	42b1      	cmp	r1, r6
 800080c:	d903      	bls.n	8000816 <__aeabi_ddiv+0x196>
 800080e:	2180      	movs	r1, #128	; 0x80
 8000810:	0249      	lsls	r1, r1, #9
 8000812:	468c      	mov	ip, r1
 8000814:	4462      	add	r2, ip
 8000816:	0c31      	lsrs	r1, r6, #16
 8000818:	188a      	adds	r2, r1, r2
 800081a:	0431      	lsls	r1, r6, #16
 800081c:	041e      	lsls	r6, r3, #16
 800081e:	0c36      	lsrs	r6, r6, #16
 8000820:	198e      	adds	r6, r1, r6
 8000822:	4290      	cmp	r0, r2
 8000824:	d302      	bcc.n	800082c <__aeabi_ddiv+0x1ac>
 8000826:	d112      	bne.n	800084e <__aeabi_ddiv+0x1ce>
 8000828:	42b5      	cmp	r5, r6
 800082a:	d210      	bcs.n	800084e <__aeabi_ddiv+0x1ce>
 800082c:	4643      	mov	r3, r8
 800082e:	1e59      	subs	r1, r3, #1
 8000830:	9b00      	ldr	r3, [sp, #0]
 8000832:	469c      	mov	ip, r3
 8000834:	4465      	add	r5, ip
 8000836:	001f      	movs	r7, r3
 8000838:	429d      	cmp	r5, r3
 800083a:	419b      	sbcs	r3, r3
 800083c:	425b      	negs	r3, r3
 800083e:	191b      	adds	r3, r3, r4
 8000840:	18c0      	adds	r0, r0, r3
 8000842:	4284      	cmp	r4, r0
 8000844:	d200      	bcs.n	8000848 <__aeabi_ddiv+0x1c8>
 8000846:	e1a0      	b.n	8000b8a <__aeabi_ddiv+0x50a>
 8000848:	d100      	bne.n	800084c <__aeabi_ddiv+0x1cc>
 800084a:	e19b      	b.n	8000b84 <__aeabi_ddiv+0x504>
 800084c:	4688      	mov	r8, r1
 800084e:	1bae      	subs	r6, r5, r6
 8000850:	42b5      	cmp	r5, r6
 8000852:	41ad      	sbcs	r5, r5
 8000854:	1a80      	subs	r0, r0, r2
 8000856:	426d      	negs	r5, r5
 8000858:	1b40      	subs	r0, r0, r5
 800085a:	4284      	cmp	r4, r0
 800085c:	d100      	bne.n	8000860 <__aeabi_ddiv+0x1e0>
 800085e:	e1d5      	b.n	8000c0c <__aeabi_ddiv+0x58c>
 8000860:	4649      	mov	r1, r9
 8000862:	f7ff fcd7 	bl	8000214 <__aeabi_uidivmod>
 8000866:	9a01      	ldr	r2, [sp, #4]
 8000868:	040b      	lsls	r3, r1, #16
 800086a:	4342      	muls	r2, r0
 800086c:	0c31      	lsrs	r1, r6, #16
 800086e:	0005      	movs	r5, r0
 8000870:	4319      	orrs	r1, r3
 8000872:	428a      	cmp	r2, r1
 8000874:	d900      	bls.n	8000878 <__aeabi_ddiv+0x1f8>
 8000876:	e16c      	b.n	8000b52 <__aeabi_ddiv+0x4d2>
 8000878:	1a88      	subs	r0, r1, r2
 800087a:	4649      	mov	r1, r9
 800087c:	f7ff fcca 	bl	8000214 <__aeabi_uidivmod>
 8000880:	9a01      	ldr	r2, [sp, #4]
 8000882:	0436      	lsls	r6, r6, #16
 8000884:	4342      	muls	r2, r0
 8000886:	0409      	lsls	r1, r1, #16
 8000888:	0c36      	lsrs	r6, r6, #16
 800088a:	0003      	movs	r3, r0
 800088c:	430e      	orrs	r6, r1
 800088e:	42b2      	cmp	r2, r6
 8000890:	d900      	bls.n	8000894 <__aeabi_ddiv+0x214>
 8000892:	e153      	b.n	8000b3c <__aeabi_ddiv+0x4bc>
 8000894:	9803      	ldr	r0, [sp, #12]
 8000896:	1ab6      	subs	r6, r6, r2
 8000898:	0002      	movs	r2, r0
 800089a:	042d      	lsls	r5, r5, #16
 800089c:	431d      	orrs	r5, r3
 800089e:	9f02      	ldr	r7, [sp, #8]
 80008a0:	042b      	lsls	r3, r5, #16
 80008a2:	0c1b      	lsrs	r3, r3, #16
 80008a4:	435a      	muls	r2, r3
 80008a6:	437b      	muls	r3, r7
 80008a8:	469c      	mov	ip, r3
 80008aa:	0c29      	lsrs	r1, r5, #16
 80008ac:	4348      	muls	r0, r1
 80008ae:	0c13      	lsrs	r3, r2, #16
 80008b0:	4484      	add	ip, r0
 80008b2:	4463      	add	r3, ip
 80008b4:	4379      	muls	r1, r7
 80008b6:	4298      	cmp	r0, r3
 80008b8:	d903      	bls.n	80008c2 <__aeabi_ddiv+0x242>
 80008ba:	2080      	movs	r0, #128	; 0x80
 80008bc:	0240      	lsls	r0, r0, #9
 80008be:	4684      	mov	ip, r0
 80008c0:	4461      	add	r1, ip
 80008c2:	0c18      	lsrs	r0, r3, #16
 80008c4:	0412      	lsls	r2, r2, #16
 80008c6:	041b      	lsls	r3, r3, #16
 80008c8:	0c12      	lsrs	r2, r2, #16
 80008ca:	1841      	adds	r1, r0, r1
 80008cc:	189b      	adds	r3, r3, r2
 80008ce:	428e      	cmp	r6, r1
 80008d0:	d200      	bcs.n	80008d4 <__aeabi_ddiv+0x254>
 80008d2:	e0ff      	b.n	8000ad4 <__aeabi_ddiv+0x454>
 80008d4:	d100      	bne.n	80008d8 <__aeabi_ddiv+0x258>
 80008d6:	e0fa      	b.n	8000ace <__aeabi_ddiv+0x44e>
 80008d8:	2301      	movs	r3, #1
 80008da:	431d      	orrs	r5, r3
 80008dc:	4a49      	ldr	r2, [pc, #292]	; (8000a04 <__aeabi_ddiv+0x384>)
 80008de:	445a      	add	r2, fp
 80008e0:	2a00      	cmp	r2, #0
 80008e2:	dc00      	bgt.n	80008e6 <__aeabi_ddiv+0x266>
 80008e4:	e0aa      	b.n	8000a3c <__aeabi_ddiv+0x3bc>
 80008e6:	076b      	lsls	r3, r5, #29
 80008e8:	d000      	beq.n	80008ec <__aeabi_ddiv+0x26c>
 80008ea:	e13d      	b.n	8000b68 <__aeabi_ddiv+0x4e8>
 80008ec:	08ed      	lsrs	r5, r5, #3
 80008ee:	4643      	mov	r3, r8
 80008f0:	01db      	lsls	r3, r3, #7
 80008f2:	d506      	bpl.n	8000902 <__aeabi_ddiv+0x282>
 80008f4:	4642      	mov	r2, r8
 80008f6:	4b44      	ldr	r3, [pc, #272]	; (8000a08 <__aeabi_ddiv+0x388>)
 80008f8:	401a      	ands	r2, r3
 80008fa:	4690      	mov	r8, r2
 80008fc:	2280      	movs	r2, #128	; 0x80
 80008fe:	00d2      	lsls	r2, r2, #3
 8000900:	445a      	add	r2, fp
 8000902:	4b42      	ldr	r3, [pc, #264]	; (8000a0c <__aeabi_ddiv+0x38c>)
 8000904:	429a      	cmp	r2, r3
 8000906:	dd00      	ble.n	800090a <__aeabi_ddiv+0x28a>
 8000908:	e71f      	b.n	800074a <__aeabi_ddiv+0xca>
 800090a:	4643      	mov	r3, r8
 800090c:	075b      	lsls	r3, r3, #29
 800090e:	431d      	orrs	r5, r3
 8000910:	4643      	mov	r3, r8
 8000912:	0552      	lsls	r2, r2, #21
 8000914:	025c      	lsls	r4, r3, #9
 8000916:	0b24      	lsrs	r4, r4, #12
 8000918:	0d53      	lsrs	r3, r2, #21
 800091a:	e708      	b.n	800072e <__aeabi_ddiv+0xae>
 800091c:	4652      	mov	r2, sl
 800091e:	4322      	orrs	r2, r4
 8000920:	d100      	bne.n	8000924 <__aeabi_ddiv+0x2a4>
 8000922:	e07b      	b.n	8000a1c <__aeabi_ddiv+0x39c>
 8000924:	2c00      	cmp	r4, #0
 8000926:	d100      	bne.n	800092a <__aeabi_ddiv+0x2aa>
 8000928:	e0fa      	b.n	8000b20 <__aeabi_ddiv+0x4a0>
 800092a:	0020      	movs	r0, r4
 800092c:	f000 fcc2 	bl	80012b4 <__clzsi2>
 8000930:	0002      	movs	r2, r0
 8000932:	3a0b      	subs	r2, #11
 8000934:	231d      	movs	r3, #29
 8000936:	0001      	movs	r1, r0
 8000938:	1a9b      	subs	r3, r3, r2
 800093a:	4652      	mov	r2, sl
 800093c:	3908      	subs	r1, #8
 800093e:	40da      	lsrs	r2, r3
 8000940:	408c      	lsls	r4, r1
 8000942:	4314      	orrs	r4, r2
 8000944:	4652      	mov	r2, sl
 8000946:	408a      	lsls	r2, r1
 8000948:	4b31      	ldr	r3, [pc, #196]	; (8000a10 <__aeabi_ddiv+0x390>)
 800094a:	4458      	add	r0, fp
 800094c:	469b      	mov	fp, r3
 800094e:	4483      	add	fp, r0
 8000950:	2000      	movs	r0, #0
 8000952:	e6d5      	b.n	8000700 <__aeabi_ddiv+0x80>
 8000954:	464b      	mov	r3, r9
 8000956:	4323      	orrs	r3, r4
 8000958:	4698      	mov	r8, r3
 800095a:	d044      	beq.n	80009e6 <__aeabi_ddiv+0x366>
 800095c:	2c00      	cmp	r4, #0
 800095e:	d100      	bne.n	8000962 <__aeabi_ddiv+0x2e2>
 8000960:	e0ce      	b.n	8000b00 <__aeabi_ddiv+0x480>
 8000962:	0020      	movs	r0, r4
 8000964:	f000 fca6 	bl	80012b4 <__clzsi2>
 8000968:	0001      	movs	r1, r0
 800096a:	0002      	movs	r2, r0
 800096c:	390b      	subs	r1, #11
 800096e:	231d      	movs	r3, #29
 8000970:	1a5b      	subs	r3, r3, r1
 8000972:	4649      	mov	r1, r9
 8000974:	0010      	movs	r0, r2
 8000976:	40d9      	lsrs	r1, r3
 8000978:	3808      	subs	r0, #8
 800097a:	4084      	lsls	r4, r0
 800097c:	000b      	movs	r3, r1
 800097e:	464d      	mov	r5, r9
 8000980:	4323      	orrs	r3, r4
 8000982:	4698      	mov	r8, r3
 8000984:	4085      	lsls	r5, r0
 8000986:	4823      	ldr	r0, [pc, #140]	; (8000a14 <__aeabi_ddiv+0x394>)
 8000988:	1a83      	subs	r3, r0, r2
 800098a:	469b      	mov	fp, r3
 800098c:	2300      	movs	r3, #0
 800098e:	4699      	mov	r9, r3
 8000990:	9300      	str	r3, [sp, #0]
 8000992:	e69a      	b.n	80006ca <__aeabi_ddiv+0x4a>
 8000994:	464b      	mov	r3, r9
 8000996:	4323      	orrs	r3, r4
 8000998:	4698      	mov	r8, r3
 800099a:	d11d      	bne.n	80009d8 <__aeabi_ddiv+0x358>
 800099c:	2308      	movs	r3, #8
 800099e:	4699      	mov	r9, r3
 80009a0:	3b06      	subs	r3, #6
 80009a2:	2500      	movs	r5, #0
 80009a4:	4683      	mov	fp, r0
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	e68f      	b.n	80006ca <__aeabi_ddiv+0x4a>
 80009aa:	4652      	mov	r2, sl
 80009ac:	4322      	orrs	r2, r4
 80009ae:	d109      	bne.n	80009c4 <__aeabi_ddiv+0x344>
 80009b0:	2302      	movs	r3, #2
 80009b2:	4649      	mov	r1, r9
 80009b4:	4319      	orrs	r1, r3
 80009b6:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <__aeabi_ddiv+0x398>)
 80009b8:	4689      	mov	r9, r1
 80009ba:	469c      	mov	ip, r3
 80009bc:	2400      	movs	r4, #0
 80009be:	2002      	movs	r0, #2
 80009c0:	44e3      	add	fp, ip
 80009c2:	e69d      	b.n	8000700 <__aeabi_ddiv+0x80>
 80009c4:	2303      	movs	r3, #3
 80009c6:	464a      	mov	r2, r9
 80009c8:	431a      	orrs	r2, r3
 80009ca:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <__aeabi_ddiv+0x398>)
 80009cc:	4691      	mov	r9, r2
 80009ce:	469c      	mov	ip, r3
 80009d0:	4652      	mov	r2, sl
 80009d2:	2003      	movs	r0, #3
 80009d4:	44e3      	add	fp, ip
 80009d6:	e693      	b.n	8000700 <__aeabi_ddiv+0x80>
 80009d8:	230c      	movs	r3, #12
 80009da:	4699      	mov	r9, r3
 80009dc:	3b09      	subs	r3, #9
 80009de:	46a0      	mov	r8, r4
 80009e0:	4683      	mov	fp, r0
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	e671      	b.n	80006ca <__aeabi_ddiv+0x4a>
 80009e6:	2304      	movs	r3, #4
 80009e8:	4699      	mov	r9, r3
 80009ea:	2300      	movs	r3, #0
 80009ec:	469b      	mov	fp, r3
 80009ee:	3301      	adds	r3, #1
 80009f0:	2500      	movs	r5, #0
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	e669      	b.n	80006ca <__aeabi_ddiv+0x4a>
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	000007ff 	.word	0x000007ff
 80009fc:	fffffc01 	.word	0xfffffc01
 8000a00:	08002f24 	.word	0x08002f24
 8000a04:	000003ff 	.word	0x000003ff
 8000a08:	feffffff 	.word	0xfeffffff
 8000a0c:	000007fe 	.word	0x000007fe
 8000a10:	000003f3 	.word	0x000003f3
 8000a14:	fffffc0d 	.word	0xfffffc0d
 8000a18:	fffff801 	.word	0xfffff801
 8000a1c:	4649      	mov	r1, r9
 8000a1e:	2301      	movs	r3, #1
 8000a20:	4319      	orrs	r1, r3
 8000a22:	4689      	mov	r9, r1
 8000a24:	2400      	movs	r4, #0
 8000a26:	2001      	movs	r0, #1
 8000a28:	e66a      	b.n	8000700 <__aeabi_ddiv+0x80>
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	2480      	movs	r4, #128	; 0x80
 8000a2e:	469a      	mov	sl, r3
 8000a30:	2500      	movs	r5, #0
 8000a32:	4b8a      	ldr	r3, [pc, #552]	; (8000c5c <__aeabi_ddiv+0x5dc>)
 8000a34:	0324      	lsls	r4, r4, #12
 8000a36:	e67a      	b.n	800072e <__aeabi_ddiv+0xae>
 8000a38:	2501      	movs	r5, #1
 8000a3a:	426d      	negs	r5, r5
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	1a9b      	subs	r3, r3, r2
 8000a40:	2b38      	cmp	r3, #56	; 0x38
 8000a42:	dd00      	ble.n	8000a46 <__aeabi_ddiv+0x3c6>
 8000a44:	e670      	b.n	8000728 <__aeabi_ddiv+0xa8>
 8000a46:	2b1f      	cmp	r3, #31
 8000a48:	dc00      	bgt.n	8000a4c <__aeabi_ddiv+0x3cc>
 8000a4a:	e0bf      	b.n	8000bcc <__aeabi_ddiv+0x54c>
 8000a4c:	211f      	movs	r1, #31
 8000a4e:	4249      	negs	r1, r1
 8000a50:	1a8a      	subs	r2, r1, r2
 8000a52:	4641      	mov	r1, r8
 8000a54:	40d1      	lsrs	r1, r2
 8000a56:	000a      	movs	r2, r1
 8000a58:	2b20      	cmp	r3, #32
 8000a5a:	d004      	beq.n	8000a66 <__aeabi_ddiv+0x3e6>
 8000a5c:	4641      	mov	r1, r8
 8000a5e:	4b80      	ldr	r3, [pc, #512]	; (8000c60 <__aeabi_ddiv+0x5e0>)
 8000a60:	445b      	add	r3, fp
 8000a62:	4099      	lsls	r1, r3
 8000a64:	430d      	orrs	r5, r1
 8000a66:	1e6b      	subs	r3, r5, #1
 8000a68:	419d      	sbcs	r5, r3
 8000a6a:	2307      	movs	r3, #7
 8000a6c:	432a      	orrs	r2, r5
 8000a6e:	001d      	movs	r5, r3
 8000a70:	2400      	movs	r4, #0
 8000a72:	4015      	ands	r5, r2
 8000a74:	4213      	tst	r3, r2
 8000a76:	d100      	bne.n	8000a7a <__aeabi_ddiv+0x3fa>
 8000a78:	e0d4      	b.n	8000c24 <__aeabi_ddiv+0x5a4>
 8000a7a:	210f      	movs	r1, #15
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	4011      	ands	r1, r2
 8000a80:	2904      	cmp	r1, #4
 8000a82:	d100      	bne.n	8000a86 <__aeabi_ddiv+0x406>
 8000a84:	e0cb      	b.n	8000c1e <__aeabi_ddiv+0x59e>
 8000a86:	1d11      	adds	r1, r2, #4
 8000a88:	4291      	cmp	r1, r2
 8000a8a:	4192      	sbcs	r2, r2
 8000a8c:	4252      	negs	r2, r2
 8000a8e:	189b      	adds	r3, r3, r2
 8000a90:	000a      	movs	r2, r1
 8000a92:	0219      	lsls	r1, r3, #8
 8000a94:	d400      	bmi.n	8000a98 <__aeabi_ddiv+0x418>
 8000a96:	e0c2      	b.n	8000c1e <__aeabi_ddiv+0x59e>
 8000a98:	2301      	movs	r3, #1
 8000a9a:	2400      	movs	r4, #0
 8000a9c:	2500      	movs	r5, #0
 8000a9e:	e646      	b.n	800072e <__aeabi_ddiv+0xae>
 8000aa0:	2380      	movs	r3, #128	; 0x80
 8000aa2:	4641      	mov	r1, r8
 8000aa4:	031b      	lsls	r3, r3, #12
 8000aa6:	4219      	tst	r1, r3
 8000aa8:	d008      	beq.n	8000abc <__aeabi_ddiv+0x43c>
 8000aaa:	421c      	tst	r4, r3
 8000aac:	d106      	bne.n	8000abc <__aeabi_ddiv+0x43c>
 8000aae:	431c      	orrs	r4, r3
 8000ab0:	0324      	lsls	r4, r4, #12
 8000ab2:	46ba      	mov	sl, r7
 8000ab4:	0015      	movs	r5, r2
 8000ab6:	4b69      	ldr	r3, [pc, #420]	; (8000c5c <__aeabi_ddiv+0x5dc>)
 8000ab8:	0b24      	lsrs	r4, r4, #12
 8000aba:	e638      	b.n	800072e <__aeabi_ddiv+0xae>
 8000abc:	2480      	movs	r4, #128	; 0x80
 8000abe:	4643      	mov	r3, r8
 8000ac0:	0324      	lsls	r4, r4, #12
 8000ac2:	431c      	orrs	r4, r3
 8000ac4:	0324      	lsls	r4, r4, #12
 8000ac6:	46b2      	mov	sl, r6
 8000ac8:	4b64      	ldr	r3, [pc, #400]	; (8000c5c <__aeabi_ddiv+0x5dc>)
 8000aca:	0b24      	lsrs	r4, r4, #12
 8000acc:	e62f      	b.n	800072e <__aeabi_ddiv+0xae>
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_ddiv+0x454>
 8000ad2:	e703      	b.n	80008dc <__aeabi_ddiv+0x25c>
 8000ad4:	19a6      	adds	r6, r4, r6
 8000ad6:	1e68      	subs	r0, r5, #1
 8000ad8:	42a6      	cmp	r6, r4
 8000ada:	d200      	bcs.n	8000ade <__aeabi_ddiv+0x45e>
 8000adc:	e08d      	b.n	8000bfa <__aeabi_ddiv+0x57a>
 8000ade:	428e      	cmp	r6, r1
 8000ae0:	d200      	bcs.n	8000ae4 <__aeabi_ddiv+0x464>
 8000ae2:	e0a3      	b.n	8000c2c <__aeabi_ddiv+0x5ac>
 8000ae4:	d100      	bne.n	8000ae8 <__aeabi_ddiv+0x468>
 8000ae6:	e0b3      	b.n	8000c50 <__aeabi_ddiv+0x5d0>
 8000ae8:	0005      	movs	r5, r0
 8000aea:	e6f5      	b.n	80008d8 <__aeabi_ddiv+0x258>
 8000aec:	42aa      	cmp	r2, r5
 8000aee:	d900      	bls.n	8000af2 <__aeabi_ddiv+0x472>
 8000af0:	e639      	b.n	8000766 <__aeabi_ddiv+0xe6>
 8000af2:	4643      	mov	r3, r8
 8000af4:	07de      	lsls	r6, r3, #31
 8000af6:	0858      	lsrs	r0, r3, #1
 8000af8:	086b      	lsrs	r3, r5, #1
 8000afa:	431e      	orrs	r6, r3
 8000afc:	07ed      	lsls	r5, r5, #31
 8000afe:	e639      	b.n	8000774 <__aeabi_ddiv+0xf4>
 8000b00:	4648      	mov	r0, r9
 8000b02:	f000 fbd7 	bl	80012b4 <__clzsi2>
 8000b06:	0001      	movs	r1, r0
 8000b08:	0002      	movs	r2, r0
 8000b0a:	3115      	adds	r1, #21
 8000b0c:	3220      	adds	r2, #32
 8000b0e:	291c      	cmp	r1, #28
 8000b10:	dc00      	bgt.n	8000b14 <__aeabi_ddiv+0x494>
 8000b12:	e72c      	b.n	800096e <__aeabi_ddiv+0x2ee>
 8000b14:	464b      	mov	r3, r9
 8000b16:	3808      	subs	r0, #8
 8000b18:	4083      	lsls	r3, r0
 8000b1a:	2500      	movs	r5, #0
 8000b1c:	4698      	mov	r8, r3
 8000b1e:	e732      	b.n	8000986 <__aeabi_ddiv+0x306>
 8000b20:	f000 fbc8 	bl	80012b4 <__clzsi2>
 8000b24:	0003      	movs	r3, r0
 8000b26:	001a      	movs	r2, r3
 8000b28:	3215      	adds	r2, #21
 8000b2a:	3020      	adds	r0, #32
 8000b2c:	2a1c      	cmp	r2, #28
 8000b2e:	dc00      	bgt.n	8000b32 <__aeabi_ddiv+0x4b2>
 8000b30:	e700      	b.n	8000934 <__aeabi_ddiv+0x2b4>
 8000b32:	4654      	mov	r4, sl
 8000b34:	3b08      	subs	r3, #8
 8000b36:	2200      	movs	r2, #0
 8000b38:	409c      	lsls	r4, r3
 8000b3a:	e705      	b.n	8000948 <__aeabi_ddiv+0x2c8>
 8000b3c:	1936      	adds	r6, r6, r4
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	42b4      	cmp	r4, r6
 8000b42:	d900      	bls.n	8000b46 <__aeabi_ddiv+0x4c6>
 8000b44:	e6a6      	b.n	8000894 <__aeabi_ddiv+0x214>
 8000b46:	42b2      	cmp	r2, r6
 8000b48:	d800      	bhi.n	8000b4c <__aeabi_ddiv+0x4cc>
 8000b4a:	e6a3      	b.n	8000894 <__aeabi_ddiv+0x214>
 8000b4c:	1e83      	subs	r3, r0, #2
 8000b4e:	1936      	adds	r6, r6, r4
 8000b50:	e6a0      	b.n	8000894 <__aeabi_ddiv+0x214>
 8000b52:	1909      	adds	r1, r1, r4
 8000b54:	3d01      	subs	r5, #1
 8000b56:	428c      	cmp	r4, r1
 8000b58:	d900      	bls.n	8000b5c <__aeabi_ddiv+0x4dc>
 8000b5a:	e68d      	b.n	8000878 <__aeabi_ddiv+0x1f8>
 8000b5c:	428a      	cmp	r2, r1
 8000b5e:	d800      	bhi.n	8000b62 <__aeabi_ddiv+0x4e2>
 8000b60:	e68a      	b.n	8000878 <__aeabi_ddiv+0x1f8>
 8000b62:	1e85      	subs	r5, r0, #2
 8000b64:	1909      	adds	r1, r1, r4
 8000b66:	e687      	b.n	8000878 <__aeabi_ddiv+0x1f8>
 8000b68:	230f      	movs	r3, #15
 8000b6a:	402b      	ands	r3, r5
 8000b6c:	2b04      	cmp	r3, #4
 8000b6e:	d100      	bne.n	8000b72 <__aeabi_ddiv+0x4f2>
 8000b70:	e6bc      	b.n	80008ec <__aeabi_ddiv+0x26c>
 8000b72:	2305      	movs	r3, #5
 8000b74:	425b      	negs	r3, r3
 8000b76:	42ab      	cmp	r3, r5
 8000b78:	419b      	sbcs	r3, r3
 8000b7a:	3504      	adds	r5, #4
 8000b7c:	425b      	negs	r3, r3
 8000b7e:	08ed      	lsrs	r5, r5, #3
 8000b80:	4498      	add	r8, r3
 8000b82:	e6b4      	b.n	80008ee <__aeabi_ddiv+0x26e>
 8000b84:	42af      	cmp	r7, r5
 8000b86:	d900      	bls.n	8000b8a <__aeabi_ddiv+0x50a>
 8000b88:	e660      	b.n	800084c <__aeabi_ddiv+0x1cc>
 8000b8a:	4282      	cmp	r2, r0
 8000b8c:	d804      	bhi.n	8000b98 <__aeabi_ddiv+0x518>
 8000b8e:	d000      	beq.n	8000b92 <__aeabi_ddiv+0x512>
 8000b90:	e65c      	b.n	800084c <__aeabi_ddiv+0x1cc>
 8000b92:	42ae      	cmp	r6, r5
 8000b94:	d800      	bhi.n	8000b98 <__aeabi_ddiv+0x518>
 8000b96:	e659      	b.n	800084c <__aeabi_ddiv+0x1cc>
 8000b98:	2302      	movs	r3, #2
 8000b9a:	425b      	negs	r3, r3
 8000b9c:	469c      	mov	ip, r3
 8000b9e:	9b00      	ldr	r3, [sp, #0]
 8000ba0:	44e0      	add	r8, ip
 8000ba2:	469c      	mov	ip, r3
 8000ba4:	4465      	add	r5, ip
 8000ba6:	429d      	cmp	r5, r3
 8000ba8:	419b      	sbcs	r3, r3
 8000baa:	425b      	negs	r3, r3
 8000bac:	191b      	adds	r3, r3, r4
 8000bae:	18c0      	adds	r0, r0, r3
 8000bb0:	e64d      	b.n	800084e <__aeabi_ddiv+0x1ce>
 8000bb2:	428a      	cmp	r2, r1
 8000bb4:	d800      	bhi.n	8000bb8 <__aeabi_ddiv+0x538>
 8000bb6:	e60e      	b.n	80007d6 <__aeabi_ddiv+0x156>
 8000bb8:	1e83      	subs	r3, r0, #2
 8000bba:	1909      	adds	r1, r1, r4
 8000bbc:	e60b      	b.n	80007d6 <__aeabi_ddiv+0x156>
 8000bbe:	428a      	cmp	r2, r1
 8000bc0:	d800      	bhi.n	8000bc4 <__aeabi_ddiv+0x544>
 8000bc2:	e5f4      	b.n	80007ae <__aeabi_ddiv+0x12e>
 8000bc4:	1e83      	subs	r3, r0, #2
 8000bc6:	4698      	mov	r8, r3
 8000bc8:	1909      	adds	r1, r1, r4
 8000bca:	e5f0      	b.n	80007ae <__aeabi_ddiv+0x12e>
 8000bcc:	4925      	ldr	r1, [pc, #148]	; (8000c64 <__aeabi_ddiv+0x5e4>)
 8000bce:	0028      	movs	r0, r5
 8000bd0:	4459      	add	r1, fp
 8000bd2:	408d      	lsls	r5, r1
 8000bd4:	4642      	mov	r2, r8
 8000bd6:	408a      	lsls	r2, r1
 8000bd8:	1e69      	subs	r1, r5, #1
 8000bda:	418d      	sbcs	r5, r1
 8000bdc:	4641      	mov	r1, r8
 8000bde:	40d8      	lsrs	r0, r3
 8000be0:	40d9      	lsrs	r1, r3
 8000be2:	4302      	orrs	r2, r0
 8000be4:	432a      	orrs	r2, r5
 8000be6:	000b      	movs	r3, r1
 8000be8:	0751      	lsls	r1, r2, #29
 8000bea:	d100      	bne.n	8000bee <__aeabi_ddiv+0x56e>
 8000bec:	e751      	b.n	8000a92 <__aeabi_ddiv+0x412>
 8000bee:	210f      	movs	r1, #15
 8000bf0:	4011      	ands	r1, r2
 8000bf2:	2904      	cmp	r1, #4
 8000bf4:	d000      	beq.n	8000bf8 <__aeabi_ddiv+0x578>
 8000bf6:	e746      	b.n	8000a86 <__aeabi_ddiv+0x406>
 8000bf8:	e74b      	b.n	8000a92 <__aeabi_ddiv+0x412>
 8000bfa:	0005      	movs	r5, r0
 8000bfc:	428e      	cmp	r6, r1
 8000bfe:	d000      	beq.n	8000c02 <__aeabi_ddiv+0x582>
 8000c00:	e66a      	b.n	80008d8 <__aeabi_ddiv+0x258>
 8000c02:	9a00      	ldr	r2, [sp, #0]
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d000      	beq.n	8000c0a <__aeabi_ddiv+0x58a>
 8000c08:	e666      	b.n	80008d8 <__aeabi_ddiv+0x258>
 8000c0a:	e667      	b.n	80008dc <__aeabi_ddiv+0x25c>
 8000c0c:	4a16      	ldr	r2, [pc, #88]	; (8000c68 <__aeabi_ddiv+0x5e8>)
 8000c0e:	445a      	add	r2, fp
 8000c10:	2a00      	cmp	r2, #0
 8000c12:	dc00      	bgt.n	8000c16 <__aeabi_ddiv+0x596>
 8000c14:	e710      	b.n	8000a38 <__aeabi_ddiv+0x3b8>
 8000c16:	2301      	movs	r3, #1
 8000c18:	2500      	movs	r5, #0
 8000c1a:	4498      	add	r8, r3
 8000c1c:	e667      	b.n	80008ee <__aeabi_ddiv+0x26e>
 8000c1e:	075d      	lsls	r5, r3, #29
 8000c20:	025b      	lsls	r3, r3, #9
 8000c22:	0b1c      	lsrs	r4, r3, #12
 8000c24:	08d2      	lsrs	r2, r2, #3
 8000c26:	2300      	movs	r3, #0
 8000c28:	4315      	orrs	r5, r2
 8000c2a:	e580      	b.n	800072e <__aeabi_ddiv+0xae>
 8000c2c:	9800      	ldr	r0, [sp, #0]
 8000c2e:	3d02      	subs	r5, #2
 8000c30:	0042      	lsls	r2, r0, #1
 8000c32:	4282      	cmp	r2, r0
 8000c34:	41bf      	sbcs	r7, r7
 8000c36:	427f      	negs	r7, r7
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	1936      	adds	r6, r6, r4
 8000c3c:	9200      	str	r2, [sp, #0]
 8000c3e:	e7dd      	b.n	8000bfc <__aeabi_ddiv+0x57c>
 8000c40:	2480      	movs	r4, #128	; 0x80
 8000c42:	4643      	mov	r3, r8
 8000c44:	0324      	lsls	r4, r4, #12
 8000c46:	431c      	orrs	r4, r3
 8000c48:	0324      	lsls	r4, r4, #12
 8000c4a:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <__aeabi_ddiv+0x5dc>)
 8000c4c:	0b24      	lsrs	r4, r4, #12
 8000c4e:	e56e      	b.n	800072e <__aeabi_ddiv+0xae>
 8000c50:	9a00      	ldr	r2, [sp, #0]
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d3ea      	bcc.n	8000c2c <__aeabi_ddiv+0x5ac>
 8000c56:	0005      	movs	r5, r0
 8000c58:	e7d3      	b.n	8000c02 <__aeabi_ddiv+0x582>
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	000007ff 	.word	0x000007ff
 8000c60:	0000043e 	.word	0x0000043e
 8000c64:	0000041e 	.word	0x0000041e
 8000c68:	000003ff 	.word	0x000003ff

08000c6c <__aeabi_dmul>:
 8000c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c6e:	4657      	mov	r7, sl
 8000c70:	464e      	mov	r6, r9
 8000c72:	4645      	mov	r5, r8
 8000c74:	46de      	mov	lr, fp
 8000c76:	b5e0      	push	{r5, r6, r7, lr}
 8000c78:	4698      	mov	r8, r3
 8000c7a:	030c      	lsls	r4, r1, #12
 8000c7c:	004b      	lsls	r3, r1, #1
 8000c7e:	0006      	movs	r6, r0
 8000c80:	4692      	mov	sl, r2
 8000c82:	b087      	sub	sp, #28
 8000c84:	0b24      	lsrs	r4, r4, #12
 8000c86:	0d5b      	lsrs	r3, r3, #21
 8000c88:	0fcf      	lsrs	r7, r1, #31
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d100      	bne.n	8000c90 <__aeabi_dmul+0x24>
 8000c8e:	e15c      	b.n	8000f4a <__aeabi_dmul+0x2de>
 8000c90:	4ad9      	ldr	r2, [pc, #868]	; (8000ff8 <__aeabi_dmul+0x38c>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d100      	bne.n	8000c98 <__aeabi_dmul+0x2c>
 8000c96:	e175      	b.n	8000f84 <__aeabi_dmul+0x318>
 8000c98:	0f42      	lsrs	r2, r0, #29
 8000c9a:	00e4      	lsls	r4, r4, #3
 8000c9c:	4314      	orrs	r4, r2
 8000c9e:	2280      	movs	r2, #128	; 0x80
 8000ca0:	0412      	lsls	r2, r2, #16
 8000ca2:	4314      	orrs	r4, r2
 8000ca4:	4ad5      	ldr	r2, [pc, #852]	; (8000ffc <__aeabi_dmul+0x390>)
 8000ca6:	00c5      	lsls	r5, r0, #3
 8000ca8:	4694      	mov	ip, r2
 8000caa:	4463      	add	r3, ip
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	2300      	movs	r3, #0
 8000cb0:	4699      	mov	r9, r3
 8000cb2:	469b      	mov	fp, r3
 8000cb4:	4643      	mov	r3, r8
 8000cb6:	4642      	mov	r2, r8
 8000cb8:	031e      	lsls	r6, r3, #12
 8000cba:	0fd2      	lsrs	r2, r2, #31
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	4650      	mov	r0, sl
 8000cc0:	4690      	mov	r8, r2
 8000cc2:	0b36      	lsrs	r6, r6, #12
 8000cc4:	0d5b      	lsrs	r3, r3, #21
 8000cc6:	d100      	bne.n	8000cca <__aeabi_dmul+0x5e>
 8000cc8:	e120      	b.n	8000f0c <__aeabi_dmul+0x2a0>
 8000cca:	4acb      	ldr	r2, [pc, #812]	; (8000ff8 <__aeabi_dmul+0x38c>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d100      	bne.n	8000cd2 <__aeabi_dmul+0x66>
 8000cd0:	e162      	b.n	8000f98 <__aeabi_dmul+0x32c>
 8000cd2:	49ca      	ldr	r1, [pc, #808]	; (8000ffc <__aeabi_dmul+0x390>)
 8000cd4:	0f42      	lsrs	r2, r0, #29
 8000cd6:	468c      	mov	ip, r1
 8000cd8:	9900      	ldr	r1, [sp, #0]
 8000cda:	4463      	add	r3, ip
 8000cdc:	00f6      	lsls	r6, r6, #3
 8000cde:	468c      	mov	ip, r1
 8000ce0:	4316      	orrs	r6, r2
 8000ce2:	2280      	movs	r2, #128	; 0x80
 8000ce4:	449c      	add	ip, r3
 8000ce6:	0412      	lsls	r2, r2, #16
 8000ce8:	4663      	mov	r3, ip
 8000cea:	4316      	orrs	r6, r2
 8000cec:	00c2      	lsls	r2, r0, #3
 8000cee:	2000      	movs	r0, #0
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	9900      	ldr	r1, [sp, #0]
 8000cf4:	4643      	mov	r3, r8
 8000cf6:	3101      	adds	r1, #1
 8000cf8:	468c      	mov	ip, r1
 8000cfa:	4649      	mov	r1, r9
 8000cfc:	407b      	eors	r3, r7
 8000cfe:	9301      	str	r3, [sp, #4]
 8000d00:	290f      	cmp	r1, #15
 8000d02:	d826      	bhi.n	8000d52 <__aeabi_dmul+0xe6>
 8000d04:	4bbe      	ldr	r3, [pc, #760]	; (8001000 <__aeabi_dmul+0x394>)
 8000d06:	0089      	lsls	r1, r1, #2
 8000d08:	5859      	ldr	r1, [r3, r1]
 8000d0a:	468f      	mov	pc, r1
 8000d0c:	4643      	mov	r3, r8
 8000d0e:	9301      	str	r3, [sp, #4]
 8000d10:	0034      	movs	r4, r6
 8000d12:	0015      	movs	r5, r2
 8000d14:	4683      	mov	fp, r0
 8000d16:	465b      	mov	r3, fp
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d016      	beq.n	8000d4a <__aeabi_dmul+0xde>
 8000d1c:	2b03      	cmp	r3, #3
 8000d1e:	d100      	bne.n	8000d22 <__aeabi_dmul+0xb6>
 8000d20:	e203      	b.n	800112a <__aeabi_dmul+0x4be>
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d000      	beq.n	8000d28 <__aeabi_dmul+0xbc>
 8000d26:	e0cd      	b.n	8000ec4 <__aeabi_dmul+0x258>
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2400      	movs	r4, #0
 8000d2c:	2500      	movs	r5, #0
 8000d2e:	9b01      	ldr	r3, [sp, #4]
 8000d30:	0512      	lsls	r2, r2, #20
 8000d32:	4322      	orrs	r2, r4
 8000d34:	07db      	lsls	r3, r3, #31
 8000d36:	431a      	orrs	r2, r3
 8000d38:	0028      	movs	r0, r5
 8000d3a:	0011      	movs	r1, r2
 8000d3c:	b007      	add	sp, #28
 8000d3e:	bcf0      	pop	{r4, r5, r6, r7}
 8000d40:	46bb      	mov	fp, r7
 8000d42:	46b2      	mov	sl, r6
 8000d44:	46a9      	mov	r9, r5
 8000d46:	46a0      	mov	r8, r4
 8000d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d4a:	2400      	movs	r4, #0
 8000d4c:	2500      	movs	r5, #0
 8000d4e:	4aaa      	ldr	r2, [pc, #680]	; (8000ff8 <__aeabi_dmul+0x38c>)
 8000d50:	e7ed      	b.n	8000d2e <__aeabi_dmul+0xc2>
 8000d52:	0c28      	lsrs	r0, r5, #16
 8000d54:	042d      	lsls	r5, r5, #16
 8000d56:	0c2d      	lsrs	r5, r5, #16
 8000d58:	002b      	movs	r3, r5
 8000d5a:	0c11      	lsrs	r1, r2, #16
 8000d5c:	0412      	lsls	r2, r2, #16
 8000d5e:	0c12      	lsrs	r2, r2, #16
 8000d60:	4353      	muls	r3, r2
 8000d62:	4698      	mov	r8, r3
 8000d64:	0013      	movs	r3, r2
 8000d66:	002f      	movs	r7, r5
 8000d68:	4343      	muls	r3, r0
 8000d6a:	4699      	mov	r9, r3
 8000d6c:	434f      	muls	r7, r1
 8000d6e:	444f      	add	r7, r9
 8000d70:	46bb      	mov	fp, r7
 8000d72:	4647      	mov	r7, r8
 8000d74:	000b      	movs	r3, r1
 8000d76:	0c3f      	lsrs	r7, r7, #16
 8000d78:	46ba      	mov	sl, r7
 8000d7a:	4343      	muls	r3, r0
 8000d7c:	44da      	add	sl, fp
 8000d7e:	9302      	str	r3, [sp, #8]
 8000d80:	45d1      	cmp	r9, sl
 8000d82:	d904      	bls.n	8000d8e <__aeabi_dmul+0x122>
 8000d84:	2780      	movs	r7, #128	; 0x80
 8000d86:	027f      	lsls	r7, r7, #9
 8000d88:	46b9      	mov	r9, r7
 8000d8a:	444b      	add	r3, r9
 8000d8c:	9302      	str	r3, [sp, #8]
 8000d8e:	4653      	mov	r3, sl
 8000d90:	0c1b      	lsrs	r3, r3, #16
 8000d92:	469b      	mov	fp, r3
 8000d94:	4653      	mov	r3, sl
 8000d96:	041f      	lsls	r7, r3, #16
 8000d98:	4643      	mov	r3, r8
 8000d9a:	041b      	lsls	r3, r3, #16
 8000d9c:	0c1b      	lsrs	r3, r3, #16
 8000d9e:	4698      	mov	r8, r3
 8000da0:	003b      	movs	r3, r7
 8000da2:	4443      	add	r3, r8
 8000da4:	9304      	str	r3, [sp, #16]
 8000da6:	0c33      	lsrs	r3, r6, #16
 8000da8:	0436      	lsls	r6, r6, #16
 8000daa:	0c36      	lsrs	r6, r6, #16
 8000dac:	4698      	mov	r8, r3
 8000dae:	0033      	movs	r3, r6
 8000db0:	4343      	muls	r3, r0
 8000db2:	4699      	mov	r9, r3
 8000db4:	4643      	mov	r3, r8
 8000db6:	4343      	muls	r3, r0
 8000db8:	002f      	movs	r7, r5
 8000dba:	469a      	mov	sl, r3
 8000dbc:	4643      	mov	r3, r8
 8000dbe:	4377      	muls	r7, r6
 8000dc0:	435d      	muls	r5, r3
 8000dc2:	0c38      	lsrs	r0, r7, #16
 8000dc4:	444d      	add	r5, r9
 8000dc6:	1945      	adds	r5, r0, r5
 8000dc8:	45a9      	cmp	r9, r5
 8000dca:	d903      	bls.n	8000dd4 <__aeabi_dmul+0x168>
 8000dcc:	2380      	movs	r3, #128	; 0x80
 8000dce:	025b      	lsls	r3, r3, #9
 8000dd0:	4699      	mov	r9, r3
 8000dd2:	44ca      	add	sl, r9
 8000dd4:	043f      	lsls	r7, r7, #16
 8000dd6:	0c28      	lsrs	r0, r5, #16
 8000dd8:	0c3f      	lsrs	r7, r7, #16
 8000dda:	042d      	lsls	r5, r5, #16
 8000ddc:	19ed      	adds	r5, r5, r7
 8000dde:	0c27      	lsrs	r7, r4, #16
 8000de0:	0424      	lsls	r4, r4, #16
 8000de2:	0c24      	lsrs	r4, r4, #16
 8000de4:	0003      	movs	r3, r0
 8000de6:	0020      	movs	r0, r4
 8000de8:	4350      	muls	r0, r2
 8000dea:	437a      	muls	r2, r7
 8000dec:	4691      	mov	r9, r2
 8000dee:	003a      	movs	r2, r7
 8000df0:	4453      	add	r3, sl
 8000df2:	9305      	str	r3, [sp, #20]
 8000df4:	0c03      	lsrs	r3, r0, #16
 8000df6:	469a      	mov	sl, r3
 8000df8:	434a      	muls	r2, r1
 8000dfa:	4361      	muls	r1, r4
 8000dfc:	4449      	add	r1, r9
 8000dfe:	4451      	add	r1, sl
 8000e00:	44ab      	add	fp, r5
 8000e02:	4589      	cmp	r9, r1
 8000e04:	d903      	bls.n	8000e0e <__aeabi_dmul+0x1a2>
 8000e06:	2380      	movs	r3, #128	; 0x80
 8000e08:	025b      	lsls	r3, r3, #9
 8000e0a:	4699      	mov	r9, r3
 8000e0c:	444a      	add	r2, r9
 8000e0e:	0400      	lsls	r0, r0, #16
 8000e10:	0c0b      	lsrs	r3, r1, #16
 8000e12:	0c00      	lsrs	r0, r0, #16
 8000e14:	0409      	lsls	r1, r1, #16
 8000e16:	1809      	adds	r1, r1, r0
 8000e18:	0020      	movs	r0, r4
 8000e1a:	4699      	mov	r9, r3
 8000e1c:	4643      	mov	r3, r8
 8000e1e:	4370      	muls	r0, r6
 8000e20:	435c      	muls	r4, r3
 8000e22:	437e      	muls	r6, r7
 8000e24:	435f      	muls	r7, r3
 8000e26:	0c03      	lsrs	r3, r0, #16
 8000e28:	4698      	mov	r8, r3
 8000e2a:	19a4      	adds	r4, r4, r6
 8000e2c:	4444      	add	r4, r8
 8000e2e:	444a      	add	r2, r9
 8000e30:	9703      	str	r7, [sp, #12]
 8000e32:	42a6      	cmp	r6, r4
 8000e34:	d904      	bls.n	8000e40 <__aeabi_dmul+0x1d4>
 8000e36:	2380      	movs	r3, #128	; 0x80
 8000e38:	025b      	lsls	r3, r3, #9
 8000e3a:	4698      	mov	r8, r3
 8000e3c:	4447      	add	r7, r8
 8000e3e:	9703      	str	r7, [sp, #12]
 8000e40:	0423      	lsls	r3, r4, #16
 8000e42:	9e02      	ldr	r6, [sp, #8]
 8000e44:	469a      	mov	sl, r3
 8000e46:	9b05      	ldr	r3, [sp, #20]
 8000e48:	445e      	add	r6, fp
 8000e4a:	4698      	mov	r8, r3
 8000e4c:	42ae      	cmp	r6, r5
 8000e4e:	41ad      	sbcs	r5, r5
 8000e50:	1876      	adds	r6, r6, r1
 8000e52:	428e      	cmp	r6, r1
 8000e54:	4189      	sbcs	r1, r1
 8000e56:	0400      	lsls	r0, r0, #16
 8000e58:	0c00      	lsrs	r0, r0, #16
 8000e5a:	4450      	add	r0, sl
 8000e5c:	4440      	add	r0, r8
 8000e5e:	426d      	negs	r5, r5
 8000e60:	1947      	adds	r7, r0, r5
 8000e62:	46b8      	mov	r8, r7
 8000e64:	4693      	mov	fp, r2
 8000e66:	4249      	negs	r1, r1
 8000e68:	4689      	mov	r9, r1
 8000e6a:	44c3      	add	fp, r8
 8000e6c:	44d9      	add	r9, fp
 8000e6e:	4298      	cmp	r0, r3
 8000e70:	4180      	sbcs	r0, r0
 8000e72:	45a8      	cmp	r8, r5
 8000e74:	41ad      	sbcs	r5, r5
 8000e76:	4593      	cmp	fp, r2
 8000e78:	4192      	sbcs	r2, r2
 8000e7a:	4589      	cmp	r9, r1
 8000e7c:	4189      	sbcs	r1, r1
 8000e7e:	426d      	negs	r5, r5
 8000e80:	4240      	negs	r0, r0
 8000e82:	4328      	orrs	r0, r5
 8000e84:	0c24      	lsrs	r4, r4, #16
 8000e86:	4252      	negs	r2, r2
 8000e88:	4249      	negs	r1, r1
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	9b03      	ldr	r3, [sp, #12]
 8000e8e:	1900      	adds	r0, r0, r4
 8000e90:	1880      	adds	r0, r0, r2
 8000e92:	18c7      	adds	r7, r0, r3
 8000e94:	464b      	mov	r3, r9
 8000e96:	0ddc      	lsrs	r4, r3, #23
 8000e98:	9b04      	ldr	r3, [sp, #16]
 8000e9a:	0275      	lsls	r5, r6, #9
 8000e9c:	431d      	orrs	r5, r3
 8000e9e:	1e6a      	subs	r2, r5, #1
 8000ea0:	4195      	sbcs	r5, r2
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	0df6      	lsrs	r6, r6, #23
 8000ea6:	027f      	lsls	r7, r7, #9
 8000ea8:	4335      	orrs	r5, r6
 8000eaa:	025a      	lsls	r2, r3, #9
 8000eac:	433c      	orrs	r4, r7
 8000eae:	4315      	orrs	r5, r2
 8000eb0:	01fb      	lsls	r3, r7, #7
 8000eb2:	d400      	bmi.n	8000eb6 <__aeabi_dmul+0x24a>
 8000eb4:	e11c      	b.n	80010f0 <__aeabi_dmul+0x484>
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	086a      	lsrs	r2, r5, #1
 8000eba:	400d      	ands	r5, r1
 8000ebc:	4315      	orrs	r5, r2
 8000ebe:	07e2      	lsls	r2, r4, #31
 8000ec0:	4315      	orrs	r5, r2
 8000ec2:	0864      	lsrs	r4, r4, #1
 8000ec4:	494f      	ldr	r1, [pc, #316]	; (8001004 <__aeabi_dmul+0x398>)
 8000ec6:	4461      	add	r1, ip
 8000ec8:	2900      	cmp	r1, #0
 8000eca:	dc00      	bgt.n	8000ece <__aeabi_dmul+0x262>
 8000ecc:	e0b0      	b.n	8001030 <__aeabi_dmul+0x3c4>
 8000ece:	076b      	lsls	r3, r5, #29
 8000ed0:	d009      	beq.n	8000ee6 <__aeabi_dmul+0x27a>
 8000ed2:	220f      	movs	r2, #15
 8000ed4:	402a      	ands	r2, r5
 8000ed6:	2a04      	cmp	r2, #4
 8000ed8:	d005      	beq.n	8000ee6 <__aeabi_dmul+0x27a>
 8000eda:	1d2a      	adds	r2, r5, #4
 8000edc:	42aa      	cmp	r2, r5
 8000ede:	41ad      	sbcs	r5, r5
 8000ee0:	426d      	negs	r5, r5
 8000ee2:	1964      	adds	r4, r4, r5
 8000ee4:	0015      	movs	r5, r2
 8000ee6:	01e3      	lsls	r3, r4, #7
 8000ee8:	d504      	bpl.n	8000ef4 <__aeabi_dmul+0x288>
 8000eea:	2180      	movs	r1, #128	; 0x80
 8000eec:	4a46      	ldr	r2, [pc, #280]	; (8001008 <__aeabi_dmul+0x39c>)
 8000eee:	00c9      	lsls	r1, r1, #3
 8000ef0:	4014      	ands	r4, r2
 8000ef2:	4461      	add	r1, ip
 8000ef4:	4a45      	ldr	r2, [pc, #276]	; (800100c <__aeabi_dmul+0x3a0>)
 8000ef6:	4291      	cmp	r1, r2
 8000ef8:	dd00      	ble.n	8000efc <__aeabi_dmul+0x290>
 8000efa:	e726      	b.n	8000d4a <__aeabi_dmul+0xde>
 8000efc:	0762      	lsls	r2, r4, #29
 8000efe:	08ed      	lsrs	r5, r5, #3
 8000f00:	0264      	lsls	r4, r4, #9
 8000f02:	0549      	lsls	r1, r1, #21
 8000f04:	4315      	orrs	r5, r2
 8000f06:	0b24      	lsrs	r4, r4, #12
 8000f08:	0d4a      	lsrs	r2, r1, #21
 8000f0a:	e710      	b.n	8000d2e <__aeabi_dmul+0xc2>
 8000f0c:	4652      	mov	r2, sl
 8000f0e:	4332      	orrs	r2, r6
 8000f10:	d100      	bne.n	8000f14 <__aeabi_dmul+0x2a8>
 8000f12:	e07f      	b.n	8001014 <__aeabi_dmul+0x3a8>
 8000f14:	2e00      	cmp	r6, #0
 8000f16:	d100      	bne.n	8000f1a <__aeabi_dmul+0x2ae>
 8000f18:	e0dc      	b.n	80010d4 <__aeabi_dmul+0x468>
 8000f1a:	0030      	movs	r0, r6
 8000f1c:	f000 f9ca 	bl	80012b4 <__clzsi2>
 8000f20:	0002      	movs	r2, r0
 8000f22:	3a0b      	subs	r2, #11
 8000f24:	231d      	movs	r3, #29
 8000f26:	0001      	movs	r1, r0
 8000f28:	1a9b      	subs	r3, r3, r2
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	3908      	subs	r1, #8
 8000f2e:	40da      	lsrs	r2, r3
 8000f30:	408e      	lsls	r6, r1
 8000f32:	4316      	orrs	r6, r2
 8000f34:	4652      	mov	r2, sl
 8000f36:	408a      	lsls	r2, r1
 8000f38:	9b00      	ldr	r3, [sp, #0]
 8000f3a:	4935      	ldr	r1, [pc, #212]	; (8001010 <__aeabi_dmul+0x3a4>)
 8000f3c:	1a18      	subs	r0, r3, r0
 8000f3e:	0003      	movs	r3, r0
 8000f40:	468c      	mov	ip, r1
 8000f42:	4463      	add	r3, ip
 8000f44:	2000      	movs	r0, #0
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	e6d3      	b.n	8000cf2 <__aeabi_dmul+0x86>
 8000f4a:	0025      	movs	r5, r4
 8000f4c:	4305      	orrs	r5, r0
 8000f4e:	d04a      	beq.n	8000fe6 <__aeabi_dmul+0x37a>
 8000f50:	2c00      	cmp	r4, #0
 8000f52:	d100      	bne.n	8000f56 <__aeabi_dmul+0x2ea>
 8000f54:	e0b0      	b.n	80010b8 <__aeabi_dmul+0x44c>
 8000f56:	0020      	movs	r0, r4
 8000f58:	f000 f9ac 	bl	80012b4 <__clzsi2>
 8000f5c:	0001      	movs	r1, r0
 8000f5e:	0002      	movs	r2, r0
 8000f60:	390b      	subs	r1, #11
 8000f62:	231d      	movs	r3, #29
 8000f64:	0010      	movs	r0, r2
 8000f66:	1a5b      	subs	r3, r3, r1
 8000f68:	0031      	movs	r1, r6
 8000f6a:	0035      	movs	r5, r6
 8000f6c:	3808      	subs	r0, #8
 8000f6e:	4084      	lsls	r4, r0
 8000f70:	40d9      	lsrs	r1, r3
 8000f72:	4085      	lsls	r5, r0
 8000f74:	430c      	orrs	r4, r1
 8000f76:	4826      	ldr	r0, [pc, #152]	; (8001010 <__aeabi_dmul+0x3a4>)
 8000f78:	1a83      	subs	r3, r0, r2
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	4699      	mov	r9, r3
 8000f80:	469b      	mov	fp, r3
 8000f82:	e697      	b.n	8000cb4 <__aeabi_dmul+0x48>
 8000f84:	0005      	movs	r5, r0
 8000f86:	4325      	orrs	r5, r4
 8000f88:	d126      	bne.n	8000fd8 <__aeabi_dmul+0x36c>
 8000f8a:	2208      	movs	r2, #8
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	2302      	movs	r3, #2
 8000f90:	2400      	movs	r4, #0
 8000f92:	4691      	mov	r9, r2
 8000f94:	469b      	mov	fp, r3
 8000f96:	e68d      	b.n	8000cb4 <__aeabi_dmul+0x48>
 8000f98:	4652      	mov	r2, sl
 8000f9a:	9b00      	ldr	r3, [sp, #0]
 8000f9c:	4332      	orrs	r2, r6
 8000f9e:	d110      	bne.n	8000fc2 <__aeabi_dmul+0x356>
 8000fa0:	4915      	ldr	r1, [pc, #84]	; (8000ff8 <__aeabi_dmul+0x38c>)
 8000fa2:	2600      	movs	r6, #0
 8000fa4:	468c      	mov	ip, r1
 8000fa6:	4463      	add	r3, ip
 8000fa8:	4649      	mov	r1, r9
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	2302      	movs	r3, #2
 8000fae:	4319      	orrs	r1, r3
 8000fb0:	4689      	mov	r9, r1
 8000fb2:	2002      	movs	r0, #2
 8000fb4:	e69d      	b.n	8000cf2 <__aeabi_dmul+0x86>
 8000fb6:	465b      	mov	r3, fp
 8000fb8:	9701      	str	r7, [sp, #4]
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d000      	beq.n	8000fc0 <__aeabi_dmul+0x354>
 8000fbe:	e6ad      	b.n	8000d1c <__aeabi_dmul+0xb0>
 8000fc0:	e6c3      	b.n	8000d4a <__aeabi_dmul+0xde>
 8000fc2:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <__aeabi_dmul+0x38c>)
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	4694      	mov	ip, r2
 8000fc8:	4463      	add	r3, ip
 8000fca:	464a      	mov	r2, r9
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	2303      	movs	r3, #3
 8000fd0:	431a      	orrs	r2, r3
 8000fd2:	4691      	mov	r9, r2
 8000fd4:	4652      	mov	r2, sl
 8000fd6:	e68c      	b.n	8000cf2 <__aeabi_dmul+0x86>
 8000fd8:	220c      	movs	r2, #12
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	2303      	movs	r3, #3
 8000fde:	0005      	movs	r5, r0
 8000fe0:	4691      	mov	r9, r2
 8000fe2:	469b      	mov	fp, r3
 8000fe4:	e666      	b.n	8000cb4 <__aeabi_dmul+0x48>
 8000fe6:	2304      	movs	r3, #4
 8000fe8:	4699      	mov	r9, r3
 8000fea:	2300      	movs	r3, #0
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	2400      	movs	r4, #0
 8000ff2:	469b      	mov	fp, r3
 8000ff4:	e65e      	b.n	8000cb4 <__aeabi_dmul+0x48>
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	000007ff 	.word	0x000007ff
 8000ffc:	fffffc01 	.word	0xfffffc01
 8001000:	08002f64 	.word	0x08002f64
 8001004:	000003ff 	.word	0x000003ff
 8001008:	feffffff 	.word	0xfeffffff
 800100c:	000007fe 	.word	0x000007fe
 8001010:	fffffc0d 	.word	0xfffffc0d
 8001014:	4649      	mov	r1, r9
 8001016:	2301      	movs	r3, #1
 8001018:	4319      	orrs	r1, r3
 800101a:	4689      	mov	r9, r1
 800101c:	2600      	movs	r6, #0
 800101e:	2001      	movs	r0, #1
 8001020:	e667      	b.n	8000cf2 <__aeabi_dmul+0x86>
 8001022:	2300      	movs	r3, #0
 8001024:	2480      	movs	r4, #128	; 0x80
 8001026:	2500      	movs	r5, #0
 8001028:	4a43      	ldr	r2, [pc, #268]	; (8001138 <__aeabi_dmul+0x4cc>)
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	0324      	lsls	r4, r4, #12
 800102e:	e67e      	b.n	8000d2e <__aeabi_dmul+0xc2>
 8001030:	2001      	movs	r0, #1
 8001032:	1a40      	subs	r0, r0, r1
 8001034:	2838      	cmp	r0, #56	; 0x38
 8001036:	dd00      	ble.n	800103a <__aeabi_dmul+0x3ce>
 8001038:	e676      	b.n	8000d28 <__aeabi_dmul+0xbc>
 800103a:	281f      	cmp	r0, #31
 800103c:	dd5b      	ble.n	80010f6 <__aeabi_dmul+0x48a>
 800103e:	221f      	movs	r2, #31
 8001040:	0023      	movs	r3, r4
 8001042:	4252      	negs	r2, r2
 8001044:	1a51      	subs	r1, r2, r1
 8001046:	40cb      	lsrs	r3, r1
 8001048:	0019      	movs	r1, r3
 800104a:	2820      	cmp	r0, #32
 800104c:	d003      	beq.n	8001056 <__aeabi_dmul+0x3ea>
 800104e:	4a3b      	ldr	r2, [pc, #236]	; (800113c <__aeabi_dmul+0x4d0>)
 8001050:	4462      	add	r2, ip
 8001052:	4094      	lsls	r4, r2
 8001054:	4325      	orrs	r5, r4
 8001056:	1e6a      	subs	r2, r5, #1
 8001058:	4195      	sbcs	r5, r2
 800105a:	002a      	movs	r2, r5
 800105c:	430a      	orrs	r2, r1
 800105e:	2107      	movs	r1, #7
 8001060:	000d      	movs	r5, r1
 8001062:	2400      	movs	r4, #0
 8001064:	4015      	ands	r5, r2
 8001066:	4211      	tst	r1, r2
 8001068:	d05b      	beq.n	8001122 <__aeabi_dmul+0x4b6>
 800106a:	210f      	movs	r1, #15
 800106c:	2400      	movs	r4, #0
 800106e:	4011      	ands	r1, r2
 8001070:	2904      	cmp	r1, #4
 8001072:	d053      	beq.n	800111c <__aeabi_dmul+0x4b0>
 8001074:	1d11      	adds	r1, r2, #4
 8001076:	4291      	cmp	r1, r2
 8001078:	4192      	sbcs	r2, r2
 800107a:	4252      	negs	r2, r2
 800107c:	18a4      	adds	r4, r4, r2
 800107e:	000a      	movs	r2, r1
 8001080:	0223      	lsls	r3, r4, #8
 8001082:	d54b      	bpl.n	800111c <__aeabi_dmul+0x4b0>
 8001084:	2201      	movs	r2, #1
 8001086:	2400      	movs	r4, #0
 8001088:	2500      	movs	r5, #0
 800108a:	e650      	b.n	8000d2e <__aeabi_dmul+0xc2>
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	031b      	lsls	r3, r3, #12
 8001090:	421c      	tst	r4, r3
 8001092:	d009      	beq.n	80010a8 <__aeabi_dmul+0x43c>
 8001094:	421e      	tst	r6, r3
 8001096:	d107      	bne.n	80010a8 <__aeabi_dmul+0x43c>
 8001098:	4333      	orrs	r3, r6
 800109a:	031c      	lsls	r4, r3, #12
 800109c:	4643      	mov	r3, r8
 800109e:	0015      	movs	r5, r2
 80010a0:	0b24      	lsrs	r4, r4, #12
 80010a2:	4a25      	ldr	r2, [pc, #148]	; (8001138 <__aeabi_dmul+0x4cc>)
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	e642      	b.n	8000d2e <__aeabi_dmul+0xc2>
 80010a8:	2280      	movs	r2, #128	; 0x80
 80010aa:	0312      	lsls	r2, r2, #12
 80010ac:	4314      	orrs	r4, r2
 80010ae:	0324      	lsls	r4, r4, #12
 80010b0:	4a21      	ldr	r2, [pc, #132]	; (8001138 <__aeabi_dmul+0x4cc>)
 80010b2:	0b24      	lsrs	r4, r4, #12
 80010b4:	9701      	str	r7, [sp, #4]
 80010b6:	e63a      	b.n	8000d2e <__aeabi_dmul+0xc2>
 80010b8:	f000 f8fc 	bl	80012b4 <__clzsi2>
 80010bc:	0001      	movs	r1, r0
 80010be:	0002      	movs	r2, r0
 80010c0:	3115      	adds	r1, #21
 80010c2:	3220      	adds	r2, #32
 80010c4:	291c      	cmp	r1, #28
 80010c6:	dc00      	bgt.n	80010ca <__aeabi_dmul+0x45e>
 80010c8:	e74b      	b.n	8000f62 <__aeabi_dmul+0x2f6>
 80010ca:	0034      	movs	r4, r6
 80010cc:	3808      	subs	r0, #8
 80010ce:	2500      	movs	r5, #0
 80010d0:	4084      	lsls	r4, r0
 80010d2:	e750      	b.n	8000f76 <__aeabi_dmul+0x30a>
 80010d4:	f000 f8ee 	bl	80012b4 <__clzsi2>
 80010d8:	0003      	movs	r3, r0
 80010da:	001a      	movs	r2, r3
 80010dc:	3215      	adds	r2, #21
 80010de:	3020      	adds	r0, #32
 80010e0:	2a1c      	cmp	r2, #28
 80010e2:	dc00      	bgt.n	80010e6 <__aeabi_dmul+0x47a>
 80010e4:	e71e      	b.n	8000f24 <__aeabi_dmul+0x2b8>
 80010e6:	4656      	mov	r6, sl
 80010e8:	3b08      	subs	r3, #8
 80010ea:	2200      	movs	r2, #0
 80010ec:	409e      	lsls	r6, r3
 80010ee:	e723      	b.n	8000f38 <__aeabi_dmul+0x2cc>
 80010f0:	9b00      	ldr	r3, [sp, #0]
 80010f2:	469c      	mov	ip, r3
 80010f4:	e6e6      	b.n	8000ec4 <__aeabi_dmul+0x258>
 80010f6:	4912      	ldr	r1, [pc, #72]	; (8001140 <__aeabi_dmul+0x4d4>)
 80010f8:	0022      	movs	r2, r4
 80010fa:	4461      	add	r1, ip
 80010fc:	002e      	movs	r6, r5
 80010fe:	408d      	lsls	r5, r1
 8001100:	408a      	lsls	r2, r1
 8001102:	40c6      	lsrs	r6, r0
 8001104:	1e69      	subs	r1, r5, #1
 8001106:	418d      	sbcs	r5, r1
 8001108:	4332      	orrs	r2, r6
 800110a:	432a      	orrs	r2, r5
 800110c:	40c4      	lsrs	r4, r0
 800110e:	0753      	lsls	r3, r2, #29
 8001110:	d0b6      	beq.n	8001080 <__aeabi_dmul+0x414>
 8001112:	210f      	movs	r1, #15
 8001114:	4011      	ands	r1, r2
 8001116:	2904      	cmp	r1, #4
 8001118:	d1ac      	bne.n	8001074 <__aeabi_dmul+0x408>
 800111a:	e7b1      	b.n	8001080 <__aeabi_dmul+0x414>
 800111c:	0765      	lsls	r5, r4, #29
 800111e:	0264      	lsls	r4, r4, #9
 8001120:	0b24      	lsrs	r4, r4, #12
 8001122:	08d2      	lsrs	r2, r2, #3
 8001124:	4315      	orrs	r5, r2
 8001126:	2200      	movs	r2, #0
 8001128:	e601      	b.n	8000d2e <__aeabi_dmul+0xc2>
 800112a:	2280      	movs	r2, #128	; 0x80
 800112c:	0312      	lsls	r2, r2, #12
 800112e:	4314      	orrs	r4, r2
 8001130:	0324      	lsls	r4, r4, #12
 8001132:	4a01      	ldr	r2, [pc, #4]	; (8001138 <__aeabi_dmul+0x4cc>)
 8001134:	0b24      	lsrs	r4, r4, #12
 8001136:	e5fa      	b.n	8000d2e <__aeabi_dmul+0xc2>
 8001138:	000007ff 	.word	0x000007ff
 800113c:	0000043e 	.word	0x0000043e
 8001140:	0000041e 	.word	0x0000041e

08001144 <__aeabi_i2d>:
 8001144:	b570      	push	{r4, r5, r6, lr}
 8001146:	2800      	cmp	r0, #0
 8001148:	d016      	beq.n	8001178 <__aeabi_i2d+0x34>
 800114a:	17c3      	asrs	r3, r0, #31
 800114c:	18c5      	adds	r5, r0, r3
 800114e:	405d      	eors	r5, r3
 8001150:	0fc4      	lsrs	r4, r0, #31
 8001152:	0028      	movs	r0, r5
 8001154:	f000 f8ae 	bl	80012b4 <__clzsi2>
 8001158:	4a11      	ldr	r2, [pc, #68]	; (80011a0 <__aeabi_i2d+0x5c>)
 800115a:	1a12      	subs	r2, r2, r0
 800115c:	280a      	cmp	r0, #10
 800115e:	dc16      	bgt.n	800118e <__aeabi_i2d+0x4a>
 8001160:	0003      	movs	r3, r0
 8001162:	002e      	movs	r6, r5
 8001164:	3315      	adds	r3, #21
 8001166:	409e      	lsls	r6, r3
 8001168:	230b      	movs	r3, #11
 800116a:	1a18      	subs	r0, r3, r0
 800116c:	40c5      	lsrs	r5, r0
 800116e:	0552      	lsls	r2, r2, #21
 8001170:	032d      	lsls	r5, r5, #12
 8001172:	0b2d      	lsrs	r5, r5, #12
 8001174:	0d53      	lsrs	r3, r2, #21
 8001176:	e003      	b.n	8001180 <__aeabi_i2d+0x3c>
 8001178:	2400      	movs	r4, #0
 800117a:	2300      	movs	r3, #0
 800117c:	2500      	movs	r5, #0
 800117e:	2600      	movs	r6, #0
 8001180:	051b      	lsls	r3, r3, #20
 8001182:	432b      	orrs	r3, r5
 8001184:	07e4      	lsls	r4, r4, #31
 8001186:	4323      	orrs	r3, r4
 8001188:	0030      	movs	r0, r6
 800118a:	0019      	movs	r1, r3
 800118c:	bd70      	pop	{r4, r5, r6, pc}
 800118e:	380b      	subs	r0, #11
 8001190:	4085      	lsls	r5, r0
 8001192:	0552      	lsls	r2, r2, #21
 8001194:	032d      	lsls	r5, r5, #12
 8001196:	2600      	movs	r6, #0
 8001198:	0b2d      	lsrs	r5, r5, #12
 800119a:	0d53      	lsrs	r3, r2, #21
 800119c:	e7f0      	b.n	8001180 <__aeabi_i2d+0x3c>
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	0000041e 	.word	0x0000041e

080011a4 <__aeabi_d2f>:
 80011a4:	0002      	movs	r2, r0
 80011a6:	004b      	lsls	r3, r1, #1
 80011a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011aa:	0d5b      	lsrs	r3, r3, #21
 80011ac:	030c      	lsls	r4, r1, #12
 80011ae:	4e3d      	ldr	r6, [pc, #244]	; (80012a4 <__aeabi_d2f+0x100>)
 80011b0:	0a64      	lsrs	r4, r4, #9
 80011b2:	0f40      	lsrs	r0, r0, #29
 80011b4:	1c5f      	adds	r7, r3, #1
 80011b6:	0fc9      	lsrs	r1, r1, #31
 80011b8:	4304      	orrs	r4, r0
 80011ba:	00d5      	lsls	r5, r2, #3
 80011bc:	4237      	tst	r7, r6
 80011be:	d00a      	beq.n	80011d6 <__aeabi_d2f+0x32>
 80011c0:	4839      	ldr	r0, [pc, #228]	; (80012a8 <__aeabi_d2f+0x104>)
 80011c2:	181e      	adds	r6, r3, r0
 80011c4:	2efe      	cmp	r6, #254	; 0xfe
 80011c6:	dd16      	ble.n	80011f6 <__aeabi_d2f+0x52>
 80011c8:	20ff      	movs	r0, #255	; 0xff
 80011ca:	2400      	movs	r4, #0
 80011cc:	05c0      	lsls	r0, r0, #23
 80011ce:	4320      	orrs	r0, r4
 80011d0:	07c9      	lsls	r1, r1, #31
 80011d2:	4308      	orrs	r0, r1
 80011d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d106      	bne.n	80011e8 <__aeabi_d2f+0x44>
 80011da:	432c      	orrs	r4, r5
 80011dc:	d026      	beq.n	800122c <__aeabi_d2f+0x88>
 80011de:	2205      	movs	r2, #5
 80011e0:	0192      	lsls	r2, r2, #6
 80011e2:	0a54      	lsrs	r4, r2, #9
 80011e4:	b2d8      	uxtb	r0, r3
 80011e6:	e7f1      	b.n	80011cc <__aeabi_d2f+0x28>
 80011e8:	4325      	orrs	r5, r4
 80011ea:	d0ed      	beq.n	80011c8 <__aeabi_d2f+0x24>
 80011ec:	2080      	movs	r0, #128	; 0x80
 80011ee:	03c0      	lsls	r0, r0, #15
 80011f0:	4304      	orrs	r4, r0
 80011f2:	20ff      	movs	r0, #255	; 0xff
 80011f4:	e7ea      	b.n	80011cc <__aeabi_d2f+0x28>
 80011f6:	2e00      	cmp	r6, #0
 80011f8:	dd1b      	ble.n	8001232 <__aeabi_d2f+0x8e>
 80011fa:	0192      	lsls	r2, r2, #6
 80011fc:	1e53      	subs	r3, r2, #1
 80011fe:	419a      	sbcs	r2, r3
 8001200:	00e4      	lsls	r4, r4, #3
 8001202:	0f6d      	lsrs	r5, r5, #29
 8001204:	4322      	orrs	r2, r4
 8001206:	432a      	orrs	r2, r5
 8001208:	0753      	lsls	r3, r2, #29
 800120a:	d048      	beq.n	800129e <__aeabi_d2f+0xfa>
 800120c:	230f      	movs	r3, #15
 800120e:	4013      	ands	r3, r2
 8001210:	2b04      	cmp	r3, #4
 8001212:	d000      	beq.n	8001216 <__aeabi_d2f+0x72>
 8001214:	3204      	adds	r2, #4
 8001216:	2380      	movs	r3, #128	; 0x80
 8001218:	04db      	lsls	r3, r3, #19
 800121a:	4013      	ands	r3, r2
 800121c:	d03f      	beq.n	800129e <__aeabi_d2f+0xfa>
 800121e:	1c70      	adds	r0, r6, #1
 8001220:	2efe      	cmp	r6, #254	; 0xfe
 8001222:	d0d1      	beq.n	80011c8 <__aeabi_d2f+0x24>
 8001224:	0192      	lsls	r2, r2, #6
 8001226:	0a54      	lsrs	r4, r2, #9
 8001228:	b2c0      	uxtb	r0, r0
 800122a:	e7cf      	b.n	80011cc <__aeabi_d2f+0x28>
 800122c:	2000      	movs	r0, #0
 800122e:	2400      	movs	r4, #0
 8001230:	e7cc      	b.n	80011cc <__aeabi_d2f+0x28>
 8001232:	0032      	movs	r2, r6
 8001234:	3217      	adds	r2, #23
 8001236:	db22      	blt.n	800127e <__aeabi_d2f+0xda>
 8001238:	2080      	movs	r0, #128	; 0x80
 800123a:	0400      	lsls	r0, r0, #16
 800123c:	4320      	orrs	r0, r4
 800123e:	241e      	movs	r4, #30
 8001240:	1ba4      	subs	r4, r4, r6
 8001242:	2c1f      	cmp	r4, #31
 8001244:	dd1d      	ble.n	8001282 <__aeabi_d2f+0xde>
 8001246:	2202      	movs	r2, #2
 8001248:	4252      	negs	r2, r2
 800124a:	1b96      	subs	r6, r2, r6
 800124c:	0002      	movs	r2, r0
 800124e:	40f2      	lsrs	r2, r6
 8001250:	0016      	movs	r6, r2
 8001252:	2c20      	cmp	r4, #32
 8001254:	d004      	beq.n	8001260 <__aeabi_d2f+0xbc>
 8001256:	4a15      	ldr	r2, [pc, #84]	; (80012ac <__aeabi_d2f+0x108>)
 8001258:	4694      	mov	ip, r2
 800125a:	4463      	add	r3, ip
 800125c:	4098      	lsls	r0, r3
 800125e:	4305      	orrs	r5, r0
 8001260:	002a      	movs	r2, r5
 8001262:	1e53      	subs	r3, r2, #1
 8001264:	419a      	sbcs	r2, r3
 8001266:	4332      	orrs	r2, r6
 8001268:	2600      	movs	r6, #0
 800126a:	0753      	lsls	r3, r2, #29
 800126c:	d1ce      	bne.n	800120c <__aeabi_d2f+0x68>
 800126e:	2480      	movs	r4, #128	; 0x80
 8001270:	0013      	movs	r3, r2
 8001272:	04e4      	lsls	r4, r4, #19
 8001274:	2001      	movs	r0, #1
 8001276:	4023      	ands	r3, r4
 8001278:	4222      	tst	r2, r4
 800127a:	d1d3      	bne.n	8001224 <__aeabi_d2f+0x80>
 800127c:	e7b0      	b.n	80011e0 <__aeabi_d2f+0x3c>
 800127e:	2300      	movs	r3, #0
 8001280:	e7ad      	b.n	80011de <__aeabi_d2f+0x3a>
 8001282:	4a0b      	ldr	r2, [pc, #44]	; (80012b0 <__aeabi_d2f+0x10c>)
 8001284:	4694      	mov	ip, r2
 8001286:	002a      	movs	r2, r5
 8001288:	40e2      	lsrs	r2, r4
 800128a:	0014      	movs	r4, r2
 800128c:	002a      	movs	r2, r5
 800128e:	4463      	add	r3, ip
 8001290:	409a      	lsls	r2, r3
 8001292:	4098      	lsls	r0, r3
 8001294:	1e55      	subs	r5, r2, #1
 8001296:	41aa      	sbcs	r2, r5
 8001298:	4302      	orrs	r2, r0
 800129a:	4322      	orrs	r2, r4
 800129c:	e7e4      	b.n	8001268 <__aeabi_d2f+0xc4>
 800129e:	0033      	movs	r3, r6
 80012a0:	e79e      	b.n	80011e0 <__aeabi_d2f+0x3c>
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	000007fe 	.word	0x000007fe
 80012a8:	fffffc80 	.word	0xfffffc80
 80012ac:	fffffca2 	.word	0xfffffca2
 80012b0:	fffffc82 	.word	0xfffffc82

080012b4 <__clzsi2>:
 80012b4:	211c      	movs	r1, #28
 80012b6:	2301      	movs	r3, #1
 80012b8:	041b      	lsls	r3, r3, #16
 80012ba:	4298      	cmp	r0, r3
 80012bc:	d301      	bcc.n	80012c2 <__clzsi2+0xe>
 80012be:	0c00      	lsrs	r0, r0, #16
 80012c0:	3910      	subs	r1, #16
 80012c2:	0a1b      	lsrs	r3, r3, #8
 80012c4:	4298      	cmp	r0, r3
 80012c6:	d301      	bcc.n	80012cc <__clzsi2+0x18>
 80012c8:	0a00      	lsrs	r0, r0, #8
 80012ca:	3908      	subs	r1, #8
 80012cc:	091b      	lsrs	r3, r3, #4
 80012ce:	4298      	cmp	r0, r3
 80012d0:	d301      	bcc.n	80012d6 <__clzsi2+0x22>
 80012d2:	0900      	lsrs	r0, r0, #4
 80012d4:	3904      	subs	r1, #4
 80012d6:	a202      	add	r2, pc, #8	; (adr r2, 80012e0 <__clzsi2+0x2c>)
 80012d8:	5c10      	ldrb	r0, [r2, r0]
 80012da:	1840      	adds	r0, r0, r1
 80012dc:	4770      	bx	lr
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	02020304 	.word	0x02020304
 80012e4:	01010101 	.word	0x01010101
	...

080012f0 <LL_ADC_SetCommonFrequencyMode>:
  *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_HIGH
  *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_LOW
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonFrequencyMode(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonFrequencyMode)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_LFMEN, CommonFrequencyMode);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a05      	ldr	r2, [pc, #20]	; (8001314 <LL_ADC_SetCommonFrequencyMode+0x24>)
 8001300:	401a      	ands	r2, r3
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	431a      	orrs	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	601a      	str	r2, [r3, #0]
}
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	46bd      	mov	sp, r7
 800130e:	b002      	add	sp, #8
 8001310:	bd80      	pop	{r7, pc}
 8001312:	46c0      	nop			; (mov r8, r8)
 8001314:	fdffffff 	.word	0xfdffffff

08001318 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTime)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	2207      	movs	r2, #7
 8001328:	4393      	bics	r3, r2
 800132a:	001a      	movs	r2, r3
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	431a      	orrs	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	615a      	str	r2, [r3, #20]
}
 8001334:	46c0      	nop			; (mov r8, r8)
 8001336:	46bd      	mov	sp, r7
 8001338:	b002      	add	sp, #8
 800133a:	bd80      	pop	{r7, pc}

0800133c <LL_ADC_REG_SetSequencerScanDirection>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	2204      	movs	r2, #4
 800134c:	4393      	bics	r3, r2
 800134e:	001a      	movs	r2, r3
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	431a      	orrs	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	60da      	str	r2, [r3, #12]
}
 8001358:	46c0      	nop			; (mov r8, r8)
 800135a:	46bd      	mov	sp, r7
 800135c:	b002      	add	sp, #8
 800135e:	bd80      	pop	{r7, pc}

08001360 <LL_ADC_REG_SetSequencerChAdd>:
  *         
  *         (1) On STM32L0, parameter not available on all devices: only on STM32L053xx, STM32L063xx, STM32L073xx, STM32L083xx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	035b      	lsls	r3, r3, #13
 8001372:	0b5b      	lsrs	r3, r3, #13
 8001374:	431a      	orrs	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	629a      	str	r2, [r3, #40]	; 0x28
}
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	46bd      	mov	sp, r7
 800137e:	b002      	add	sp, #8
 8001380:	bd80      	pop	{r7, pc}

08001382 <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_DISABLE
  *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
 800138a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	2201      	movs	r2, #1
 8001392:	4393      	bics	r3, r2
 8001394:	001a      	movs	r2, r3
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	431a      	orrs	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	611a      	str	r2, [r3, #16]
}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	46bd      	mov	sp, r7
 80013a2:	b002      	add	sp, #8
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	4a05      	ldr	r2, [pc, #20]	; (80013cc <LL_ADC_EnableInternalRegulator+0x24>)
 80013b6:	4013      	ands	r3, r2
 80013b8:	2280      	movs	r2, #128	; 0x80
 80013ba:	0552      	lsls	r2, r2, #21
 80013bc:	431a      	orrs	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	46bd      	mov	sp, r7
 80013c6:	b002      	add	sp, #8
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	6fffffe8 	.word	0x6fffffe8

080013d0 <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2204      	movs	r2, #4
 80013de:	4393      	bics	r3, r2
 80013e0:	001a      	movs	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	605a      	str	r2, [r3, #4]
}
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	46bd      	mov	sp, r7
 80013ea:	b002      	add	sp, #8
 80013ec:	bd80      	pop	{r7, pc}

080013ee <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSEQIE        LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2208      	movs	r2, #8
 80013fc:	4393      	bics	r3, r2
 80013fe:	001a      	movs	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	605a      	str	r2, [r3, #4]
}
 8001404:	46c0      	nop			; (mov r8, r8)
 8001406:	46bd      	mov	sp, r7
 8001408:	b002      	add	sp, #8
 800140a:	bd80      	pop	{r7, pc}

0800140c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001414:	4b07      	ldr	r3, [pc, #28]	; (8001434 <LL_APB2_GRP1_EnableClock+0x28>)
 8001416:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <LL_APB2_GRP1_EnableClock+0x28>)
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	430a      	orrs	r2, r1
 800141e:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <LL_APB2_GRP1_EnableClock+0x28>)
 8001422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	4013      	ands	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800142a:	68fb      	ldr	r3, [r7, #12]
}
 800142c:	46c0      	nop			; (mov r8, r8)
 800142e:	46bd      	mov	sp, r7
 8001430:	b004      	add	sp, #16
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40021000 	.word	0x40021000

08001438 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8001440:	4b07      	ldr	r3, [pc, #28]	; (8001460 <LL_IOP_GRP1_EnableClock+0x28>)
 8001442:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <LL_IOP_GRP1_EnableClock+0x28>)
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	430a      	orrs	r2, r1
 800144a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <LL_IOP_GRP1_EnableClock+0x28>)
 800144e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	4013      	ands	r3, r2
 8001454:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001456:	68fb      	ldr	r3, [r7, #12]
}
 8001458:	46c0      	nop			; (mov r8, r8)
 800145a:	46bd      	mov	sp, r7
 800145c:	b004      	add	sp, #16
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40021000 	.word	0x40021000

08001464 <MX_ADC_Init>:

/* USER CODE END 0 */

/* ADC init function */
void MX_ADC_Init(void)
{
 8001464:	b5b0      	push	{r4, r5, r7, lr}
 8001466:	b090      	sub	sp, #64	; 0x40
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800146a:	2428      	movs	r4, #40	; 0x28
 800146c:	193b      	adds	r3, r7, r4
 800146e:	0018      	movs	r0, r3
 8001470:	2314      	movs	r3, #20
 8001472:	001a      	movs	r2, r3
 8001474:	2100      	movs	r1, #0
 8001476:	f001 fd11 	bl	8002e9c <memset>
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800147a:	2518      	movs	r5, #24
 800147c:	197b      	adds	r3, r7, r5
 800147e:	0018      	movs	r0, r3
 8001480:	2310      	movs	r3, #16
 8001482:	001a      	movs	r2, r3
 8001484:	2100      	movs	r1, #0
 8001486:	f001 fd09 	bl	8002e9c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148a:	003b      	movs	r3, r7
 800148c:	0018      	movs	r0, r3
 800148e:	2318      	movs	r3, #24
 8001490:	001a      	movs	r2, r3
 8001492:	2100      	movs	r1, #0
 8001494:	f001 fd02 	bl	8002e9c <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8001498:	2380      	movs	r3, #128	; 0x80
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	0018      	movs	r0, r3
 800149e:	f7ff ffb5 	bl	800140c <LL_APB2_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80014a2:	2001      	movs	r0, #1
 80014a4:	f7ff ffc8 	bl	8001438 <LL_IOP_GRP1_EnableClock>
  /**ADC GPIO Configuration
  PA0   ------> ADC_IN0
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80014a8:	003b      	movs	r3, r7
 80014aa:	2201      	movs	r2, #1
 80014ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80014ae:	003b      	movs	r3, r7
 80014b0:	2203      	movs	r2, #3
 80014b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014b4:	003b      	movs	r3, r7
 80014b6:	2200      	movs	r2, #0
 80014b8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ba:	003a      	movs	r2, r7
 80014bc:	23a0      	movs	r3, #160	; 0xa0
 80014be:	05db      	lsls	r3, r3, #23
 80014c0:	0011      	movs	r1, r2
 80014c2:	0018      	movs	r0, r3
 80014c4:	f001 f934 	bl	8002730 <LL_GPIO_Init>

  /* USER CODE END ADC_Init 1 */

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_0);
 80014c8:	4b35      	ldr	r3, [pc, #212]	; (80015a0 <MX_ADC_Init+0x13c>)
 80014ca:	2101      	movs	r1, #1
 80014cc:	0018      	movs	r0, r3
 80014ce:	f7ff ff47 	bl	8001360 <LL_ADC_REG_SetSequencerChAdd>

  /** Common config
  */
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80014d2:	0021      	movs	r1, r4
 80014d4:	187b      	adds	r3, r7, r1
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80014da:	187b      	adds	r3, r7, r1
 80014dc:	2200      	movs	r2, #0
 80014de:	605a      	str	r2, [r3, #4]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80014e0:	187b      	adds	r3, r7, r1
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80014e6:	187b      	adds	r3, r7, r1
 80014e8:	2200      	movs	r2, #0
 80014ea:	60da      	str	r2, [r3, #12]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 80014ec:	187b      	adds	r3, r7, r1
 80014ee:	2200      	movs	r2, #0
 80014f0:	611a      	str	r2, [r3, #16]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80014f2:	187b      	adds	r3, r7, r1
 80014f4:	4a2a      	ldr	r2, [pc, #168]	; (80015a0 <MX_ADC_Init+0x13c>)
 80014f6:	0019      	movs	r1, r3
 80014f8:	0010      	movs	r0, r2
 80014fa:	f000 ff1d 	bl	8002338 <LL_ADC_REG_Init>
  LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80014fe:	4b28      	ldr	r3, [pc, #160]	; (80015a0 <MX_ADC_Init+0x13c>)
 8001500:	2100      	movs	r1, #0
 8001502:	0018      	movs	r0, r3
 8001504:	f7ff ff08 	bl	8001318 <LL_ADC_SetSamplingTimeCommonChannels>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 8001508:	4b25      	ldr	r3, [pc, #148]	; (80015a0 <MX_ADC_Init+0x13c>)
 800150a:	2100      	movs	r1, #0
 800150c:	0018      	movs	r0, r3
 800150e:	f7ff ff38 	bl	8001382 <LL_ADC_SetOverSamplingScope>
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
 8001512:	4b23      	ldr	r3, [pc, #140]	; (80015a0 <MX_ADC_Init+0x13c>)
 8001514:	2100      	movs	r1, #0
 8001516:	0018      	movs	r0, r3
 8001518:	f7ff ff10 	bl	800133c <LL_ADC_REG_SetSequencerScanDirection>
  LL_ADC_SetCommonFrequencyMode(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_CLOCK_FREQ_MODE_HIGH);
 800151c:	4b21      	ldr	r3, [pc, #132]	; (80015a4 <MX_ADC_Init+0x140>)
 800151e:	2100      	movs	r1, #0
 8001520:	0018      	movs	r0, r3
 8001522:	f7ff fee5 	bl	80012f0 <LL_ADC_SetCommonFrequencyMode>
  LL_ADC_DisableIT_EOC(ADC1);
 8001526:	4b1e      	ldr	r3, [pc, #120]	; (80015a0 <MX_ADC_Init+0x13c>)
 8001528:	0018      	movs	r0, r3
 800152a:	f7ff ff51 	bl	80013d0 <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 800152e:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <MX_ADC_Init+0x13c>)
 8001530:	0018      	movs	r0, r3
 8001532:	f7ff ff5c 	bl	80013ee <LL_ADC_DisableIT_EOS>
  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV1;
 8001536:	197b      	adds	r3, r7, r5
 8001538:	22c0      	movs	r2, #192	; 0xc0
 800153a:	0612      	lsls	r2, r2, #24
 800153c:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 800153e:	197b      	adds	r3, r7, r5
 8001540:	2200      	movs	r2, #0
 8001542:	605a      	str	r2, [r3, #4]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001544:	197b      	adds	r3, r7, r5
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 800154a:	197b      	adds	r3, r7, r5
 800154c:	2200      	movs	r2, #0
 800154e:	60da      	str	r2, [r3, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001550:	197b      	adds	r3, r7, r5
 8001552:	4a13      	ldr	r2, [pc, #76]	; (80015a0 <MX_ADC_Init+0x13c>)
 8001554:	0019      	movs	r1, r3
 8001556:	0010      	movs	r0, r2
 8001558:	f000 feb8 	bl	80022cc <LL_ADC_Init>

  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 800155c:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <MX_ADC_Init+0x13c>)
 800155e:	0018      	movs	r0, r3
 8001560:	f7ff ff22 	bl	80013a8 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8001564:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <MX_ADC_Init+0x144>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4910      	ldr	r1, [pc, #64]	; (80015ac <MX_ADC_Init+0x148>)
 800156a:	0018      	movs	r0, r3
 800156c:	f7fe fdcc 	bl	8000108 <__udivsi3>
 8001570:	0003      	movs	r3, r0
 8001572:	001a      	movs	r2, r3
 8001574:	0013      	movs	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	189b      	adds	r3, r3, r2
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	210a      	movs	r1, #10
 800157e:	0018      	movs	r0, r3
 8001580:	f7fe fdc2 	bl	8000108 <__udivsi3>
 8001584:	0003      	movs	r3, r0
 8001586:	63fb      	str	r3, [r7, #60]	; 0x3c
  while(wait_loop_index != 0)
 8001588:	e002      	b.n	8001590 <MX_ADC_Init+0x12c>
  {
    wait_loop_index--;
 800158a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800158c:	3b01      	subs	r3, #1
 800158e:	63fb      	str	r3, [r7, #60]	; 0x3c
  while(wait_loop_index != 0)
 8001590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1f9      	bne.n	800158a <MX_ADC_Init+0x126>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001596:	46c0      	nop			; (mov r8, r8)
 8001598:	46c0      	nop			; (mov r8, r8)
 800159a:	46bd      	mov	sp, r7
 800159c:	b010      	add	sp, #64	; 0x40
 800159e:	bdb0      	pop	{r4, r5, r7, pc}
 80015a0:	40012400 	.word	0x40012400
 80015a4:	40012708 	.word	0x40012708
 80015a8:	20000000 	.word	0x20000000
 80015ac:	00030d40 	.word	0x00030d40

080015b0 <LL_IOP_GRP1_EnableClock>:
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 80015b8:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <LL_IOP_GRP1_EnableClock+0x28>)
 80015ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <LL_IOP_GRP1_EnableClock+0x28>)
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	430a      	orrs	r2, r1
 80015c2:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80015c4:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <LL_IOP_GRP1_EnableClock+0x28>)
 80015c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	4013      	ands	r3, r2
 80015cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015ce:	68fb      	ldr	r3, [r7, #12]
}
 80015d0:	46c0      	nop			; (mov r8, r8)
 80015d2:	46bd      	mov	sp, r7
 80015d4:	b004      	add	sp, #16
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40021000 	.word	0x40021000

080015dc <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80015dc:	b590      	push	{r4, r7, lr}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], SYSCFG_EXTICR1_EXTI0 << (Line >> 16U), Port << (Line >> 16U));
 80015e6:	4a0f      	ldr	r2, [pc, #60]	; (8001624 <LL_SYSCFG_SetEXTISource+0x48>)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	21ff      	movs	r1, #255	; 0xff
 80015ec:	400b      	ands	r3, r1
 80015ee:	3302      	adds	r3, #2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	589b      	ldr	r3, [r3, r2]
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	0c12      	lsrs	r2, r2, #16
 80015f8:	210f      	movs	r1, #15
 80015fa:	4091      	lsls	r1, r2
 80015fc:	000a      	movs	r2, r1
 80015fe:	43d2      	mvns	r2, r2
 8001600:	401a      	ands	r2, r3
 8001602:	0011      	movs	r1, r2
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	0c1b      	lsrs	r3, r3, #16
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	409a      	lsls	r2, r3
 800160c:	4805      	ldr	r0, [pc, #20]	; (8001624 <LL_SYSCFG_SetEXTISource+0x48>)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	24ff      	movs	r4, #255	; 0xff
 8001612:	4023      	ands	r3, r4
 8001614:	430a      	orrs	r2, r1
 8001616:	3302      	adds	r3, #2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	501a      	str	r2, [r3, r0]
}
 800161c:	46c0      	nop			; (mov r8, r8)
 800161e:	46bd      	mov	sp, r7
 8001620:	b003      	add	sp, #12
 8001622:	bd90      	pop	{r4, r7, pc}
 8001624:	40010000 	.word	0x40010000

08001628 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6819      	ldr	r1, [r3, #0]
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	435b      	muls	r3, r3
 800163c:	001a      	movs	r2, r3
 800163e:	0013      	movs	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	189b      	adds	r3, r3, r2
 8001644:	43db      	mvns	r3, r3
 8001646:	400b      	ands	r3, r1
 8001648:	001a      	movs	r2, r3
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	435b      	muls	r3, r3
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	434b      	muls	r3, r1
 8001652:	431a      	orrs	r2, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	601a      	str	r2, [r3, #0]
}
 8001658:	46c0      	nop			; (mov r8, r8)
 800165a:	46bd      	mov	sp, r7
 800165c:	b004      	add	sp, #16
 800165e:	bd80      	pop	{r7, pc}

08001660 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	68d9      	ldr	r1, [r3, #12]
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	435b      	muls	r3, r3
 8001674:	001a      	movs	r2, r3
 8001676:	0013      	movs	r3, r2
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	189b      	adds	r3, r3, r2
 800167c:	43db      	mvns	r3, r3
 800167e:	400b      	ands	r3, r1
 8001680:	001a      	movs	r2, r3
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	435b      	muls	r3, r3
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	434b      	muls	r3, r1
 800168a:	431a      	orrs	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	60da      	str	r2, [r3, #12]
}
 8001690:	46c0      	nop			; (mov r8, r8)
 8001692:	46bd      	mov	sp, r7
 8001694:	b004      	add	sp, #16
 8001696:	bd80      	pop	{r7, pc}

08001698 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016a8:	46c0      	nop			; (mov r8, r8)
 80016aa:	46bd      	mov	sp, r7
 80016ac:	b002      	add	sp, #8
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016b0:	b590      	push	{r4, r7, lr}
 80016b2:	b089      	sub	sp, #36	; 0x24
 80016b4:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80016b6:	2418      	movs	r4, #24
 80016b8:	193b      	adds	r3, r7, r4
 80016ba:	0018      	movs	r0, r3
 80016bc:	2308      	movs	r3, #8
 80016be:	001a      	movs	r2, r3
 80016c0:	2100      	movs	r1, #0
 80016c2:	f001 fbeb 	bl	8002e9c <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c6:	003b      	movs	r3, r7
 80016c8:	0018      	movs	r0, r3
 80016ca:	2318      	movs	r3, #24
 80016cc:	001a      	movs	r2, r3
 80016ce:	2100      	movs	r1, #0
 80016d0:	f001 fbe4 	bl	8002e9c <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 80016d4:	2004      	movs	r0, #4
 80016d6:	f7ff ff6b 	bl	80015b0 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOH);
 80016da:	2080      	movs	r0, #128	; 0x80
 80016dc:	f7ff ff68 	bl	80015b0 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80016e0:	2001      	movs	r0, #1
 80016e2:	f7ff ff65 	bl	80015b0 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 80016e6:	23a0      	movs	r3, #160	; 0xa0
 80016e8:	05db      	lsls	r3, r3, #23
 80016ea:	2120      	movs	r1, #32
 80016ec:	0018      	movs	r0, r3
 80016ee:	f7ff ffd3 	bl	8001698 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80016f2:	4b1f      	ldr	r3, [pc, #124]	; (8001770 <MX_GPIO_Init+0xc0>)
 80016f4:	0019      	movs	r1, r3
 80016f6:	2002      	movs	r0, #2
 80016f8:	f7ff ff70 	bl	80015dc <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 80016fc:	2380      	movs	r3, #128	; 0x80
 80016fe:	019b      	lsls	r3, r3, #6
 8001700:	481c      	ldr	r0, [pc, #112]	; (8001774 <MX_GPIO_Init+0xc4>)
 8001702:	2200      	movs	r2, #0
 8001704:	0019      	movs	r1, r3
 8001706:	f7ff ffab 	bl	8001660 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 800170a:	2380      	movs	r3, #128	; 0x80
 800170c:	019b      	lsls	r3, r3, #6
 800170e:	4819      	ldr	r0, [pc, #100]	; (8001774 <MX_GPIO_Init+0xc4>)
 8001710:	2200      	movs	r2, #0
 8001712:	0019      	movs	r1, r3
 8001714:	f7ff ff88 	bl	8001628 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001718:	0021      	movs	r1, r4
 800171a:	187b      	adds	r3, r7, r1
 800171c:	2280      	movs	r2, #128	; 0x80
 800171e:	0192      	lsls	r2, r2, #6
 8001720:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001722:	187b      	adds	r3, r7, r1
 8001724:	2201      	movs	r2, #1
 8001726:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001728:	187b      	adds	r3, r7, r1
 800172a:	2200      	movs	r2, #0
 800172c:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800172e:	187b      	adds	r3, r7, r1
 8001730:	2202      	movs	r2, #2
 8001732:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001734:	187b      	adds	r3, r7, r1
 8001736:	0018      	movs	r0, r3
 8001738:	f000 feb8 	bl	80024ac <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 800173c:	003b      	movs	r3, r7
 800173e:	2220      	movs	r2, #32
 8001740:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001742:	003b      	movs	r3, r7
 8001744:	2201      	movs	r2, #1
 8001746:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001748:	003b      	movs	r3, r7
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800174e:	003b      	movs	r3, r7
 8001750:	2200      	movs	r2, #0
 8001752:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001754:	003b      	movs	r3, r7
 8001756:	2200      	movs	r2, #0
 8001758:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800175a:	003a      	movs	r2, r7
 800175c:	23a0      	movs	r3, #160	; 0xa0
 800175e:	05db      	lsls	r3, r3, #23
 8001760:	0011      	movs	r1, r2
 8001762:	0018      	movs	r0, r3
 8001764:	f000 ffe4 	bl	8002730 <LL_GPIO_Init>

}
 8001768:	46c0      	nop			; (mov r8, r8)
 800176a:	46bd      	mov	sp, r7
 800176c:	b009      	add	sp, #36	; 0x24
 800176e:	bd90      	pop	{r4, r7, pc}
 8001770:	00040003 	.word	0x00040003
 8001774:	50000800 	.word	0x50000800

08001778 <Ecrire>:
#include "lcd.h"

void Ecrire(char f){
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	0002      	movs	r2, r0
 8001780:	1dfb      	adds	r3, r7, #7
 8001782:	701a      	strb	r2, [r3, #0]

//mettre les sorties � 0
PORT_CHAR->ODR&=~(1<<DB4);
 8001784:	23a0      	movs	r3, #160	; 0xa0
 8001786:	05db      	lsls	r3, r3, #23
 8001788:	695a      	ldr	r2, [r3, #20]
 800178a:	23a0      	movs	r3, #160	; 0xa0
 800178c:	05db      	lsls	r3, r3, #23
 800178e:	2140      	movs	r1, #64	; 0x40
 8001790:	438a      	bics	r2, r1
 8001792:	615a      	str	r2, [r3, #20]
PORT_CHAR->ODR&=~(1<<DB5);
 8001794:	23a0      	movs	r3, #160	; 0xa0
 8001796:	05db      	lsls	r3, r3, #23
 8001798:	695a      	ldr	r2, [r3, #20]
 800179a:	23a0      	movs	r3, #160	; 0xa0
 800179c:	05db      	lsls	r3, r3, #23
 800179e:	2180      	movs	r1, #128	; 0x80
 80017a0:	438a      	bics	r2, r1
 80017a2:	615a      	str	r2, [r3, #20]
PORT_CHAR->ODR&=~(1<<DB6);
 80017a4:	23a0      	movs	r3, #160	; 0xa0
 80017a6:	05db      	lsls	r3, r3, #23
 80017a8:	695a      	ldr	r2, [r3, #20]
 80017aa:	23a0      	movs	r3, #160	; 0xa0
 80017ac:	05db      	lsls	r3, r3, #23
 80017ae:	4922      	ldr	r1, [pc, #136]	; (8001838 <Ecrire+0xc0>)
 80017b0:	400a      	ands	r2, r1
 80017b2:	615a      	str	r2, [r3, #20]
PORT_CHAR->ODR&=~(1<<DB7);
 80017b4:	23a0      	movs	r3, #160	; 0xa0
 80017b6:	05db      	lsls	r3, r3, #23
 80017b8:	695a      	ldr	r2, [r3, #20]
 80017ba:	23a0      	movs	r3, #160	; 0xa0
 80017bc:	05db      	lsls	r3, r3, #23
 80017be:	491f      	ldr	r1, [pc, #124]	; (800183c <Ecrire+0xc4>)
 80017c0:	400a      	ands	r2, r1
 80017c2:	615a      	str	r2, [r3, #20]

//si le bit 7 de f est � 1 mettre le bit DB7 � 1
if((f & 0b10000000)!=0) PORT_CHAR->ODR|=(1<<DB7);
 80017c4:	1dfb      	adds	r3, r7, #7
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	b25b      	sxtb	r3, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	da08      	bge.n	80017e0 <Ecrire+0x68>
 80017ce:	23a0      	movs	r3, #160	; 0xa0
 80017d0:	05db      	lsls	r3, r3, #23
 80017d2:	695a      	ldr	r2, [r3, #20]
 80017d4:	23a0      	movs	r3, #160	; 0xa0
 80017d6:	05db      	lsls	r3, r3, #23
 80017d8:	2180      	movs	r1, #128	; 0x80
 80017da:	0089      	lsls	r1, r1, #2
 80017dc:	430a      	orrs	r2, r1
 80017de:	615a      	str	r2, [r3, #20]

//si le bit 6 de f est � 1 mettre le bit DB6 � 1
if((f & 0b01000000)!=0) PORT_CHAR->ODR|=(1<<DB6);
 80017e0:	1dfb      	adds	r3, r7, #7
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2240      	movs	r2, #64	; 0x40
 80017e6:	4013      	ands	r3, r2
 80017e8:	d008      	beq.n	80017fc <Ecrire+0x84>
 80017ea:	23a0      	movs	r3, #160	; 0xa0
 80017ec:	05db      	lsls	r3, r3, #23
 80017ee:	695a      	ldr	r2, [r3, #20]
 80017f0:	23a0      	movs	r3, #160	; 0xa0
 80017f2:	05db      	lsls	r3, r3, #23
 80017f4:	2180      	movs	r1, #128	; 0x80
 80017f6:	0049      	lsls	r1, r1, #1
 80017f8:	430a      	orrs	r2, r1
 80017fa:	615a      	str	r2, [r3, #20]

//si le bit 5 de f est � 1 mettre le bit DB5 � 1
if((f & 0b00100000)!=0) PORT_CHAR->ODR|=(1<<DB5);
 80017fc:	1dfb      	adds	r3, r7, #7
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2220      	movs	r2, #32
 8001802:	4013      	ands	r3, r2
 8001804:	d007      	beq.n	8001816 <Ecrire+0x9e>
 8001806:	23a0      	movs	r3, #160	; 0xa0
 8001808:	05db      	lsls	r3, r3, #23
 800180a:	695a      	ldr	r2, [r3, #20]
 800180c:	23a0      	movs	r3, #160	; 0xa0
 800180e:	05db      	lsls	r3, r3, #23
 8001810:	2180      	movs	r1, #128	; 0x80
 8001812:	430a      	orrs	r2, r1
 8001814:	615a      	str	r2, [r3, #20]

//si le bit 7 de f est � 1 mettre le bit DB4 � 1
if((f & 0b00010000)!=0) PORT_CHAR->ODR|=(1<<DB4);
 8001816:	1dfb      	adds	r3, r7, #7
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2210      	movs	r2, #16
 800181c:	4013      	ands	r3, r2
 800181e:	d007      	beq.n	8001830 <Ecrire+0xb8>
 8001820:	23a0      	movs	r3, #160	; 0xa0
 8001822:	05db      	lsls	r3, r3, #23
 8001824:	695a      	ldr	r2, [r3, #20]
 8001826:	23a0      	movs	r3, #160	; 0xa0
 8001828:	05db      	lsls	r3, r3, #23
 800182a:	2140      	movs	r1, #64	; 0x40
 800182c:	430a      	orrs	r2, r1
 800182e:	615a      	str	r2, [r3, #20]
}
 8001830:	46c0      	nop			; (mov r8, r8)
 8001832:	46bd      	mov	sp, r7
 8001834:	b002      	add	sp, #8
 8001836:	bd80      	pop	{r7, pc}
 8001838:	fffffeff 	.word	0xfffffeff
 800183c:	fffffdff 	.word	0xfffffdff

08001840 <toggle_e>:


void toggle_e(){
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
	//mettre la pin E du LCD � 1
	Port_E->ODR|=(1<<E);
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <toggle_e+0x28>)
 8001846:	695a      	ldr	r2, [r3, #20]
 8001848:	4b07      	ldr	r3, [pc, #28]	; (8001868 <toggle_e+0x28>)
 800184a:	2120      	movs	r1, #32
 800184c:	430a      	orrs	r2, r1
 800184e:	615a      	str	r2, [r3, #20]


	//attendre un peu
	  LL_mDelay(50);//delay=50us
 8001850:	2032      	movs	r0, #50	; 0x32
 8001852:	f001 facf 	bl	8002df4 <LL_mDelay>

	//mettre la pin E du LCD � 0
	Port_E->ODR&=~(1<<E);	//mettre E � 0
 8001856:	4b04      	ldr	r3, [pc, #16]	; (8001868 <toggle_e+0x28>)
 8001858:	695a      	ldr	r2, [r3, #20]
 800185a:	4b03      	ldr	r3, [pc, #12]	; (8001868 <toggle_e+0x28>)
 800185c:	2120      	movs	r1, #32
 800185e:	438a      	bics	r2, r1
 8001860:	615a      	str	r2, [r3, #20]

}
 8001862:	46c0      	nop			; (mov r8, r8)
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	50000400 	.word	0x50000400

0800186c <D_set_E_Toggle>:
void D_set_E_Toggle (char f){
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	0002      	movs	r2, r0
 8001874:	1dfb      	adds	r3, r7, #7
 8001876:	701a      	strb	r2, [r3, #0]


Ecrire(f);
 8001878:	1dfb      	adds	r3, r7, #7
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	0018      	movs	r0, r3
 800187e:	f7ff ff7b 	bl	8001778 <Ecrire>

toggle_e();
 8001882:	f7ff ffdd 	bl	8001840 <toggle_e>

}
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	46bd      	mov	sp, r7
 800188a:	b002      	add	sp, #8
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <EcrireFonction>:


void EcrireFonction(char f){
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	0002      	movs	r2, r0
 8001898:	1dfb      	adds	r3, r7, #7
 800189a:	701a      	strb	r2, [r3, #0]
	char nibble_pfort;
	char nibble_pfaible;
//mettre la pin RS du LCD � 0
Port_RS->ODR&=~(1<<rs);
 800189c:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <EcrireFonction+0x64>)
 800189e:	695a      	ldr	r2, [r3, #20]
 80018a0:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <EcrireFonction+0x64>)
 80018a2:	2110      	movs	r1, #16
 80018a4:	438a      	bics	r2, r1
 80018a6:	615a      	str	r2, [r3, #20]

//�crire le nibble de poids fort de f
D_set_E_Toggle(f);
 80018a8:	1dfb      	adds	r3, r7, #7
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	0018      	movs	r0, r3
 80018ae:	f7ff ffdd 	bl	800186c <D_set_E_Toggle>

//inverser le nibble de poids fort et le nibble de poids faible de f
nibble_pfort=(f&0b11110000)>>4;
 80018b2:	200f      	movs	r0, #15
 80018b4:	183b      	adds	r3, r7, r0
 80018b6:	1dfa      	adds	r2, r7, #7
 80018b8:	7812      	ldrb	r2, [r2, #0]
 80018ba:	0912      	lsrs	r2, r2, #4
 80018bc:	701a      	strb	r2, [r3, #0]
nibble_pfaible=f&0b00001111;
 80018be:	240e      	movs	r4, #14
 80018c0:	193b      	adds	r3, r7, r4
 80018c2:	1dfa      	adds	r2, r7, #7
 80018c4:	7812      	ldrb	r2, [r2, #0]
 80018c6:	210f      	movs	r1, #15
 80018c8:	400a      	ands	r2, r1
 80018ca:	701a      	strb	r2, [r3, #0]
int swap=nibble_pfort|(nibble_pfaible<<4);
 80018cc:	183b      	adds	r3, r7, r0
 80018ce:	781a      	ldrb	r2, [r3, #0]
 80018d0:	193b      	adds	r3, r7, r4
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	011b      	lsls	r3, r3, #4
 80018d6:	4313      	orrs	r3, r2
 80018d8:	60bb      	str	r3, [r7, #8]

//�crire le nibble
D_set_E_Toggle(swap);
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	0018      	movs	r0, r3
 80018e0:	f7ff ffc4 	bl	800186c <D_set_E_Toggle>

//attendre un peu
LL_mDelay(50);//delay=50us
 80018e4:	2032      	movs	r0, #50	; 0x32
 80018e6:	f001 fa85 	bl	8002df4 <LL_mDelay>

}
 80018ea:	46c0      	nop			; (mov r8, r8)
 80018ec:	46bd      	mov	sp, r7
 80018ee:	b005      	add	sp, #20
 80018f0:	bd90      	pop	{r4, r7, pc}
 80018f2:	46c0      	nop			; (mov r8, r8)
 80018f4:	50000400 	.word	0x50000400

080018f8 <EcrireCaractere>:


void EcrireCaractere(char c){
 80018f8:	b590      	push	{r4, r7, lr}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	0002      	movs	r2, r0
 8001900:	1dfb      	adds	r3, r7, #7
 8001902:	701a      	strb	r2, [r3, #0]
	//mettre la pin RS du LCD � 1
	 Port_RS->ODR|=(1<<rs);
 8001904:	4b15      	ldr	r3, [pc, #84]	; (800195c <EcrireCaractere+0x64>)
 8001906:	695a      	ldr	r2, [r3, #20]
 8001908:	4b14      	ldr	r3, [pc, #80]	; (800195c <EcrireCaractere+0x64>)
 800190a:	2110      	movs	r1, #16
 800190c:	430a      	orrs	r2, r1
 800190e:	615a      	str	r2, [r3, #20]

    //�crire le nibble de poids fort de c
	 D_set_E_Toggle(c); //call D_set_E_Toggle
 8001910:	1dfb      	adds	r3, r7, #7
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	0018      	movs	r0, r3
 8001916:	f7ff ffa9 	bl	800186c <D_set_E_Toggle>

    //inverser le nibble de poids fort et le nibble de poids faible de c
	char nibble_pfort=(c&0b11110000)>>4;
 800191a:	200f      	movs	r0, #15
 800191c:	183b      	adds	r3, r7, r0
 800191e:	1dfa      	adds	r2, r7, #7
 8001920:	7812      	ldrb	r2, [r2, #0]
 8001922:	0912      	lsrs	r2, r2, #4
 8001924:	701a      	strb	r2, [r3, #0]
	char nibble_pfaible=c&0b00001111;
 8001926:	240e      	movs	r4, #14
 8001928:	193b      	adds	r3, r7, r4
 800192a:	1dfa      	adds	r2, r7, #7
 800192c:	7812      	ldrb	r2, [r2, #0]
 800192e:	210f      	movs	r1, #15
 8001930:	400a      	ands	r2, r1
 8001932:	701a      	strb	r2, [r3, #0]
	int swap=nibble_pfort|(nibble_pfaible<<4);
 8001934:	183b      	adds	r3, r7, r0
 8001936:	781a      	ldrb	r2, [r3, #0]
 8001938:	193b      	adds	r3, r7, r4
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	011b      	lsls	r3, r3, #4
 800193e:	4313      	orrs	r3, r2
 8001940:	60bb      	str	r3, [r7, #8]

	//�crire le nibble
	 D_set_E_Toggle(swap);
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	b2db      	uxtb	r3, r3
 8001946:	0018      	movs	r0, r3
 8001948:	f7ff ff90 	bl	800186c <D_set_E_Toggle>

	 //attendre un peu
	  LL_mDelay(50); //delay=50us
 800194c:	2032      	movs	r0, #50	; 0x32
 800194e:	f001 fa51 	bl	8002df4 <LL_mDelay>
}
 8001952:	46c0      	nop			; (mov r8, r8)
 8001954:	46bd      	mov	sp, r7
 8001956:	b005      	add	sp, #20
 8001958:	bd90      	pop	{r4, r7, pc}
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	50000400 	.word	0x50000400

08001960 <EcrireChaine>:

void EcrireChaine(char ch[]){
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
int  i=0;
 8001968:	2300      	movs	r3, #0
 800196a:	60fb      	str	r3, [r7, #12]
while(ch[i]!='\0') {EcrireCaractere (ch[i]); i++;}
 800196c:	e009      	b.n	8001982 <EcrireChaine+0x22>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	18d3      	adds	r3, r2, r3
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	0018      	movs	r0, r3
 8001978:	f7ff ffbe 	bl	80018f8 <EcrireCaractere>
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	3301      	adds	r3, #1
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	18d3      	adds	r3, r2, r3
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1ef      	bne.n	800196e <EcrireChaine+0xe>

}
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	46c0      	nop			; (mov r8, r8)
 8001992:	46bd      	mov	sp, r7
 8001994:	b004      	add	sp, #16
 8001996:	bd80      	pop	{r7, pc}

08001998 <lcdinit4>:

void lcdinit4(){
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0

	  LL_mDelay(1000000);//delay=1000ms
 800199c:	4b4e      	ldr	r3, [pc, #312]	; (8001ad8 <lcdinit4+0x140>)
 800199e:	0018      	movs	r0, r3
 80019a0:	f001 fa28 	bl	8002df4 <LL_mDelay>

	//Activer les sorties du microcontr�leur
	PORT_CHAR->MODER&=~(0b11<<(2*DB4));
 80019a4:	23a0      	movs	r3, #160	; 0xa0
 80019a6:	05db      	lsls	r3, r3, #23
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	23a0      	movs	r3, #160	; 0xa0
 80019ac:	05db      	lsls	r3, r3, #23
 80019ae:	494b      	ldr	r1, [pc, #300]	; (8001adc <lcdinit4+0x144>)
 80019b0:	400a      	ands	r2, r1
 80019b2:	601a      	str	r2, [r3, #0]
	PORT_CHAR->MODER|=(0b01<<(2*DB4));
 80019b4:	23a0      	movs	r3, #160	; 0xa0
 80019b6:	05db      	lsls	r3, r3, #23
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	23a0      	movs	r3, #160	; 0xa0
 80019bc:	05db      	lsls	r3, r3, #23
 80019be:	2180      	movs	r1, #128	; 0x80
 80019c0:	0149      	lsls	r1, r1, #5
 80019c2:	430a      	orrs	r2, r1
 80019c4:	601a      	str	r2, [r3, #0]
	PORT_CHAR->MODER&=~(0b11<<(2*DB5));
 80019c6:	23a0      	movs	r3, #160	; 0xa0
 80019c8:	05db      	lsls	r3, r3, #23
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	23a0      	movs	r3, #160	; 0xa0
 80019ce:	05db      	lsls	r3, r3, #23
 80019d0:	4943      	ldr	r1, [pc, #268]	; (8001ae0 <lcdinit4+0x148>)
 80019d2:	400a      	ands	r2, r1
 80019d4:	601a      	str	r2, [r3, #0]
	PORT_CHAR->MODER|=(0b01<<(2*DB5));
 80019d6:	23a0      	movs	r3, #160	; 0xa0
 80019d8:	05db      	lsls	r3, r3, #23
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	23a0      	movs	r3, #160	; 0xa0
 80019de:	05db      	lsls	r3, r3, #23
 80019e0:	2180      	movs	r1, #128	; 0x80
 80019e2:	01c9      	lsls	r1, r1, #7
 80019e4:	430a      	orrs	r2, r1
 80019e6:	601a      	str	r2, [r3, #0]
	PORT_CHAR->MODER&=~(0b11<<(2*DB6));
 80019e8:	23a0      	movs	r3, #160	; 0xa0
 80019ea:	05db      	lsls	r3, r3, #23
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	23a0      	movs	r3, #160	; 0xa0
 80019f0:	05db      	lsls	r3, r3, #23
 80019f2:	493c      	ldr	r1, [pc, #240]	; (8001ae4 <lcdinit4+0x14c>)
 80019f4:	400a      	ands	r2, r1
 80019f6:	601a      	str	r2, [r3, #0]
	PORT_CHAR->MODER|=(0b01<<(2*DB6));
 80019f8:	23a0      	movs	r3, #160	; 0xa0
 80019fa:	05db      	lsls	r3, r3, #23
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	23a0      	movs	r3, #160	; 0xa0
 8001a00:	05db      	lsls	r3, r3, #23
 8001a02:	2180      	movs	r1, #128	; 0x80
 8001a04:	0249      	lsls	r1, r1, #9
 8001a06:	430a      	orrs	r2, r1
 8001a08:	601a      	str	r2, [r3, #0]
	PORT_CHAR->MODER&=~(0b11<<(2*DB7));
 8001a0a:	23a0      	movs	r3, #160	; 0xa0
 8001a0c:	05db      	lsls	r3, r3, #23
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	23a0      	movs	r3, #160	; 0xa0
 8001a12:	05db      	lsls	r3, r3, #23
 8001a14:	4934      	ldr	r1, [pc, #208]	; (8001ae8 <lcdinit4+0x150>)
 8001a16:	400a      	ands	r2, r1
 8001a18:	601a      	str	r2, [r3, #0]
	PORT_CHAR->MODER|=(0b01<<(2*DB7));
 8001a1a:	23a0      	movs	r3, #160	; 0xa0
 8001a1c:	05db      	lsls	r3, r3, #23
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	23a0      	movs	r3, #160	; 0xa0
 8001a22:	05db      	lsls	r3, r3, #23
 8001a24:	2180      	movs	r1, #128	; 0x80
 8001a26:	02c9      	lsls	r1, r1, #11
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	601a      	str	r2, [r3, #0]


	Port_E->MODER&=~(0b11<<(2*E));
 8001a2c:	4b2f      	ldr	r3, [pc, #188]	; (8001aec <lcdinit4+0x154>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b2e      	ldr	r3, [pc, #184]	; (8001aec <lcdinit4+0x154>)
 8001a32:	492f      	ldr	r1, [pc, #188]	; (8001af0 <lcdinit4+0x158>)
 8001a34:	400a      	ands	r2, r1
 8001a36:	601a      	str	r2, [r3, #0]
	Port_E->MODER|=(0b01<<(2*E));
 8001a38:	4b2c      	ldr	r3, [pc, #176]	; (8001aec <lcdinit4+0x154>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b2b      	ldr	r3, [pc, #172]	; (8001aec <lcdinit4+0x154>)
 8001a3e:	2180      	movs	r1, #128	; 0x80
 8001a40:	00c9      	lsls	r1, r1, #3
 8001a42:	430a      	orrs	r2, r1
 8001a44:	601a      	str	r2, [r3, #0]

	Port_RS->MODER&=~(0b11<<(2*rs));
 8001a46:	4b29      	ldr	r3, [pc, #164]	; (8001aec <lcdinit4+0x154>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	4b28      	ldr	r3, [pc, #160]	; (8001aec <lcdinit4+0x154>)
 8001a4c:	4929      	ldr	r1, [pc, #164]	; (8001af4 <lcdinit4+0x15c>)
 8001a4e:	400a      	ands	r2, r1
 8001a50:	601a      	str	r2, [r3, #0]
	Port_RS->MODER|=(0b01<<(2*rs));
 8001a52:	4b26      	ldr	r3, [pc, #152]	; (8001aec <lcdinit4+0x154>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	4b25      	ldr	r3, [pc, #148]	; (8001aec <lcdinit4+0x154>)
 8001a58:	2180      	movs	r1, #128	; 0x80
 8001a5a:	0049      	lsls	r1, r1, #1
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	601a      	str	r2, [r3, #0]

	  LL_mDelay(20000);//delay=20ms
 8001a60:	4b25      	ldr	r3, [pc, #148]	; (8001af8 <lcdinit4+0x160>)
 8001a62:	0018      	movs	r0, r3
 8001a64:	f001 f9c6 	bl	8002df4 <LL_mDelay>

     Ecrire(0x30);
 8001a68:	2030      	movs	r0, #48	; 0x30
 8001a6a:	f7ff fe85 	bl	8001778 <Ecrire>
     toggle_e();
 8001a6e:	f7ff fee7 	bl	8001840 <toggle_e>
     LL_mDelay(5000);//delay=5ms
 8001a72:	4b22      	ldr	r3, [pc, #136]	; (8001afc <lcdinit4+0x164>)
 8001a74:	0018      	movs	r0, r3
 8001a76:	f001 f9bd 	bl	8002df4 <LL_mDelay>

	Ecrire(0x30);
 8001a7a:	2030      	movs	r0, #48	; 0x30
 8001a7c:	f7ff fe7c 	bl	8001778 <Ecrire>
     toggle_e();
 8001a80:	f7ff fede 	bl	8001840 <toggle_e>
     LL_mDelay(200);//delay=200us
 8001a84:	20c8      	movs	r0, #200	; 0xc8
 8001a86:	f001 f9b5 	bl	8002df4 <LL_mDelay>

     Ecrire(0x30);
 8001a8a:	2030      	movs	r0, #48	; 0x30
 8001a8c:	f7ff fe74 	bl	8001778 <Ecrire>
     toggle_e();
 8001a90:	f7ff fed6 	bl	8001840 <toggle_e>
     LL_mDelay(200);//delay=200us
 8001a94:	20c8      	movs	r0, #200	; 0xc8
 8001a96:	f001 f9ad 	bl	8002df4 <LL_mDelay>

	Ecrire(0x20);
 8001a9a:	2020      	movs	r0, #32
 8001a9c:	f7ff fe6c 	bl	8001778 <Ecrire>
     toggle_e();
 8001aa0:	f7ff fece 	bl	8001840 <toggle_e>
     LL_mDelay(200);//delay=200us
 8001aa4:	20c8      	movs	r0, #200	; 0xc8
 8001aa6:	f001 f9a5 	bl	8002df4 <LL_mDelay>



	//SET FUNCTION: choix du mode de fonctionnement
	EcrireFonction(0x28);
 8001aaa:	2028      	movs	r0, #40	; 0x28
 8001aac:	f7ff fef0 	bl	8001890 <EcrireFonction>

	//DISPLAY OFF
	EcrireFonction(0x8);
 8001ab0:	2008      	movs	r0, #8
 8001ab2:	f7ff feed 	bl	8001890 <EcrireFonction>

	//DISPLAY CLEAR
	EcrireFonction(1);
 8001ab6:	2001      	movs	r0, #1
 8001ab8:	f7ff feea 	bl	8001890 <EcrireFonction>
	LL_mDelay(1600);//delay=1.6ms
 8001abc:	23c8      	movs	r3, #200	; 0xc8
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	f001 f997 	bl	8002df4 <LL_mDelay>


	//ENTRY MODE SET
	EcrireFonction(0x6);
 8001ac6:	2006      	movs	r0, #6
 8001ac8:	f7ff fee2 	bl	8001890 <EcrireFonction>

	//DISPLAY ON

	EcrireFonction(0xC);
 8001acc:	200c      	movs	r0, #12
 8001ace:	f7ff fedf 	bl	8001890 <EcrireFonction>


}
 8001ad2:	46c0      	nop			; (mov r8, r8)
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	000f4240 	.word	0x000f4240
 8001adc:	ffffcfff 	.word	0xffffcfff
 8001ae0:	ffff3fff 	.word	0xffff3fff
 8001ae4:	fffcffff 	.word	0xfffcffff
 8001ae8:	fff3ffff 	.word	0xfff3ffff
 8001aec:	50000400 	.word	0x50000400
 8001af0:	fffff3ff 	.word	0xfffff3ff
 8001af4:	fffffcff 	.word	0xfffffcff
 8001af8:	00004e20 	.word	0x00004e20
 8001afc:	00001388 	.word	0x00001388

08001b00 <Affichage_LCD>:

void Affichage_LCD(char * ligne1, char *ligne2){
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]

	/*effacer l'affichage*/
	// LCD <- 01, display clear
	EcrireFonction(0x80);
 8001b0a:	2080      	movs	r0, #128	; 0x80
 8001b0c:	f7ff fec0 	bl	8001890 <EcrireFonction>
	EcrireFonction(1);
 8001b10:	2001      	movs	r0, #1
 8001b12:	f7ff febd 	bl	8001890 <EcrireFonction>
	LL_mDelay(1600);//delay=1.6ms
 8001b16:	23c8      	movs	r3, #200	; 0xc8
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	f001 f96a 	bl	8002df4 <LL_mDelay>

	/**ecriture sur la premiere ligne**/
	/*positionner le curseur avec la fonction SET DD RAM ADDRESS */
	EcrireFonction(0x80);
 8001b20:	2080      	movs	r0, #128	; 0x80
 8001b22:	f7ff feb5 	bl	8001890 <EcrireFonction>
	EcrireChaine(ligne1);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	0018      	movs	r0, r3
 8001b2a:	f7ff ff19 	bl	8001960 <EcrireChaine>

	/**ecriture sur la deuxieme ligne**/
	/*positionner le curseur avec la fonction SET DD RAM ADDRESS*/ 
    EcrireFonction(0xC0);
 8001b2e:	20c0      	movs	r0, #192	; 0xc0
 8001b30:	f7ff feae 	bl	8001890 <EcrireFonction>
	EcrireChaine(ligne2);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	0018      	movs	r0, r3
 8001b38:	f7ff ff12 	bl	8001960 <EcrireChaine>
}
 8001b3c:	46c0      	nop			; (mov r8, r8)
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	b002      	add	sp, #8
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	4a04      	ldr	r2, [pc, #16]	; (8001b64 <LL_ADC_REG_StartConversion+0x20>)
 8001b52:	4013      	ands	r3, r2
 8001b54:	2204      	movs	r2, #4
 8001b56:	431a      	orrs	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b5c:	46c0      	nop			; (mov r8, r8)
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	b002      	add	sp, #8
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	7fffffe8 	.word	0x7fffffe8

08001b68 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       DATA           LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b74:	b29b      	uxth	r3, r3
}
 8001b76:	0018      	movs	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	b002      	add	sp, #8
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001b84:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <LL_RCC_HSI_Enable+0x18>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	4b03      	ldr	r3, [pc, #12]	; (8001b98 <LL_RCC_HSI_Enable+0x18>)
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	601a      	str	r2, [r3, #0]
}
 8001b90:	46c0      	nop			; (mov r8, r8)
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	40021000 	.word	0x40021000

08001b9c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <LL_RCC_HSI_IsReady+0x1c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2204      	movs	r2, #4
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	2b04      	cmp	r3, #4
 8001baa:	d101      	bne.n	8001bb0 <LL_RCC_HSI_IsReady+0x14>
 8001bac:	2301      	movs	r3, #1
 8001bae:	e000      	b.n	8001bb2 <LL_RCC_HSI_IsReady+0x16>
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40021000 	.word	0x40021000

08001bbc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001bc4:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	4a06      	ldr	r2, [pc, #24]	; (8001be4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001bca:	4013      	ands	r3, r2
 8001bcc:	0019      	movs	r1, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	021a      	lsls	r2, r3, #8
 8001bd2:	4b03      	ldr	r3, [pc, #12]	; (8001be0 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	605a      	str	r2, [r3, #4]
}
 8001bd8:	46c0      	nop			; (mov r8, r8)
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	b002      	add	sp, #8
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40021000 	.word	0x40021000
 8001be4:	ffffe0ff 	.word	0xffffe0ff

08001be8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001bf0:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <LL_RCC_SetSysClkSource+0x24>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	4393      	bics	r3, r2
 8001bf8:	0019      	movs	r1, r3
 8001bfa:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <LL_RCC_SetSysClkSource+0x24>)
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	60da      	str	r2, [r3, #12]
}
 8001c02:	46c0      	nop			; (mov r8, r8)
 8001c04:	46bd      	mov	sp, r7
 8001c06:	b002      	add	sp, #8
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	46c0      	nop			; (mov r8, r8)
 8001c0c:	40021000 	.word	0x40021000

08001c10 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001c14:	4b03      	ldr	r3, [pc, #12]	; (8001c24 <LL_RCC_GetSysClkSource+0x14>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	220c      	movs	r2, #12
 8001c1a:	4013      	ands	r3, r2
}
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	40021000 	.word	0x40021000

08001c28 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <LL_RCC_SetAHBPrescaler+0x24>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	22f0      	movs	r2, #240	; 0xf0
 8001c36:	4393      	bics	r3, r2
 8001c38:	0019      	movs	r1, r3
 8001c3a:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <LL_RCC_SetAHBPrescaler+0x24>)
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	60da      	str	r2, [r3, #12]
}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	46bd      	mov	sp, r7
 8001c46:	b002      	add	sp, #8
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	40021000 	.word	0x40021000

08001c50 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001c58:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	4a06      	ldr	r2, [pc, #24]	; (8001c78 <LL_RCC_SetAPB1Prescaler+0x28>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	0019      	movs	r1, r3
 8001c62:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	60da      	str	r2, [r3, #12]
}
 8001c6a:	46c0      	nop			; (mov r8, r8)
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	b002      	add	sp, #8
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	40021000 	.word	0x40021000
 8001c78:	fffff8ff 	.word	0xfffff8ff

08001c7c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	4a06      	ldr	r2, [pc, #24]	; (8001ca4 <LL_RCC_SetAPB2Prescaler+0x28>)
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	0019      	movs	r1, r3
 8001c8e:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	60da      	str	r2, [r3, #12]
}
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	b002      	add	sp, #8
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	ffffc7ff 	.word	0xffffc7ff

08001ca8 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8001cb0:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <LL_RCC_SetUSARTClockSource+0x2c>)
 8001cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	0c12      	lsrs	r2, r2, #16
 8001cb8:	43d2      	mvns	r2, r2
 8001cba:	401a      	ands	r2, r3
 8001cbc:	0011      	movs	r1, r2
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	041b      	lsls	r3, r3, #16
 8001cc2:	0c1a      	lsrs	r2, r3, #16
 8001cc4:	4b03      	ldr	r3, [pc, #12]	; (8001cd4 <LL_RCC_SetUSARTClockSource+0x2c>)
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	b002      	add	sp, #8
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	40021000 	.word	0x40021000

08001cd8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001ce0:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <LL_APB1_GRP1_EnableClock+0x28>)
 8001ce2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001ce4:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <LL_APB1_GRP1_EnableClock+0x28>)
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	639a      	str	r2, [r3, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001cec:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <LL_APB1_GRP1_EnableClock+0x28>)
 8001cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
}
 8001cf8:	46c0      	nop			; (mov r8, r8)
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	b004      	add	sp, #16
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40021000 	.word	0x40021000

08001d04 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001d0c:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <LL_APB2_GRP1_EnableClock+0x28>)
 8001d0e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d10:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <LL_APB2_GRP1_EnableClock+0x28>)
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001d18:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <LL_APB2_GRP1_EnableClock+0x28>)
 8001d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d22:	68fb      	ldr	r3, [r7, #12]
}
 8001d24:	46c0      	nop			; (mov r8, r8)
 8001d26:	46bd      	mov	sp, r7
 8001d28:	b004      	add	sp, #16
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40021000 	.word	0x40021000

08001d30 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <LL_FLASH_SetLatency+0x24>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	4393      	bics	r3, r2
 8001d40:	0019      	movs	r1, r3
 8001d42:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <LL_FLASH_SetLatency+0x24>)
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	601a      	str	r2, [r3, #0]
}
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	b002      	add	sp, #8
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	46c0      	nop			; (mov r8, r8)
 8001d54:	40022000 	.word	0x40022000

08001d58 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001d5c:	4b03      	ldr	r3, [pc, #12]	; (8001d6c <LL_FLASH_GetLatency+0x14>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2201      	movs	r2, #1
 8001d62:	4013      	ands	r3, r2
}
 8001d64:	0018      	movs	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	40022000 	.word	0x40022000

08001d70 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8001d78:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a06      	ldr	r2, [pc, #24]	; (8001d98 <LL_PWR_SetRegulVoltageScaling+0x28>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	0019      	movs	r1, r3
 8001d82:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	601a      	str	r2, [r3, #0]
}
 8001d8a:	46c0      	nop			; (mov r8, r8)
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	b002      	add	sp, #8
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	46c0      	nop			; (mov r8, r8)
 8001d94:	40007000 	.word	0x40007000
 8001d98:	ffffe7ff 	.word	0xffffe7ff

08001d9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d9c:	b5b0      	push	{r4, r5, r7, lr}
 8001d9e:	b096      	sub	sp, #88	; 0x58
 8001da0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001da2:	2001      	movs	r0, #1
 8001da4:	f7ff ffae 	bl	8001d04 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001da8:	2380      	movs	r3, #128	; 0x80
 8001daa:	055b      	lsls	r3, r3, #21
 8001dac:	0018      	movs	r0, r3
 8001dae:	f7ff ff93 	bl	8001cd8 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001db2:	f000 f92f 	bl	8002014 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  //activation de l'horloge pour GPIOA et GPIOB
  RCC->IOPENR |= RCC_IOPENR_GPIOAEN | RCC_IOPENR_GPIOBEN;
 8001db6:	4b8d      	ldr	r3, [pc, #564]	; (8001fec <main+0x250>)
 8001db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dba:	4b8c      	ldr	r3, [pc, #560]	; (8001fec <main+0x250>)
 8001dbc:	2103      	movs	r1, #3
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	62da      	str	r2, [r3, #44]	; 0x2c
  /*Ici la fonction LL_mDelay sera utilisée pour faire des temps d'attente en us Pour cette raison on initialise le nombre de ticks nécessaire pour faire 1ms à 16000 au lieu de 16000000
  */
  LL_Init1msTick(16000);
 8001dc2:	23fa      	movs	r3, #250	; 0xfa
 8001dc4:	019b      	lsls	r3, r3, #6
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f001 f804 	bl	8002dd4 <LL_Init1msTick>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dcc:	f7ff fc70 	bl	80016b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001dd0:	f000 f9ca 	bl	8002168 <MX_USART2_UART_Init>
  MX_ADC_Init();
 8001dd4:	f7ff fb46 	bl	8001464 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  //Initialisation du LCD
  lcdinit4(); //call lcdinit4
 8001dd8:	f7ff fdde 	bl	8001998 <lcdinit4>

  /* USER CODE END 2 */
  float voltage=0,Lumens=0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	657b      	str	r3, [r7, #84]	; 0x54
 8001de0:	2300      	movs	r3, #0
 8001de2:	653b      	str	r3, [r7, #80]	; 0x50
  uint16_t adc_value=0;
 8001de4:	234e      	movs	r3, #78	; 0x4e
 8001de6:	18fb      	adds	r3, r7, r3
 8001de8:	2200      	movs	r2, #0
 8001dea:	801a      	strh	r2, [r3, #0]

  int tmpV=0,m=0,c=0,d=0,u=0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	64bb      	str	r3, [r7, #72]	; 0x48
 8001df0:	2300      	movs	r3, #0
 8001df2:	647b      	str	r3, [r7, #68]	; 0x44
 8001df4:	2300      	movs	r3, #0
 8001df6:	643b      	str	r3, [r7, #64]	; 0x40
 8001df8:	2300      	movs	r3, #0
 8001dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	63bb      	str	r3, [r7, #56]	; 0x38
  int tmpL=0,M10=0,M=0,C=0,D=0,U=0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	637b      	str	r3, [r7, #52]	; 0x34
 8001e04:	2300      	movs	r3, #0
 8001e06:	633b      	str	r3, [r7, #48]	; 0x30
 8001e08:	2300      	movs	r3, #0
 8001e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e10:	2300      	movs	r3, #0
 8001e12:	627b      	str	r3, [r7, #36]	; 0x24
 8001e14:	2300      	movs	r3, #0
 8001e16:	623b      	str	r3, [r7, #32]

  char Text_LCD1[16] = "Voltage u.dcm V ";
 8001e18:	2310      	movs	r3, #16
 8001e1a:	18fb      	adds	r3, r7, r3
 8001e1c:	4a74      	ldr	r2, [pc, #464]	; (8001ff0 <main+0x254>)
 8001e1e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001e20:	c313      	stmia	r3!, {r0, r1, r4}
 8001e22:	6812      	ldr	r2, [r2, #0]
 8001e24:	601a      	str	r2, [r3, #0]
  char Text_LCD2[16] = "Lumens MMCDU lm ";
 8001e26:	003b      	movs	r3, r7
 8001e28:	4a72      	ldr	r2, [pc, #456]	; (8001ff4 <main+0x258>)
 8001e2a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001e2c:	c313      	stmia	r3!, {r0, r1, r4}
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */


		LL_ADC_REG_StartConversion(ADC1);
 8001e32:	4b71      	ldr	r3, [pc, #452]	; (8001ff8 <main+0x25c>)
 8001e34:	0018      	movs	r0, r3
 8001e36:	f7ff fe85 	bl	8001b44 <LL_ADC_REG_StartConversion>
		//while(LL_ADC_IsActiveFlag_EOC(ADC1) == 0);
		//LL_ADC_ClearFlag_EOC(ADC1);
		adc_value=LL_ADC_REG_ReadConversionData12(ADC1);
 8001e3a:	254e      	movs	r5, #78	; 0x4e
 8001e3c:	197c      	adds	r4, r7, r5
 8001e3e:	4b6e      	ldr	r3, [pc, #440]	; (8001ff8 <main+0x25c>)
 8001e40:	0018      	movs	r0, r3
 8001e42:	f7ff fe91 	bl	8001b68 <LL_ADC_REG_ReadConversionData12>
 8001e46:	0003      	movs	r3, r0
 8001e48:	8023      	strh	r3, [r4, #0]
		voltage=adc_value*5.0/4095.0;
 8001e4a:	197b      	adds	r3, r7, r5
 8001e4c:	881b      	ldrh	r3, [r3, #0]
 8001e4e:	0018      	movs	r0, r3
 8001e50:	f7ff f978 	bl	8001144 <__aeabi_i2d>
 8001e54:	2200      	movs	r2, #0
 8001e56:	4b69      	ldr	r3, [pc, #420]	; (8001ffc <main+0x260>)
 8001e58:	f7fe ff08 	bl	8000c6c <__aeabi_dmul>
 8001e5c:	0002      	movs	r2, r0
 8001e5e:	000b      	movs	r3, r1
 8001e60:	0010      	movs	r0, r2
 8001e62:	0019      	movs	r1, r3
 8001e64:	2200      	movs	r2, #0
 8001e66:	4b66      	ldr	r3, [pc, #408]	; (8002000 <main+0x264>)
 8001e68:	f7fe fc0a 	bl	8000680 <__aeabi_ddiv>
 8001e6c:	0002      	movs	r2, r0
 8001e6e:	000b      	movs	r3, r1
 8001e70:	0010      	movs	r0, r2
 8001e72:	0019      	movs	r1, r3
 8001e74:	f7ff f996 	bl	80011a4 <__aeabi_d2f>
 8001e78:	1c03      	adds	r3, r0, #0
 8001e7a:	657b      	str	r3, [r7, #84]	; 0x54

		voltage=4.324;
 8001e7c:	4b61      	ldr	r3, [pc, #388]	; (8002004 <main+0x268>)
 8001e7e:	657b      	str	r3, [r7, #84]	; 0x54

		Lumens=4804.5;
 8001e80:	4b61      	ldr	r3, [pc, #388]	; (8002008 <main+0x26c>)
 8001e82:	653b      	str	r3, [r7, #80]	; 0x50


		tmpV=voltage*1000;
 8001e84:	4961      	ldr	r1, [pc, #388]	; (800200c <main+0x270>)
 8001e86:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001e88:	f7fe fab4 	bl	80003f4 <__aeabi_fmul>
 8001e8c:	1c03      	adds	r3, r0, #0
 8001e8e:	1c18      	adds	r0, r3, #0
 8001e90:	f7fe fbd6 	bl	8000640 <__aeabi_f2iz>
 8001e94:	0003      	movs	r3, r0
 8001e96:	64bb      	str	r3, [r7, #72]	; 0x48
		u=tmpV/1000; //Unite
 8001e98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e9a:	22fa      	movs	r2, #250	; 0xfa
 8001e9c:	0091      	lsls	r1, r2, #2
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	f7fe f9bc 	bl	800021c <__divsi3>
 8001ea4:	0003      	movs	r3, r0
 8001ea6:	63bb      	str	r3, [r7, #56]	; 0x38
		tmpV=tmpV%1000;
 8001ea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eaa:	22fa      	movs	r2, #250	; 0xfa
 8001eac:	0091      	lsls	r1, r2, #2
 8001eae:	0018      	movs	r0, r3
 8001eb0:	f7fe fa9a 	bl	80003e8 <__aeabi_idivmod>
 8001eb4:	000b      	movs	r3, r1
 8001eb6:	64bb      	str	r3, [r7, #72]	; 0x48
		d=tmpV/100; //Dixieme
 8001eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eba:	2164      	movs	r1, #100	; 0x64
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	f7fe f9ad 	bl	800021c <__divsi3>
 8001ec2:	0003      	movs	r3, r0
 8001ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
		tmpV=tmpV%100;
 8001ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ec8:	2164      	movs	r1, #100	; 0x64
 8001eca:	0018      	movs	r0, r3
 8001ecc:	f7fe fa8c 	bl	80003e8 <__aeabi_idivmod>
 8001ed0:	000b      	movs	r3, r1
 8001ed2:	64bb      	str	r3, [r7, #72]	; 0x48
		c=tmpV/10; //Centieme
 8001ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ed6:	210a      	movs	r1, #10
 8001ed8:	0018      	movs	r0, r3
 8001eda:	f7fe f99f 	bl	800021c <__divsi3>
 8001ede:	0003      	movs	r3, r0
 8001ee0:	643b      	str	r3, [r7, #64]	; 0x40
		m=tmpV%10; //Milieme
 8001ee2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ee4:	210a      	movs	r1, #10
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	f7fe fa7e 	bl	80003e8 <__aeabi_idivmod>
 8001eec:	000b      	movs	r3, r1
 8001eee:	647b      	str	r3, [r7, #68]	; 0x44


		Text_LCD1[8] = u+48;
 8001ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	3330      	adds	r3, #48	; 0x30
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	2410      	movs	r4, #16
 8001efa:	193b      	adds	r3, r7, r4
 8001efc:	721a      	strb	r2, [r3, #8]
		Text_LCD1[10] = d+48;
 8001efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	3330      	adds	r3, #48	; 0x30
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	193b      	adds	r3, r7, r4
 8001f08:	729a      	strb	r2, [r3, #10]
		Text_LCD1[11] = c+48;
 8001f0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	3330      	adds	r3, #48	; 0x30
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	193b      	adds	r3, r7, r4
 8001f14:	72da      	strb	r2, [r3, #11]
		Text_LCD1[12] = m+48;
 8001f16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	3330      	adds	r3, #48	; 0x30
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	193b      	adds	r3, r7, r4
 8001f20:	731a      	strb	r2, [r3, #12]

		tmpL=Lumens;
 8001f22:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001f24:	f7fe fb8c 	bl	8000640 <__aeabi_f2iz>
 8001f28:	0003      	movs	r3, r0
 8001f2a:	637b      	str	r3, [r7, #52]	; 0x34
		M10=tmpL/10000; //10^4
 8001f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f2e:	4938      	ldr	r1, [pc, #224]	; (8002010 <main+0x274>)
 8001f30:	0018      	movs	r0, r3
 8001f32:	f7fe f973 	bl	800021c <__divsi3>
 8001f36:	0003      	movs	r3, r0
 8001f38:	633b      	str	r3, [r7, #48]	; 0x30
		tmpL=tmpL%10000;
 8001f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f3c:	4934      	ldr	r1, [pc, #208]	; (8002010 <main+0x274>)
 8001f3e:	0018      	movs	r0, r3
 8001f40:	f7fe fa52 	bl	80003e8 <__aeabi_idivmod>
 8001f44:	000b      	movs	r3, r1
 8001f46:	637b      	str	r3, [r7, #52]	; 0x34
		M=tmpL/1000; //10^3
 8001f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f4a:	22fa      	movs	r2, #250	; 0xfa
 8001f4c:	0091      	lsls	r1, r2, #2
 8001f4e:	0018      	movs	r0, r3
 8001f50:	f7fe f964 	bl	800021c <__divsi3>
 8001f54:	0003      	movs	r3, r0
 8001f56:	62fb      	str	r3, [r7, #44]	; 0x2c
		tmpL=tmpL%1000;
 8001f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f5a:	22fa      	movs	r2, #250	; 0xfa
 8001f5c:	0091      	lsls	r1, r2, #2
 8001f5e:	0018      	movs	r0, r3
 8001f60:	f7fe fa42 	bl	80003e8 <__aeabi_idivmod>
 8001f64:	000b      	movs	r3, r1
 8001f66:	637b      	str	r3, [r7, #52]	; 0x34
		C=tmpL/100; //10^2
 8001f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f6a:	2164      	movs	r1, #100	; 0x64
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	f7fe f955 	bl	800021c <__divsi3>
 8001f72:	0003      	movs	r3, r0
 8001f74:	62bb      	str	r3, [r7, #40]	; 0x28
		tmpL=tmpL%100;
 8001f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f78:	2164      	movs	r1, #100	; 0x64
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	f7fe fa34 	bl	80003e8 <__aeabi_idivmod>
 8001f80:	000b      	movs	r3, r1
 8001f82:	637b      	str	r3, [r7, #52]	; 0x34
		D=tmpL/10; //10^1
 8001f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f86:	210a      	movs	r1, #10
 8001f88:	0018      	movs	r0, r3
 8001f8a:	f7fe f947 	bl	800021c <__divsi3>
 8001f8e:	0003      	movs	r3, r0
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
		U=tmpL%10; //10^0
 8001f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f94:	210a      	movs	r1, #10
 8001f96:	0018      	movs	r0, r3
 8001f98:	f7fe fa26 	bl	80003e8 <__aeabi_idivmod>
 8001f9c:	000b      	movs	r3, r1
 8001f9e:	623b      	str	r3, [r7, #32]

		Text_LCD2[7] = M10+48;
 8001fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	3330      	adds	r3, #48	; 0x30
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	003b      	movs	r3, r7
 8001faa:	71da      	strb	r2, [r3, #7]
		Text_LCD2[8] = M+48;
 8001fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	3330      	adds	r3, #48	; 0x30
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	003b      	movs	r3, r7
 8001fb6:	721a      	strb	r2, [r3, #8]
		Text_LCD2[9] = C+48;
 8001fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	3330      	adds	r3, #48	; 0x30
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	003b      	movs	r3, r7
 8001fc2:	725a      	strb	r2, [r3, #9]
		Text_LCD2[10] = D+48;
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	3330      	adds	r3, #48	; 0x30
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	003b      	movs	r3, r7
 8001fce:	729a      	strb	r2, [r3, #10]
		Text_LCD2[11] = U+48;
 8001fd0:	6a3b      	ldr	r3, [r7, #32]
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	3330      	adds	r3, #48	; 0x30
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	003b      	movs	r3, r7
 8001fda:	72da      	strb	r2, [r3, #11]

		//Affichage sur le LCD
		Affichage_LCD(Text_LCD1, Text_LCD2); //call Affichage_LCD
 8001fdc:	003a      	movs	r2, r7
 8001fde:	193b      	adds	r3, r7, r4
 8001fe0:	0011      	movs	r1, r2
 8001fe2:	0018      	movs	r0, r3
 8001fe4:	f7ff fd8c 	bl	8001b00 <Affichage_LCD>
  {
 8001fe8:	e723      	b.n	8001e32 <main+0x96>
 8001fea:	46c0      	nop			; (mov r8, r8)
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	08002ec4 	.word	0x08002ec4
 8001ff4:	08002ed4 	.word	0x08002ed4
 8001ff8:	40012400 	.word	0x40012400
 8001ffc:	40140000 	.word	0x40140000
 8002000:	40affe00 	.word	0x40affe00
 8002004:	408a5e35 	.word	0x408a5e35
 8002008:	45962400 	.word	0x45962400
 800200c:	447a0000 	.word	0x447a0000
 8002010:	00002710 	.word	0x00002710

08002014 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8002018:	2000      	movs	r0, #0
 800201a:	f7ff fe89 	bl	8001d30 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	f7ff fe9a 	bl	8001d58 <LL_FLASH_GetLatency>
 8002024:	1e03      	subs	r3, r0, #0
 8002026:	d1fb      	bne.n	8002020 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8002028:	2380      	movs	r3, #128	; 0x80
 800202a:	011b      	lsls	r3, r3, #4
 800202c:	0018      	movs	r0, r3
 800202e:	f7ff fe9f 	bl	8001d70 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 8002032:	f7ff fda5 	bl	8001b80 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	f7ff fdb0 	bl	8001b9c <LL_RCC_HSI_IsReady>
 800203c:	0003      	movs	r3, r0
 800203e:	2b01      	cmp	r3, #1
 8002040:	d1fa      	bne.n	8002038 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8002042:	2010      	movs	r0, #16
 8002044:	f7ff fdba 	bl	8001bbc <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002048:	2000      	movs	r0, #0
 800204a:	f7ff fded 	bl	8001c28 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800204e:	2000      	movs	r0, #0
 8002050:	f7ff fdfe 	bl	8001c50 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8002054:	2000      	movs	r0, #0
 8002056:	f7ff fe11 	bl	8001c7c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800205a:	2001      	movs	r0, #1
 800205c:	f7ff fdc4 	bl	8001be8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8002060:	46c0      	nop			; (mov r8, r8)
 8002062:	f7ff fdd5 	bl	8001c10 <LL_RCC_GetSysClkSource>
 8002066:	0003      	movs	r3, r0
 8002068:	2b04      	cmp	r3, #4
 800206a:	d1fa      	bne.n	8002062 <SystemClock_Config+0x4e>
  {

  }

  LL_Init1msTick(16000000);
 800206c:	4b07      	ldr	r3, [pc, #28]	; (800208c <SystemClock_Config+0x78>)
 800206e:	0018      	movs	r0, r3
 8002070:	f000 feb0 	bl	8002dd4 <LL_Init1msTick>

  LL_SetSystemCoreClock(16000000);
 8002074:	4b05      	ldr	r3, [pc, #20]	; (800208c <SystemClock_Config+0x78>)
 8002076:	0018      	movs	r0, r3
 8002078:	f000 fede 	bl	8002e38 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 800207c:	23c0      	movs	r3, #192	; 0xc0
 800207e:	031b      	lsls	r3, r3, #12
 8002080:	0018      	movs	r0, r3
 8002082:	f7ff fe11 	bl	8001ca8 <LL_RCC_SetUSARTClockSource>
}
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	00f42400 	.word	0x00f42400

08002090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002094:	e7fe      	b.n	8002094 <NMI_Handler+0x4>

08002096 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800209a:	e7fe      	b.n	800209a <HardFault_Handler+0x4>

0800209c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80020a0:	46c0      	nop			; (mov r8, r8)
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020b4:	46c0      	nop			; (mov r8, r8)
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020be:	46c0      	nop			; (mov r8, r8)
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <LL_APB1_GRP1_EnableClock>:
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80020cc:	4b07      	ldr	r3, [pc, #28]	; (80020ec <LL_APB1_GRP1_EnableClock+0x28>)
 80020ce:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <LL_APB1_GRP1_EnableClock+0x28>)
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80020d8:	4b04      	ldr	r3, [pc, #16]	; (80020ec <LL_APB1_GRP1_EnableClock+0x28>)
 80020da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	4013      	ands	r3, r2
 80020e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020e2:	68fb      	ldr	r3, [r7, #12]
}
 80020e4:	46c0      	nop			; (mov r8, r8)
 80020e6:	46bd      	mov	sp, r7
 80020e8:	b004      	add	sp, #16
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40021000 	.word	0x40021000

080020f0 <LL_IOP_GRP1_EnableClock>:
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 80020f8:	4b07      	ldr	r3, [pc, #28]	; (8002118 <LL_IOP_GRP1_EnableClock+0x28>)
 80020fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020fc:	4b06      	ldr	r3, [pc, #24]	; (8002118 <LL_IOP_GRP1_EnableClock+0x28>)
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	430a      	orrs	r2, r1
 8002102:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8002104:	4b04      	ldr	r3, [pc, #16]	; (8002118 <LL_IOP_GRP1_EnableClock+0x28>)
 8002106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	4013      	ands	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800210e:	68fb      	ldr	r3, [r7, #12]
}
 8002110:	46c0      	nop			; (mov r8, r8)
 8002112:	46bd      	mov	sp, r7
 8002114:	b004      	add	sp, #16
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40021000 	.word	0x40021000

0800211c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2201      	movs	r2, #1
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	601a      	str	r2, [r3, #0]
}
 8002130:	46c0      	nop			; (mov r8, r8)
 8002132:	46bd      	mov	sp, r7
 8002134:	b002      	add	sp, #8
 8002136:	bd80      	pop	{r7, pc}

08002138 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	4a07      	ldr	r2, [pc, #28]	; (8002164 <LL_USART_ConfigAsyncMode+0x2c>)
 8002146:	401a      	ands	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	222a      	movs	r2, #42	; 0x2a
 8002152:	4393      	bics	r3, r2
 8002154:	001a      	movs	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	609a      	str	r2, [r3, #8]
}
 800215a:	46c0      	nop			; (mov r8, r8)
 800215c:	46bd      	mov	sp, r7
 800215e:	b002      	add	sp, #8
 8002160:	bd80      	pop	{r7, pc}
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	ffffb7ff 	.word	0xffffb7ff

08002168 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002168:	b590      	push	{r4, r7, lr}
 800216a:	b08f      	sub	sp, #60	; 0x3c
 800216c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800216e:	241c      	movs	r4, #28
 8002170:	193b      	adds	r3, r7, r4
 8002172:	0018      	movs	r0, r3
 8002174:	231c      	movs	r3, #28
 8002176:	001a      	movs	r2, r3
 8002178:	2100      	movs	r1, #0
 800217a:	f000 fe8f 	bl	8002e9c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800217e:	1d3b      	adds	r3, r7, #4
 8002180:	0018      	movs	r0, r3
 8002182:	2318      	movs	r3, #24
 8002184:	001a      	movs	r2, r3
 8002186:	2100      	movs	r1, #0
 8002188:	f000 fe88 	bl	8002e9c <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800218c:	2380      	movs	r3, #128	; 0x80
 800218e:	029b      	lsls	r3, r3, #10
 8002190:	0018      	movs	r0, r3
 8002192:	f7ff ff97 	bl	80020c4 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8002196:	2001      	movs	r0, #1
 8002198:	f7ff ffaa 	bl	80020f0 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin;
 800219c:	1d3b      	adds	r3, r7, #4
 800219e:	2204      	movs	r2, #4
 80021a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80021a2:	1d3b      	adds	r3, r7, #4
 80021a4:	2202      	movs	r2, #2
 80021a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80021a8:	1d3b      	adds	r3, r7, #4
 80021aa:	2203      	movs	r2, #3
 80021ac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80021ae:	1d3b      	adds	r3, r7, #4
 80021b0:	2200      	movs	r2, #0
 80021b2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80021b4:	1d3b      	adds	r3, r7, #4
 80021b6:	2200      	movs	r2, #0
 80021b8:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80021ba:	1d3b      	adds	r3, r7, #4
 80021bc:	2204      	movs	r2, #4
 80021be:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 80021c0:	1d3a      	adds	r2, r7, #4
 80021c2:	23a0      	movs	r3, #160	; 0xa0
 80021c4:	05db      	lsls	r3, r3, #23
 80021c6:	0011      	movs	r1, r2
 80021c8:	0018      	movs	r0, r3
 80021ca:	f000 fab1 	bl	8002730 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = USART_RX_Pin;
 80021ce:	1d3b      	adds	r3, r7, #4
 80021d0:	2208      	movs	r2, #8
 80021d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80021d4:	1d3b      	adds	r3, r7, #4
 80021d6:	2202      	movs	r2, #2
 80021d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80021da:	1d3b      	adds	r3, r7, #4
 80021dc:	2203      	movs	r2, #3
 80021de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80021e0:	1d3b      	adds	r3, r7, #4
 80021e2:	2200      	movs	r2, #0
 80021e4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80021e6:	1d3b      	adds	r3, r7, #4
 80021e8:	2200      	movs	r2, #0
 80021ea:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80021ec:	1d3b      	adds	r3, r7, #4
 80021ee:	2204      	movs	r2, #4
 80021f0:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 80021f2:	1d3a      	adds	r2, r7, #4
 80021f4:	23a0      	movs	r3, #160	; 0xa0
 80021f6:	05db      	lsls	r3, r3, #23
 80021f8:	0011      	movs	r1, r2
 80021fa:	0018      	movs	r0, r3
 80021fc:	f000 fa98 	bl	8002730 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002200:	193b      	adds	r3, r7, r4
 8002202:	22e1      	movs	r2, #225	; 0xe1
 8002204:	0252      	lsls	r2, r2, #9
 8002206:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002208:	0021      	movs	r1, r4
 800220a:	187b      	adds	r3, r7, r1
 800220c:	2200      	movs	r2, #0
 800220e:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002210:	187b      	adds	r3, r7, r1
 8002212:	2200      	movs	r2, #0
 8002214:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002216:	187b      	adds	r3, r7, r1
 8002218:	2200      	movs	r2, #0
 800221a:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800221c:	187b      	adds	r3, r7, r1
 800221e:	220c      	movs	r2, #12
 8002220:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002222:	187b      	adds	r3, r7, r1
 8002224:	2200      	movs	r2, #0
 8002226:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002228:	187b      	adds	r3, r7, r1
 800222a:	2200      	movs	r2, #0
 800222c:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART2, &USART_InitStruct);
 800222e:	187b      	adds	r3, r7, r1
 8002230:	4a08      	ldr	r2, [pc, #32]	; (8002254 <MX_USART2_UART_Init+0xec>)
 8002232:	0019      	movs	r1, r3
 8002234:	0010      	movs	r0, r2
 8002236:	f000 fd4f 	bl	8002cd8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 800223a:	4b06      	ldr	r3, [pc, #24]	; (8002254 <MX_USART2_UART_Init+0xec>)
 800223c:	0018      	movs	r0, r3
 800223e:	f7ff ff7b 	bl	8002138 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8002242:	4b04      	ldr	r3, [pc, #16]	; (8002254 <MX_USART2_UART_Init+0xec>)
 8002244:	0018      	movs	r0, r3
 8002246:	f7ff ff69 	bl	800211c <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800224a:	46c0      	nop			; (mov r8, r8)
 800224c:	46bd      	mov	sp, r7
 800224e:	b00f      	add	sp, #60	; 0x3c
 8002250:	bd90      	pop	{r4, r7, pc}
 8002252:	46c0      	nop			; (mov r8, r8)
 8002254:	40004400 	.word	0x40004400

08002258 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8002258:	480d      	ldr	r0, [pc, #52]	; (8002290 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800225a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800225c:	480d      	ldr	r0, [pc, #52]	; (8002294 <LoopForever+0x6>)
  ldr r1, =_edata
 800225e:	490e      	ldr	r1, [pc, #56]	; (8002298 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002260:	4a0e      	ldr	r2, [pc, #56]	; (800229c <LoopForever+0xe>)
  movs r3, #0
 8002262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002264:	e002      	b.n	800226c <LoopCopyDataInit>

08002266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800226a:	3304      	adds	r3, #4

0800226c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800226c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800226e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002270:	d3f9      	bcc.n	8002266 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002272:	4a0b      	ldr	r2, [pc, #44]	; (80022a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002274:	4c0b      	ldr	r4, [pc, #44]	; (80022a4 <LoopForever+0x16>)
  movs r3, #0
 8002276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002278:	e001      	b.n	800227e <LoopFillZerobss>

0800227a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800227a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800227c:	3204      	adds	r2, #4

0800227e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800227e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002280:	d3fb      	bcc.n	800227a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002282:	f7ff ff1a 	bl	80020ba <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002286:	f000 fde5 	bl	8002e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800228a:	f7ff fd87 	bl	8001d9c <main>

0800228e <LoopForever>:

LoopForever:
    b LoopForever
 800228e:	e7fe      	b.n	800228e <LoopForever>
  ldr   r0, =_estack
 8002290:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002298:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800229c:	08002fd0 	.word	0x08002fd0
  ldr r2, =_sbss
 80022a0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80022a4:	20000020 	.word	0x20000020

080022a8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022a8:	e7fe      	b.n	80022a8 <ADC1_COMP_IRQHandler>

080022aa <LL_ADC_IsEnabled>:
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b082      	sub	sp, #8
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	2201      	movs	r2, #1
 80022b8:	4013      	ands	r3, r2
 80022ba:	3b01      	subs	r3, #1
 80022bc:	425a      	negs	r2, r3
 80022be:	4153      	adcs	r3, r2
 80022c0:	b2db      	uxtb	r3, r3
}
 80022c2:	0018      	movs	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	b002      	add	sp, #8
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80022d6:	230f      	movs	r3, #15
 80022d8:	18fb      	adds	r3, r7, r3
 80022da:	2200      	movs	r2, #0
 80022dc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	0018      	movs	r0, r3
 80022e2:	f7ff ffe2 	bl	80022aa <LL_ADC_IsEnabled>
 80022e6:	1e03      	subs	r3, r0, #0
 80022e8:	d118      	bne.n	800231c <LL_ADC_Init+0x50>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	4a11      	ldr	r2, [pc, #68]	; (8002334 <LL_ADC_Init+0x68>)
 80022f0:	401a      	ands	r2, r3
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	6859      	ldr	r1, [r3, #4]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	4319      	orrs	r1, r3
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	430b      	orrs	r3, r1
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	60da      	str	r2, [r3, #12]
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );
    
    MODIFY_REG(ADCx->CFGR2,
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	089a      	lsrs	r2, r3, #2
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	431a      	orrs	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	611a      	str	r2, [r3, #16]
 800231a:	e003      	b.n	8002324 <LL_ADC_Init+0x58>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800231c:	230f      	movs	r3, #15
 800231e:	18fb      	adds	r3, r7, r3
 8002320:	2201      	movs	r2, #1
 8002322:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8002324:	230f      	movs	r3, #15
 8002326:	18fb      	adds	r3, r7, r3
 8002328:	781b      	ldrb	r3, [r3, #0]
}
 800232a:	0018      	movs	r0, r3
 800232c:	46bd      	mov	sp, r7
 800232e:	b004      	add	sp, #16
 8002330:	bd80      	pop	{r7, pc}
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	ffff3fc7 	.word	0xffff3fc7

08002338 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002342:	230f      	movs	r3, #15
 8002344:	18fb      	adds	r3, r7, r3
 8002346:	2200      	movs	r2, #0
 8002348:	701a      	strb	r2, [r3, #0]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	0018      	movs	r0, r3
 800234e:	f7ff ffac 	bl	80022aa <LL_ADC_IsEnabled>
 8002352:	1e03      	subs	r3, r0, #0
 8002354:	d115      	bne.n	8002382 <LL_ADC_REG_Init+0x4a>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    MODIFY_REG(ADCx->CFGR1,
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	4a0f      	ldr	r2, [pc, #60]	; (8002398 <LL_ADC_REG_Init+0x60>)
 800235c:	401a      	ands	r2, r3
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	6819      	ldr	r1, [r3, #0]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	4319      	orrs	r1, r3
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	4319      	orrs	r1, r3
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	4319      	orrs	r1, r3
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	430b      	orrs	r3, r1
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	60da      	str	r2, [r3, #12]
 8002380:	e003      	b.n	800238a <LL_ADC_REG_Init+0x52>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002382:	230f      	movs	r3, #15
 8002384:	18fb      	adds	r3, r7, r3
 8002386:	2201      	movs	r2, #1
 8002388:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800238a:	230f      	movs	r3, #15
 800238c:	18fb      	adds	r3, r7, r3
 800238e:	781b      	ldrb	r3, [r3, #0]
}
 8002390:	0018      	movs	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	b004      	add	sp, #16
 8002396:	bd80      	pop	{r7, pc}
 8002398:	fffec23c 	.word	0xfffec23c

0800239c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80023a4:	4b04      	ldr	r3, [pc, #16]	; (80023b8 <LL_EXTI_EnableIT_0_31+0x1c>)
 80023a6:	6819      	ldr	r1, [r3, #0]
 80023a8:	4b03      	ldr	r3, [pc, #12]	; (80023b8 <LL_EXTI_EnableIT_0_31+0x1c>)
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	601a      	str	r2, [r3, #0]
}
 80023b0:	46c0      	nop			; (mov r8, r8)
 80023b2:	46bd      	mov	sp, r7
 80023b4:	b002      	add	sp, #8
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40010400 	.word	0x40010400

080023bc <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <LL_EXTI_DisableIT_0_31+0x20>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	43d9      	mvns	r1, r3
 80023cc:	4b03      	ldr	r3, [pc, #12]	; (80023dc <LL_EXTI_DisableIT_0_31+0x20>)
 80023ce:	400a      	ands	r2, r1
 80023d0:	601a      	str	r2, [r3, #0]
}
 80023d2:	46c0      	nop			; (mov r8, r8)
 80023d4:	46bd      	mov	sp, r7
 80023d6:	b002      	add	sp, #8
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	46c0      	nop			; (mov r8, r8)
 80023dc:	40010400 	.word	0x40010400

080023e0 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80023e8:	4b04      	ldr	r3, [pc, #16]	; (80023fc <LL_EXTI_EnableEvent_0_31+0x1c>)
 80023ea:	6859      	ldr	r1, [r3, #4]
 80023ec:	4b03      	ldr	r3, [pc, #12]	; (80023fc <LL_EXTI_EnableEvent_0_31+0x1c>)
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	430a      	orrs	r2, r1
 80023f2:	605a      	str	r2, [r3, #4]

}
 80023f4:	46c0      	nop			; (mov r8, r8)
 80023f6:	46bd      	mov	sp, r7
 80023f8:	b002      	add	sp, #8
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40010400 	.word	0x40010400

08002400 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002408:	4b05      	ldr	r3, [pc, #20]	; (8002420 <LL_EXTI_DisableEvent_0_31+0x20>)
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	43d9      	mvns	r1, r3
 8002410:	4b03      	ldr	r3, [pc, #12]	; (8002420 <LL_EXTI_DisableEvent_0_31+0x20>)
 8002412:	400a      	ands	r2, r1
 8002414:	605a      	str	r2, [r3, #4]
}
 8002416:	46c0      	nop			; (mov r8, r8)
 8002418:	46bd      	mov	sp, r7
 800241a:	b002      	add	sp, #8
 800241c:	bd80      	pop	{r7, pc}
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	40010400 	.word	0x40010400

08002424 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 800242c:	4b04      	ldr	r3, [pc, #16]	; (8002440 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800242e:	6899      	ldr	r1, [r3, #8]
 8002430:	4b03      	ldr	r3, [pc, #12]	; (8002440 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	430a      	orrs	r2, r1
 8002436:	609a      	str	r2, [r3, #8]

}
 8002438:	46c0      	nop			; (mov r8, r8)
 800243a:	46bd      	mov	sp, r7
 800243c:	b002      	add	sp, #8
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40010400 	.word	0x40010400

08002444 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800244c:	4b05      	ldr	r3, [pc, #20]	; (8002464 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	43d9      	mvns	r1, r3
 8002454:	4b03      	ldr	r3, [pc, #12]	; (8002464 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002456:	400a      	ands	r2, r1
 8002458:	609a      	str	r2, [r3, #8]

}
 800245a:	46c0      	nop			; (mov r8, r8)
 800245c:	46bd      	mov	sp, r7
 800245e:	b002      	add	sp, #8
 8002460:	bd80      	pop	{r7, pc}
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	40010400 	.word	0x40010400

08002468 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002470:	4b04      	ldr	r3, [pc, #16]	; (8002484 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002472:	68d9      	ldr	r1, [r3, #12]
 8002474:	4b03      	ldr	r3, [pc, #12]	; (8002484 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	430a      	orrs	r2, r1
 800247a:	60da      	str	r2, [r3, #12]
}
 800247c:	46c0      	nop			; (mov r8, r8)
 800247e:	46bd      	mov	sp, r7
 8002480:	b002      	add	sp, #8
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40010400 	.word	0x40010400

08002488 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002490:	4b05      	ldr	r3, [pc, #20]	; (80024a8 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002492:	68da      	ldr	r2, [r3, #12]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	43d9      	mvns	r1, r3
 8002498:	4b03      	ldr	r3, [pc, #12]	; (80024a8 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800249a:	400a      	ands	r2, r1
 800249c:	60da      	str	r2, [r3, #12]
}
 800249e:	46c0      	nop			; (mov r8, r8)
 80024a0:	46bd      	mov	sp, r7
 80024a2:	b002      	add	sp, #8
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	46c0      	nop			; (mov r8, r8)
 80024a8:	40010400 	.word	0x40010400

080024ac <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80024b4:	230f      	movs	r3, #15
 80024b6:	18fb      	adds	r3, r7, r3
 80024b8:	2200      	movs	r2, #0
 80024ba:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	791b      	ldrb	r3, [r3, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d100      	bne.n	80024c6 <LL_EXTI_Init+0x1a>
 80024c4:	e068      	b.n	8002598 <LL_EXTI_Init+0xec>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d100      	bne.n	80024d0 <LL_EXTI_Init+0x24>
 80024ce:	e06e      	b.n	80025ae <LL_EXTI_Init+0x102>
    {
      switch (EXTI_InitStruct->Mode)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	795b      	ldrb	r3, [r3, #5]
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d01b      	beq.n	8002510 <LL_EXTI_Init+0x64>
 80024d8:	dc25      	bgt.n	8002526 <LL_EXTI_Init+0x7a>
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d002      	beq.n	80024e4 <LL_EXTI_Init+0x38>
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d00b      	beq.n	80024fa <LL_EXTI_Init+0x4e>
 80024e2:	e020      	b.n	8002526 <LL_EXTI_Init+0x7a>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	0018      	movs	r0, r3
 80024ea:	f7ff ff89 	bl	8002400 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	0018      	movs	r0, r3
 80024f4:	f7ff ff52 	bl	800239c <LL_EXTI_EnableIT_0_31>
          break;
 80024f8:	e01a      	b.n	8002530 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	0018      	movs	r0, r3
 8002500:	f7ff ff5c 	bl	80023bc <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	0018      	movs	r0, r3
 800250a:	f7ff ff69 	bl	80023e0 <LL_EXTI_EnableEvent_0_31>
          break;
 800250e:	e00f      	b.n	8002530 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	0018      	movs	r0, r3
 8002516:	f7ff ff41 	bl	800239c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	0018      	movs	r0, r3
 8002520:	f7ff ff5e 	bl	80023e0 <LL_EXTI_EnableEvent_0_31>
          break;
 8002524:	e004      	b.n	8002530 <LL_EXTI_Init+0x84>
        default:
          status = ERROR;
 8002526:	230f      	movs	r3, #15
 8002528:	18fb      	adds	r3, r7, r3
 800252a:	2201      	movs	r2, #1
 800252c:	701a      	strb	r2, [r3, #0]
          break;
 800252e:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	799b      	ldrb	r3, [r3, #6]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d03a      	beq.n	80025ae <LL_EXTI_Init+0x102>
      {
        switch (EXTI_InitStruct->Trigger)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	799b      	ldrb	r3, [r3, #6]
 800253c:	2b03      	cmp	r3, #3
 800253e:	d01b      	beq.n	8002578 <LL_EXTI_Init+0xcc>
 8002540:	dc25      	bgt.n	800258e <LL_EXTI_Init+0xe2>
 8002542:	2b01      	cmp	r3, #1
 8002544:	d002      	beq.n	800254c <LL_EXTI_Init+0xa0>
 8002546:	2b02      	cmp	r3, #2
 8002548:	d00b      	beq.n	8002562 <LL_EXTI_Init+0xb6>
 800254a:	e020      	b.n	800258e <LL_EXTI_Init+0xe2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	0018      	movs	r0, r3
 8002552:	f7ff ff99 	bl	8002488 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	0018      	movs	r0, r3
 800255c:	f7ff ff62 	bl	8002424 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002560:	e026      	b.n	80025b0 <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	0018      	movs	r0, r3
 8002568:	f7ff ff6c 	bl	8002444 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	0018      	movs	r0, r3
 8002572:	f7ff ff79 	bl	8002468 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002576:	e01b      	b.n	80025b0 <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	0018      	movs	r0, r3
 800257e:	f7ff ff51 	bl	8002424 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	0018      	movs	r0, r3
 8002588:	f7ff ff6e 	bl	8002468 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800258c:	e010      	b.n	80025b0 <LL_EXTI_Init+0x104>
          default:
            status = ERROR;
 800258e:	230f      	movs	r3, #15
 8002590:	18fb      	adds	r3, r7, r3
 8002592:	2201      	movs	r2, #1
 8002594:	701a      	strb	r2, [r3, #0]
            break;
 8002596:	e00b      	b.n	80025b0 <LL_EXTI_Init+0x104>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	0018      	movs	r0, r3
 800259e:	f7ff ff0d 	bl	80023bc <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	0018      	movs	r0, r3
 80025a8:	f7ff ff2a 	bl	8002400 <LL_EXTI_DisableEvent_0_31>
 80025ac:	e000      	b.n	80025b0 <LL_EXTI_Init+0x104>
      }
 80025ae:	46c0      	nop			; (mov r8, r8)
  }
  return status;
 80025b0:	230f      	movs	r3, #15
 80025b2:	18fb      	adds	r3, r7, r3
 80025b4:	781b      	ldrb	r3, [r3, #0]
}
 80025b6:	0018      	movs	r0, r3
 80025b8:	46bd      	mov	sp, r7
 80025ba:	b004      	add	sp, #16
 80025bc:	bd80      	pop	{r7, pc}

080025be <LL_GPIO_SetPinMode>:
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b084      	sub	sp, #16
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	60f8      	str	r0, [r7, #12]
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6819      	ldr	r1, [r3, #0]
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	435b      	muls	r3, r3
 80025d2:	001a      	movs	r2, r3
 80025d4:	0013      	movs	r3, r2
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	189b      	adds	r3, r3, r2
 80025da:	43db      	mvns	r3, r3
 80025dc:	400b      	ands	r3, r1
 80025de:	001a      	movs	r2, r3
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	435b      	muls	r3, r3
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	434b      	muls	r3, r1
 80025e8:	431a      	orrs	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	601a      	str	r2, [r3, #0]
}
 80025ee:	46c0      	nop			; (mov r8, r8)
 80025f0:	46bd      	mov	sp, r7
 80025f2:	b004      	add	sp, #16
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <LL_GPIO_SetPinOutputType>:
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b084      	sub	sp, #16
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	60f8      	str	r0, [r7, #12]
 80025fe:	60b9      	str	r1, [r7, #8]
 8002600:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	43d2      	mvns	r2, r2
 800260a:	401a      	ands	r2, r3
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	434b      	muls	r3, r1
 8002612:	431a      	orrs	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	605a      	str	r2, [r3, #4]
}
 8002618:	46c0      	nop			; (mov r8, r8)
 800261a:	46bd      	mov	sp, r7
 800261c:	b004      	add	sp, #16
 800261e:	bd80      	pop	{r7, pc}

08002620 <LL_GPIO_SetPinSpeed>:
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6899      	ldr	r1, [r3, #8]
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	435b      	muls	r3, r3
 8002634:	001a      	movs	r2, r3
 8002636:	0013      	movs	r3, r2
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	189b      	adds	r3, r3, r2
 800263c:	43db      	mvns	r3, r3
 800263e:	400b      	ands	r3, r1
 8002640:	001a      	movs	r2, r3
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	435b      	muls	r3, r3
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	434b      	muls	r3, r1
 800264a:	431a      	orrs	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	609a      	str	r2, [r3, #8]
}
 8002650:	46c0      	nop			; (mov r8, r8)
 8002652:	46bd      	mov	sp, r7
 8002654:	b004      	add	sp, #16
 8002656:	bd80      	pop	{r7, pc}

08002658 <LL_GPIO_SetPinPull>:
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	68d9      	ldr	r1, [r3, #12]
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	435b      	muls	r3, r3
 800266c:	001a      	movs	r2, r3
 800266e:	0013      	movs	r3, r2
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	189b      	adds	r3, r3, r2
 8002674:	43db      	mvns	r3, r3
 8002676:	400b      	ands	r3, r1
 8002678:	001a      	movs	r2, r3
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	435b      	muls	r3, r3
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	434b      	muls	r3, r1
 8002682:	431a      	orrs	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	60da      	str	r2, [r3, #12]
}
 8002688:	46c0      	nop			; (mov r8, r8)
 800268a:	46bd      	mov	sp, r7
 800268c:	b004      	add	sp, #16
 800268e:	bd80      	pop	{r7, pc}

08002690 <LL_GPIO_SetAFPin_0_7>:
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6a19      	ldr	r1, [r3, #32]
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	435b      	muls	r3, r3
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	4353      	muls	r3, r2
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	435a      	muls	r2, r3
 80026ac:	0013      	movs	r3, r2
 80026ae:	011b      	lsls	r3, r3, #4
 80026b0:	1a9b      	subs	r3, r3, r2
 80026b2:	43db      	mvns	r3, r3
 80026b4:	400b      	ands	r3, r1
 80026b6:	001a      	movs	r2, r3
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	435b      	muls	r3, r3
 80026bc:	68b9      	ldr	r1, [r7, #8]
 80026be:	434b      	muls	r3, r1
 80026c0:	68b9      	ldr	r1, [r7, #8]
 80026c2:	434b      	muls	r3, r1
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	434b      	muls	r3, r1
 80026c8:	431a      	orrs	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	621a      	str	r2, [r3, #32]
}
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	46bd      	mov	sp, r7
 80026d2:	b004      	add	sp, #16
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <LL_GPIO_SetAFPin_8_15>:
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b084      	sub	sp, #16
 80026da:	af00      	add	r7, sp, #0
 80026dc:	60f8      	str	r0, [r7, #12]
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	0a1b      	lsrs	r3, r3, #8
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	0a12      	lsrs	r2, r2, #8
 80026ee:	4353      	muls	r3, r2
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	0a12      	lsrs	r2, r2, #8
 80026f4:	4353      	muls	r3, r2
 80026f6:	68ba      	ldr	r2, [r7, #8]
 80026f8:	0a12      	lsrs	r2, r2, #8
 80026fa:	435a      	muls	r2, r3
 80026fc:	0013      	movs	r3, r2
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	1a9b      	subs	r3, r3, r2
 8002702:	43db      	mvns	r3, r3
 8002704:	400b      	ands	r3, r1
 8002706:	001a      	movs	r2, r3
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	0a1b      	lsrs	r3, r3, #8
 800270c:	68b9      	ldr	r1, [r7, #8]
 800270e:	0a09      	lsrs	r1, r1, #8
 8002710:	434b      	muls	r3, r1
 8002712:	68b9      	ldr	r1, [r7, #8]
 8002714:	0a09      	lsrs	r1, r1, #8
 8002716:	434b      	muls	r3, r1
 8002718:	68b9      	ldr	r1, [r7, #8]
 800271a:	0a09      	lsrs	r1, r1, #8
 800271c:	434b      	muls	r3, r1
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	434b      	muls	r3, r1
 8002722:	431a      	orrs	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002728:	46c0      	nop			; (mov r8, r8)
 800272a:	46bd      	mov	sp, r7
 800272c:	b004      	add	sp, #16
 800272e:	bd80      	pop	{r7, pc}

08002730 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800273a:	2300      	movs	r3, #0
 800273c:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 800273e:	2300      	movs	r3, #0
 8002740:	60bb      	str	r3, [r7, #8]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002742:	e048      	b.n	80027d6 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2101      	movs	r1, #1
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	4091      	lsls	r1, r2
 800274e:	000a      	movs	r2, r1
 8002750:	4013      	ands	r3, r2
 8002752:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d03a      	beq.n	80027d0 <LL_GPIO_Init+0xa0>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d003      	beq.n	800276a <LL_GPIO_Init+0x3a>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b02      	cmp	r3, #2
 8002768:	d10e      	bne.n	8002788 <LL_GPIO_Init+0x58>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	68b9      	ldr	r1, [r7, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	0018      	movs	r0, r3
 8002774:	f7ff ff54 	bl	8002620 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	6819      	ldr	r1, [r3, #0]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	0018      	movs	r0, r3
 8002784:	f7ff ff37 	bl	80025f6 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	68b9      	ldr	r1, [r7, #8]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	0018      	movs	r0, r3
 8002792:	f7ff ff61 	bl	8002658 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b02      	cmp	r3, #2
 800279c:	d111      	bne.n	80027c2 <LL_GPIO_Init+0x92>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	2bff      	cmp	r3, #255	; 0xff
 80027a2:	d807      	bhi.n	80027b4 <LL_GPIO_Init+0x84>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	695a      	ldr	r2, [r3, #20]
 80027a8:	68b9      	ldr	r1, [r7, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	0018      	movs	r0, r3
 80027ae:	f7ff ff6f 	bl	8002690 <LL_GPIO_SetAFPin_0_7>
 80027b2:	e006      	b.n	80027c2 <LL_GPIO_Init+0x92>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	695a      	ldr	r2, [r3, #20]
 80027b8:	68b9      	ldr	r1, [r7, #8]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	0018      	movs	r0, r3
 80027be:	f7ff ff8a 	bl	80026d6 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	68b9      	ldr	r1, [r7, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	0018      	movs	r0, r3
 80027cc:	f7ff fef7 	bl	80025be <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	3301      	adds	r3, #1
 80027d4:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	40da      	lsrs	r2, r3
 80027de:	1e13      	subs	r3, r2, #0
 80027e0:	d1b0      	bne.n	8002744 <LL_GPIO_Init+0x14>
  }


  return (SUCCESS);
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	0018      	movs	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	b004      	add	sp, #16
 80027ea:	bd80      	pop	{r7, pc}

080027ec <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80027f0:	4b05      	ldr	r3, [pc, #20]	; (8002808 <LL_RCC_HSI_IsReady+0x1c>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2204      	movs	r2, #4
 80027f6:	4013      	ands	r3, r2
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d101      	bne.n	8002800 <LL_RCC_HSI_IsReady+0x14>
 80027fc:	2301      	movs	r3, #1
 80027fe:	e000      	b.n	8002802 <LL_RCC_HSI_IsReady+0x16>
 8002800:	2300      	movs	r3, #0
}
 8002802:	0018      	movs	r0, r3
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40021000 	.word	0x40021000

0800280c <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll CSR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 8002810:	4b07      	ldr	r3, [pc, #28]	; (8002830 <LL_RCC_LSE_IsReady+0x24>)
 8002812:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002814:	2380      	movs	r3, #128	; 0x80
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	401a      	ands	r2, r3
 800281a:	2380      	movs	r3, #128	; 0x80
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	429a      	cmp	r2, r3
 8002820:	d101      	bne.n	8002826 <LL_RCC_LSE_IsReady+0x1a>
 8002822:	2301      	movs	r3, #1
 8002824:	e000      	b.n	8002828 <LL_RCC_LSE_IsReady+0x1c>
 8002826:	2300      	movs	r3, #0
}
 8002828:	0018      	movs	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	40021000 	.word	0x40021000

08002834 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_4
  *         @arg @ref LL_RCC_MSIRANGE_5
  *         @arg @ref LL_RCC_MSIRANGE_6
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 8002838:	4b03      	ldr	r3, [pc, #12]	; (8002848 <LL_RCC_MSI_GetRange+0x14>)
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	23e0      	movs	r3, #224	; 0xe0
 800283e:	021b      	lsls	r3, r3, #8
 8002840:	4013      	ands	r3, r2
}
 8002842:	0018      	movs	r0, r3
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40021000 	.word	0x40021000

0800284c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002850:	4b03      	ldr	r3, [pc, #12]	; (8002860 <LL_RCC_GetSysClkSource+0x14>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	220c      	movs	r2, #12
 8002856:	4013      	ands	r3, r2
}
 8002858:	0018      	movs	r0, r3
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	46c0      	nop			; (mov r8, r8)
 8002860:	40021000 	.word	0x40021000

08002864 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002868:	4b03      	ldr	r3, [pc, #12]	; (8002878 <LL_RCC_GetAHBPrescaler+0x14>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	22f0      	movs	r2, #240	; 0xf0
 800286e:	4013      	ands	r3, r2
}
 8002870:	0018      	movs	r0, r3
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	40021000 	.word	0x40021000

0800287c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002880:	4b03      	ldr	r3, [pc, #12]	; (8002890 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002882:	68da      	ldr	r2, [r3, #12]
 8002884:	23e0      	movs	r3, #224	; 0xe0
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	4013      	ands	r3, r2
}
 800288a:	0018      	movs	r0, r3
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40021000 	.word	0x40021000

08002894 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002898:	4b03      	ldr	r3, [pc, #12]	; (80028a8 <LL_RCC_GetAPB2Prescaler+0x14>)
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	23e0      	movs	r3, #224	; 0xe0
 800289e:	019b      	lsls	r3, r3, #6
 80028a0:	4013      	ands	r3, r2
}
 80028a2:	0018      	movs	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40021000 	.word	0x40021000

080028ac <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART2_CLKSOURCE_LSE
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80028b4:	4b05      	ldr	r3, [pc, #20]	; (80028cc <LL_RCC_GetUSARTClockSource+0x20>)
 80028b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	401a      	ands	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	041b      	lsls	r3, r3, #16
 80028c0:	4313      	orrs	r3, r2
}
 80028c2:	0018      	movs	r0, r3
 80028c4:	46bd      	mov	sp, r7
 80028c6:	b002      	add	sp, #8
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	46c0      	nop			; (mov r8, r8)
 80028cc:	40021000 	.word	0x40021000

080028d0 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80028d4:	4b03      	ldr	r3, [pc, #12]	; (80028e4 <LL_RCC_PLL_GetMainSource+0x14>)
 80028d6:	68da      	ldr	r2, [r3, #12]
 80028d8:	2380      	movs	r3, #128	; 0x80
 80028da:	025b      	lsls	r3, r3, #9
 80028dc:	4013      	ands	r3, r2
}
 80028de:	0018      	movs	r0, r3
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40021000 	.word	0x40021000

080028e8 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_24
  *         @arg @ref LL_RCC_PLL_MUL_32
  *         @arg @ref LL_RCC_PLL_MUL_48
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 80028ec:	4b03      	ldr	r3, [pc, #12]	; (80028fc <LL_RCC_PLL_GetMultiplicator+0x14>)
 80028ee:	68da      	ldr	r2, [r3, #12]
 80028f0:	23f0      	movs	r3, #240	; 0xf0
 80028f2:	039b      	lsls	r3, r3, #14
 80028f4:	4013      	ands	r3, r2
}
 80028f6:	0018      	movs	r0, r3
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40021000 	.word	0x40021000

08002900 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLL_DIV_2
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 8002904:	4b03      	ldr	r3, [pc, #12]	; (8002914 <LL_RCC_PLL_GetDivider+0x14>)
 8002906:	68da      	ldr	r2, [r3, #12]
 8002908:	23c0      	movs	r3, #192	; 0xc0
 800290a:	041b      	lsls	r3, r3, #16
 800290c:	4013      	ands	r3, r2
}
 800290e:	0018      	movs	r0, r3
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40021000 	.word	0x40021000

08002918 <LL_RCC_IsActiveFlag_HSIDIV>:
  * @brief  Check if HSI Divider is enabled (it divides by 4)
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 800291c:	4b05      	ldr	r3, [pc, #20]	; (8002934 <LL_RCC_IsActiveFlag_HSIDIV+0x1c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2210      	movs	r2, #16
 8002922:	4013      	ands	r3, r2
 8002924:	2b10      	cmp	r3, #16
 8002926:	d101      	bne.n	800292c <LL_RCC_IsActiveFlag_HSIDIV+0x14>
 8002928:	2301      	movs	r3, #1
 800292a:	e000      	b.n	800292e <LL_RCC_IsActiveFlag_HSIDIV+0x16>
 800292c:	2300      	movs	r3, #0
}
 800292e:	0018      	movs	r0, r3
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40021000 	.word	0x40021000

08002938 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002940:	2300      	movs	r3, #0
 8002942:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CCIPR_USART1SEL)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b03      	cmp	r3, #3
 8002948:	d139      	bne.n	80029be <LL_RCC_GetUSARTClockFreq+0x86>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	0018      	movs	r0, r3
 800294e:	f7ff ffad 	bl	80028ac <LL_RCC_GetUSARTClockSource>
 8002952:	0003      	movs	r3, r0
 8002954:	4a40      	ldr	r2, [pc, #256]	; (8002a58 <LL_RCC_GetUSARTClockFreq+0x120>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d01c      	beq.n	8002994 <LL_RCC_GetUSARTClockFreq+0x5c>
 800295a:	4a3f      	ldr	r2, [pc, #252]	; (8002a58 <LL_RCC_GetUSARTClockFreq+0x120>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d821      	bhi.n	80029a4 <LL_RCC_GetUSARTClockFreq+0x6c>
 8002960:	4a3e      	ldr	r2, [pc, #248]	; (8002a5c <LL_RCC_GetUSARTClockFreq+0x124>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d003      	beq.n	800296e <LL_RCC_GetUSARTClockFreq+0x36>
 8002966:	4a3e      	ldr	r2, [pc, #248]	; (8002a60 <LL_RCC_GetUSARTClockFreq+0x128>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d005      	beq.n	8002978 <LL_RCC_GetUSARTClockFreq+0x40>
 800296c:	e01a      	b.n	80029a4 <LL_RCC_GetUSARTClockFreq+0x6c>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800296e:	f000 f883 	bl	8002a78 <RCC_GetSystemClockFreq>
 8002972:	0003      	movs	r3, r0
 8002974:	60fb      	str	r3, [r7, #12]
        break;
 8002976:	e027      	b.n	80029c8 <LL_RCC_GetUSARTClockFreq+0x90>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002978:	f7ff ff38 	bl	80027ec <LL_RCC_HSI_IsReady>
 800297c:	1e03      	subs	r3, r0, #0
 800297e:	d020      	beq.n	80029c2 <LL_RCC_GetUSARTClockFreq+0x8a>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8002980:	f7ff ffca 	bl	8002918 <LL_RCC_IsActiveFlag_HSIDIV>
 8002984:	1e03      	subs	r3, r0, #0
 8002986:	d002      	beq.n	800298e <LL_RCC_GetUSARTClockFreq+0x56>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 8002988:	4b36      	ldr	r3, [pc, #216]	; (8002a64 <LL_RCC_GetUSARTClockFreq+0x12c>)
 800298a:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 800298c:	e019      	b.n	80029c2 <LL_RCC_GetUSARTClockFreq+0x8a>
            usart_frequency = HSI_VALUE;
 800298e:	4b36      	ldr	r3, [pc, #216]	; (8002a68 <LL_RCC_GetUSARTClockFreq+0x130>)
 8002990:	60fb      	str	r3, [r7, #12]
        break;
 8002992:	e016      	b.n	80029c2 <LL_RCC_GetUSARTClockFreq+0x8a>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8002994:	f7ff ff3a 	bl	800280c <LL_RCC_LSE_IsReady>
 8002998:	1e03      	subs	r3, r0, #0
 800299a:	d014      	beq.n	80029c6 <LL_RCC_GetUSARTClockFreq+0x8e>
        {
          usart_frequency = LSE_VALUE;
 800299c:	2380      	movs	r3, #128	; 0x80
 800299e:	021b      	lsls	r3, r3, #8
 80029a0:	60fb      	str	r3, [r7, #12]
        }
        break;
 80029a2:	e010      	b.n	80029c6 <LL_RCC_GetUSARTClockFreq+0x8e>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80029a4:	f000 f868 	bl	8002a78 <RCC_GetSystemClockFreq>
 80029a8:	0003      	movs	r3, r0
 80029aa:	0018      	movs	r0, r3
 80029ac:	f000 f8a8 	bl	8002b00 <RCC_GetHCLKClockFreq>
 80029b0:	0003      	movs	r3, r0
 80029b2:	0018      	movs	r0, r3
 80029b4:	f000 f8ce 	bl	8002b54 <RCC_GetPCLK2ClockFreq>
 80029b8:	0003      	movs	r3, r0
 80029ba:	60fb      	str	r3, [r7, #12]
        break;
 80029bc:	e004      	b.n	80029c8 <LL_RCC_GetUSARTClockFreq+0x90>
    }
  }
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	e002      	b.n	80029c8 <LL_RCC_GetUSARTClockFreq+0x90>
        break;
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	e000      	b.n	80029c8 <LL_RCC_GetUSARTClockFreq+0x90>
        break;
 80029c6:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART1SEL  */

#if defined(RCC_CCIPR_USART2SEL)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b0c      	cmp	r3, #12
 80029cc:	d139      	bne.n	8002a42 <LL_RCC_GetUSARTClockFreq+0x10a>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	0018      	movs	r0, r3
 80029d2:	f7ff ff6b 	bl	80028ac <LL_RCC_GetUSARTClockSource>
 80029d6:	0003      	movs	r3, r0
 80029d8:	4a24      	ldr	r2, [pc, #144]	; (8002a6c <LL_RCC_GetUSARTClockFreq+0x134>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d01c      	beq.n	8002a18 <LL_RCC_GetUSARTClockFreq+0xe0>
 80029de:	4a23      	ldr	r2, [pc, #140]	; (8002a6c <LL_RCC_GetUSARTClockFreq+0x134>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d821      	bhi.n	8002a28 <LL_RCC_GetUSARTClockFreq+0xf0>
 80029e4:	4a22      	ldr	r2, [pc, #136]	; (8002a70 <LL_RCC_GetUSARTClockFreq+0x138>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d003      	beq.n	80029f2 <LL_RCC_GetUSARTClockFreq+0xba>
 80029ea:	4a22      	ldr	r2, [pc, #136]	; (8002a74 <LL_RCC_GetUSARTClockFreq+0x13c>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d005      	beq.n	80029fc <LL_RCC_GetUSARTClockFreq+0xc4>
 80029f0:	e01a      	b.n	8002a28 <LL_RCC_GetUSARTClockFreq+0xf0>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80029f2:	f000 f841 	bl	8002a78 <RCC_GetSystemClockFreq>
 80029f6:	0003      	movs	r3, r0
 80029f8:	60fb      	str	r3, [r7, #12]
        break;
 80029fa:	e027      	b.n	8002a4c <LL_RCC_GetUSARTClockFreq+0x114>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80029fc:	f7ff fef6 	bl	80027ec <LL_RCC_HSI_IsReady>
 8002a00:	1e03      	subs	r3, r0, #0
 8002a02:	d020      	beq.n	8002a46 <LL_RCC_GetUSARTClockFreq+0x10e>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8002a04:	f7ff ff88 	bl	8002918 <LL_RCC_IsActiveFlag_HSIDIV>
 8002a08:	1e03      	subs	r3, r0, #0
 8002a0a:	d002      	beq.n	8002a12 <LL_RCC_GetUSARTClockFreq+0xda>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 8002a0c:	4b15      	ldr	r3, [pc, #84]	; (8002a64 <LL_RCC_GetUSARTClockFreq+0x12c>)
 8002a0e:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 8002a10:	e019      	b.n	8002a46 <LL_RCC_GetUSARTClockFreq+0x10e>
            usart_frequency = HSI_VALUE;
 8002a12:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <LL_RCC_GetUSARTClockFreq+0x130>)
 8002a14:	60fb      	str	r3, [r7, #12]
        break;
 8002a16:	e016      	b.n	8002a46 <LL_RCC_GetUSARTClockFreq+0x10e>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8002a18:	f7ff fef8 	bl	800280c <LL_RCC_LSE_IsReady>
 8002a1c:	1e03      	subs	r3, r0, #0
 8002a1e:	d014      	beq.n	8002a4a <LL_RCC_GetUSARTClockFreq+0x112>
        {
          usart_frequency = LSE_VALUE;
 8002a20:	2380      	movs	r3, #128	; 0x80
 8002a22:	021b      	lsls	r3, r3, #8
 8002a24:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002a26:	e010      	b.n	8002a4a <LL_RCC_GetUSARTClockFreq+0x112>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002a28:	f000 f826 	bl	8002a78 <RCC_GetSystemClockFreq>
 8002a2c:	0003      	movs	r3, r0
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f000 f866 	bl	8002b00 <RCC_GetHCLKClockFreq>
 8002a34:	0003      	movs	r3, r0
 8002a36:	0018      	movs	r0, r3
 8002a38:	f000 f878 	bl	8002b2c <RCC_GetPCLK1ClockFreq>
 8002a3c:	0003      	movs	r3, r0
 8002a3e:	60fb      	str	r3, [r7, #12]
        break;
 8002a40:	e004      	b.n	8002a4c <LL_RCC_GetUSARTClockFreq+0x114>
    }
  }
 8002a42:	46c0      	nop			; (mov r8, r8)
 8002a44:	e002      	b.n	8002a4c <LL_RCC_GetUSARTClockFreq+0x114>
        break;
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	e000      	b.n	8002a4c <LL_RCC_GetUSARTClockFreq+0x114>
        break;
 8002a4a:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART2SEL */

  return usart_frequency;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
}
 8002a4e:	0018      	movs	r0, r3
 8002a50:	46bd      	mov	sp, r7
 8002a52:	b004      	add	sp, #16
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	00030003 	.word	0x00030003
 8002a5c:	00030001 	.word	0x00030001
 8002a60:	00030002 	.word	0x00030002
 8002a64:	003d0900 	.word	0x003d0900
 8002a68:	00f42400 	.word	0x00f42400
 8002a6c:	000c000c 	.word	0x000c000c
 8002a70:	000c0004 	.word	0x000c0004
 8002a74:	000c0008 	.word	0x000c0008

08002a78 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002a7e:	f7ff fee5 	bl	800284c <LL_RCC_GetSysClkSource>
 8002a82:	0003      	movs	r3, r0
 8002a84:	2b0c      	cmp	r3, #12
 8002a86:	d020      	beq.n	8002aca <RCC_GetSystemClockFreq+0x52>
 8002a88:	d824      	bhi.n	8002ad4 <RCC_GetSystemClockFreq+0x5c>
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	d01a      	beq.n	8002ac4 <RCC_GetSystemClockFreq+0x4c>
 8002a8e:	d821      	bhi.n	8002ad4 <RCC_GetSystemClockFreq+0x5c>
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d002      	beq.n	8002a9a <RCC_GetSystemClockFreq+0x22>
 8002a94:	2b04      	cmp	r3, #4
 8002a96:	d00b      	beq.n	8002ab0 <RCC_GetSystemClockFreq+0x38>
 8002a98:	e01c      	b.n	8002ad4 <RCC_GetSystemClockFreq+0x5c>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002a9a:	f7ff fecb 	bl	8002834 <LL_RCC_MSI_GetRange>
 8002a9e:	0003      	movs	r3, r0
 8002aa0:	0b5b      	lsrs	r3, r3, #13
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	2280      	movs	r2, #128	; 0x80
 8002aa6:	0212      	lsls	r2, r2, #8
 8002aa8:	409a      	lsls	r2, r3
 8002aaa:	0013      	movs	r3, r2
 8002aac:	607b      	str	r3, [r7, #4]
      break;
 8002aae:	e01c      	b.n	8002aea <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8002ab0:	f7ff ff32 	bl	8002918 <LL_RCC_IsActiveFlag_HSIDIV>
 8002ab4:	1e03      	subs	r3, r0, #0
 8002ab6:	d002      	beq.n	8002abe <RCC_GetSystemClockFreq+0x46>
      {
        frequency = (HSI_VALUE >> 2U);
 8002ab8:	4b0e      	ldr	r3, [pc, #56]	; (8002af4 <RCC_GetSystemClockFreq+0x7c>)
 8002aba:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSI_VALUE;
      }
      break;
 8002abc:	e015      	b.n	8002aea <RCC_GetSystemClockFreq+0x72>
        frequency = HSI_VALUE;
 8002abe:	4b0e      	ldr	r3, [pc, #56]	; (8002af8 <RCC_GetSystemClockFreq+0x80>)
 8002ac0:	607b      	str	r3, [r7, #4]
      break;
 8002ac2:	e012      	b.n	8002aea <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock source */
      frequency = HSE_VALUE;
 8002ac4:	4b0d      	ldr	r3, [pc, #52]	; (8002afc <RCC_GetSystemClockFreq+0x84>)
 8002ac6:	607b      	str	r3, [r7, #4]
      break;
 8002ac8:	e00f      	b.n	8002aea <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002aca:	f000 f857 	bl	8002b7c <RCC_PLL_GetFreqDomain_SYS>
 8002ace:	0003      	movs	r3, r0
 8002ad0:	607b      	str	r3, [r7, #4]
      break;
 8002ad2:	e00a      	b.n	8002aea <RCC_GetSystemClockFreq+0x72>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002ad4:	f7ff feae 	bl	8002834 <LL_RCC_MSI_GetRange>
 8002ad8:	0003      	movs	r3, r0
 8002ada:	0b5b      	lsrs	r3, r3, #13
 8002adc:	3301      	adds	r3, #1
 8002ade:	2280      	movs	r2, #128	; 0x80
 8002ae0:	0212      	lsls	r2, r2, #8
 8002ae2:	409a      	lsls	r2, r3
 8002ae4:	0013      	movs	r3, r2
 8002ae6:	607b      	str	r3, [r7, #4]
      break;
 8002ae8:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8002aea:	687b      	ldr	r3, [r7, #4]
}
 8002aec:	0018      	movs	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	b002      	add	sp, #8
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	003d0900 	.word	0x003d0900
 8002af8:	00f42400 	.word	0x00f42400
 8002afc:	007a1200 	.word	0x007a1200

08002b00 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002b08:	f7ff feac 	bl	8002864 <LL_RCC_GetAHBPrescaler>
 8002b0c:	0003      	movs	r3, r0
 8002b0e:	091b      	lsrs	r3, r3, #4
 8002b10:	220f      	movs	r2, #15
 8002b12:	4013      	ands	r3, r2
 8002b14:	4a04      	ldr	r2, [pc, #16]	; (8002b28 <RCC_GetHCLKClockFreq+0x28>)
 8002b16:	5cd3      	ldrb	r3, [r2, r3]
 8002b18:	001a      	movs	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	40d3      	lsrs	r3, r2
}
 8002b1e:	0018      	movs	r0, r3
 8002b20:	46bd      	mov	sp, r7
 8002b22:	b002      	add	sp, #8
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	08002fa4 	.word	0x08002fa4

08002b2c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002b34:	f7ff fea2 	bl	800287c <LL_RCC_GetAPB1Prescaler>
 8002b38:	0003      	movs	r3, r0
 8002b3a:	0a1b      	lsrs	r3, r3, #8
 8002b3c:	4a04      	ldr	r2, [pc, #16]	; (8002b50 <RCC_GetPCLK1ClockFreq+0x24>)
 8002b3e:	5cd3      	ldrb	r3, [r2, r3]
 8002b40:	001a      	movs	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	40d3      	lsrs	r3, r2
}
 8002b46:	0018      	movs	r0, r3
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	b002      	add	sp, #8
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	46c0      	nop			; (mov r8, r8)
 8002b50:	08002fb4 	.word	0x08002fb4

08002b54 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002b5c:	f7ff fe9a 	bl	8002894 <LL_RCC_GetAPB2Prescaler>
 8002b60:	0003      	movs	r3, r0
 8002b62:	0adb      	lsrs	r3, r3, #11
 8002b64:	4a04      	ldr	r2, [pc, #16]	; (8002b78 <RCC_GetPCLK2ClockFreq+0x24>)
 8002b66:	5cd3      	ldrb	r3, [r2, r3]
 8002b68:	001a      	movs	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	40d3      	lsrs	r3, r2
}
 8002b6e:	0018      	movs	r0, r3
 8002b70:	46bd      	mov	sp, r7
 8002b72:	b002      	add	sp, #8
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	08002fb4 	.word	0x08002fb4

08002b7c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002b7c:	b590      	push	{r4, r7, lr}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002b82:	f7ff fea5 	bl	80028d0 <LL_RCC_PLL_GetMainSource>
 8002b86:	0003      	movs	r3, r0
 8002b88:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d109      	bne.n	8002ba4 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8002b90:	f7ff fec2 	bl	8002918 <LL_RCC_IsActiveFlag_HSIDIV>
 8002b94:	1e03      	subs	r3, r0, #0
 8002b96:	d002      	beq.n	8002b9e <RCC_PLL_GetFreqDomain_SYS+0x22>
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 8002b98:	4b10      	ldr	r3, [pc, #64]	; (8002bdc <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8002b9a:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSI_VALUE;
      }
      break;
 8002b9c:	e005      	b.n	8002baa <RCC_PLL_GetFreqDomain_SYS+0x2e>
        pllinputfreq = HSI_VALUE;
 8002b9e:	4b10      	ldr	r3, [pc, #64]	; (8002be0 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8002ba0:	607b      	str	r3, [r7, #4]
      break;
 8002ba2:	e002      	b.n	8002baa <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002ba4:	4b0f      	ldr	r3, [pc, #60]	; (8002be4 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8002ba6:	607b      	str	r3, [r7, #4]
      break;
 8002ba8:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 8002baa:	f7ff fe9d 	bl	80028e8 <LL_RCC_PLL_GetMultiplicator>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	0c9b      	lsrs	r3, r3, #18
 8002bb2:	4a0d      	ldr	r2, [pc, #52]	; (8002be8 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8002bb4:	5cd3      	ldrb	r3, [r2, r3]
 8002bb6:	001a      	movs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4353      	muls	r3, r2
 8002bbc:	001c      	movs	r4, r3
 8002bbe:	f7ff fe9f 	bl	8002900 <LL_RCC_PLL_GetDivider>
 8002bc2:	0003      	movs	r3, r0
 8002bc4:	0d9b      	lsrs	r3, r3, #22
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	0019      	movs	r1, r3
 8002bca:	0020      	movs	r0, r4
 8002bcc:	f7fd fa9c 	bl	8000108 <__udivsi3>
 8002bd0:	0003      	movs	r3, r0
}
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	b003      	add	sp, #12
 8002bd8:	bd90      	pop	{r4, r7, pc}
 8002bda:	46c0      	nop			; (mov r8, r8)
 8002bdc:	003d0900 	.word	0x003d0900
 8002be0:	00f42400 	.word	0x00f42400
 8002be4:	007a1200 	.word	0x007a1200
 8002be8:	08002fbc 	.word	0x08002fbc

08002bec <LL_USART_IsEnabled>:
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <LL_USART_IsEnabled+0x18>
 8002c00:	2301      	movs	r3, #1
 8002c02:	e000      	b.n	8002c06 <LL_USART_IsEnabled+0x1a>
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	0018      	movs	r0, r3
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	b002      	add	sp, #8
 8002c0c:	bd80      	pop	{r7, pc}
	...

08002c10 <LL_USART_SetStopBitsLength>:
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	4a05      	ldr	r2, [pc, #20]	; (8002c34 <LL_USART_SetStopBitsLength+0x24>)
 8002c20:	401a      	ands	r2, r3
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	431a      	orrs	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	605a      	str	r2, [r3, #4]
}
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	b002      	add	sp, #8
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	46c0      	nop			; (mov r8, r8)
 8002c34:	ffffcfff 	.word	0xffffcfff

08002c38 <LL_USART_SetHWFlowCtrl>:
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	4a05      	ldr	r2, [pc, #20]	; (8002c5c <LL_USART_SetHWFlowCtrl+0x24>)
 8002c48:	401a      	ands	r2, r3
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	609a      	str	r2, [r3, #8]
}
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	46bd      	mov	sp, r7
 8002c56:	b002      	add	sp, #8
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	fffffcff 	.word	0xfffffcff

08002c60 <LL_USART_SetBaudRate>:
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	2380      	movs	r3, #128	; 0x80
 8002c72:	021b      	lsls	r3, r3, #8
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d11c      	bne.n	8002cb2 <LL_USART_SetBaudRate+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	005a      	lsls	r2, r3, #1
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	085b      	lsrs	r3, r3, #1
 8002c80:	18d3      	adds	r3, r2, r3
 8002c82:	6839      	ldr	r1, [r7, #0]
 8002c84:	0018      	movs	r0, r3
 8002c86:	f7fd fa3f 	bl	8000108 <__udivsi3>
 8002c8a:	0003      	movs	r3, r0
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	4a10      	ldr	r2, [pc, #64]	; (8002cd4 <LL_USART_SetBaudRate+0x74>)
 8002c94:	4013      	ands	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	085b      	lsrs	r3, r3, #1
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	001a      	movs	r2, r3
 8002ca0:	2307      	movs	r3, #7
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	60da      	str	r2, [r3, #12]
}
 8002cb0:	e00c      	b.n	8002ccc <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	085a      	lsrs	r2, r3, #1
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	18d3      	adds	r3, r2, r3
 8002cba:	6839      	ldr	r1, [r7, #0]
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f7fd fa23 	bl	8000108 <__udivsi3>
 8002cc2:	0003      	movs	r3, r0
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	001a      	movs	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	60da      	str	r2, [r3, #12]
}
 8002ccc:	46c0      	nop			; (mov r8, r8)
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	b006      	add	sp, #24
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	0000fff0 	.word	0x0000fff0

08002cd8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	18fb      	adds	r3, r7, r3
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002cea:	2300      	movs	r3, #0
 8002cec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	f7ff ff7b 	bl	8002bec <LL_USART_IsEnabled>
 8002cf6:	1e03      	subs	r3, r0, #0
 8002cf8:	d145      	bne.n	8002d86 <LL_USART_Init+0xae>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a25      	ldr	r2, [pc, #148]	; (8002d94 <LL_USART_Init+0xbc>)
 8002d00:	401a      	ands	r2, r3
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	6859      	ldr	r1, [r3, #4]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	4319      	orrs	r1, r3
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	4319      	orrs	r1, r3
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	430b      	orrs	r3, r1
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	689a      	ldr	r2, [r3, #8]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	0011      	movs	r1, r2
 8002d26:	0018      	movs	r0, r3
 8002d28:	f7ff ff72 	bl	8002c10 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	695a      	ldr	r2, [r3, #20]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	0011      	movs	r1, r2
 8002d34:	0018      	movs	r0, r3
 8002d36:	f7ff ff7f 	bl	8002c38 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
#if defined(USART1)
    if (USARTx == USART1)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a16      	ldr	r2, [pc, #88]	; (8002d98 <LL_USART_Init+0xc0>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d105      	bne.n	8002d4e <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002d42:	2003      	movs	r0, #3
 8002d44:	f7ff fdf8 	bl	8002938 <LL_RCC_GetUSARTClockFreq>
 8002d48:	0003      	movs	r3, r0
 8002d4a:	60bb      	str	r3, [r7, #8]
 8002d4c:	e008      	b.n	8002d60 <LL_USART_Init+0x88>
    }
#endif /* USART1 */
#if defined(USART1)
    else if (USARTx == USART2)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a12      	ldr	r2, [pc, #72]	; (8002d9c <LL_USART_Init+0xc4>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d104      	bne.n	8002d60 <LL_USART_Init+0x88>
#else
    if (USARTx == USART2)
#endif /* USART1 */
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002d56:	200c      	movs	r0, #12
 8002d58:	f7ff fdee 	bl	8002938 <LL_RCC_GetUSARTClockFreq>
 8002d5c:	0003      	movs	r3, r0
 8002d5e:	60bb      	str	r3, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00f      	beq.n	8002d86 <LL_USART_Init+0xae>
        && (USART_InitStruct->BaudRate != 0U))
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00b      	beq.n	8002d86 <LL_USART_Init+0xae>
    {
      status = SUCCESS;
 8002d6e:	230f      	movs	r3, #15
 8002d70:	18fb      	adds	r3, r7, r3
 8002d72:	2200      	movs	r2, #0
 8002d74:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	699a      	ldr	r2, [r3, #24]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68b9      	ldr	r1, [r7, #8]
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f7ff ff6d 	bl	8002c60 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002d86:	230f      	movs	r3, #15
 8002d88:	18fb      	adds	r3, r7, r3
 8002d8a:	781b      	ldrb	r3, [r3, #0]
}
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	b004      	add	sp, #16
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	efff69f3 	.word	0xefff69f3
 8002d98:	40013800 	.word	0x40013800
 8002d9c:	40004400 	.word	0x40004400

08002da0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002daa:	6839      	ldr	r1, [r7, #0]
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f7fd f9ab 	bl	8000108 <__udivsi3>
 8002db2:	0003      	movs	r3, r0
 8002db4:	001a      	movs	r2, r3
 8002db6:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <LL_InitTick+0x30>)
 8002db8:	3a01      	subs	r2, #1
 8002dba:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002dbc:	4b04      	ldr	r3, [pc, #16]	; (8002dd0 <LL_InitTick+0x30>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dc2:	4b03      	ldr	r3, [pc, #12]	; (8002dd0 <LL_InitTick+0x30>)
 8002dc4:	2205      	movs	r2, #5
 8002dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002dc8:	46c0      	nop			; (mov r8, r8)
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	b002      	add	sp, #8
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	e000e010 	.word	0xe000e010

08002dd4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002ddc:	23fa      	movs	r3, #250	; 0xfa
 8002dde:	009a      	lsls	r2, r3, #2
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	0011      	movs	r1, r2
 8002de4:	0018      	movs	r0, r3
 8002de6:	f7ff ffdb 	bl	8002da0 <LL_InitTick>
}
 8002dea:	46c0      	nop			; (mov r8, r8)
 8002dec:	46bd      	mov	sp, r7
 8002dee:	b002      	add	sp, #8
 8002df0:	bd80      	pop	{r7, pc}
	...

08002df4 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002dfc:	4b0d      	ldr	r3, [pc, #52]	; (8002e34 <LL_mDelay+0x40>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002e02:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3301      	adds	r3, #1
 8002e08:	d00c      	beq.n	8002e24 <LL_mDelay+0x30>
  {
    Delay++;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002e10:	e008      	b.n	8002e24 <LL_mDelay+0x30>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002e12:	4b08      	ldr	r3, [pc, #32]	; (8002e34 <LL_mDelay+0x40>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	2380      	movs	r3, #128	; 0x80
 8002e18:	025b      	lsls	r3, r3, #9
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	d002      	beq.n	8002e24 <LL_mDelay+0x30>
    {
      Delay--;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	3b01      	subs	r3, #1
 8002e22:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1f3      	bne.n	8002e12 <LL_mDelay+0x1e>
    }
  }
}
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	46c0      	nop			; (mov r8, r8)
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	b004      	add	sp, #16
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	e000e010 	.word	0xe000e010

08002e38 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002e40:	4b03      	ldr	r3, [pc, #12]	; (8002e50 <LL_SetSystemCoreClock+0x18>)
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	601a      	str	r2, [r3, #0]
}
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	b002      	add	sp, #8
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	20000000 	.word	0x20000000

08002e54 <__libc_init_array>:
 8002e54:	b570      	push	{r4, r5, r6, lr}
 8002e56:	2600      	movs	r6, #0
 8002e58:	4d0c      	ldr	r5, [pc, #48]	; (8002e8c <__libc_init_array+0x38>)
 8002e5a:	4c0d      	ldr	r4, [pc, #52]	; (8002e90 <__libc_init_array+0x3c>)
 8002e5c:	1b64      	subs	r4, r4, r5
 8002e5e:	10a4      	asrs	r4, r4, #2
 8002e60:	42a6      	cmp	r6, r4
 8002e62:	d109      	bne.n	8002e78 <__libc_init_array+0x24>
 8002e64:	2600      	movs	r6, #0
 8002e66:	f000 f821 	bl	8002eac <_init>
 8002e6a:	4d0a      	ldr	r5, [pc, #40]	; (8002e94 <__libc_init_array+0x40>)
 8002e6c:	4c0a      	ldr	r4, [pc, #40]	; (8002e98 <__libc_init_array+0x44>)
 8002e6e:	1b64      	subs	r4, r4, r5
 8002e70:	10a4      	asrs	r4, r4, #2
 8002e72:	42a6      	cmp	r6, r4
 8002e74:	d105      	bne.n	8002e82 <__libc_init_array+0x2e>
 8002e76:	bd70      	pop	{r4, r5, r6, pc}
 8002e78:	00b3      	lsls	r3, r6, #2
 8002e7a:	58eb      	ldr	r3, [r5, r3]
 8002e7c:	4798      	blx	r3
 8002e7e:	3601      	adds	r6, #1
 8002e80:	e7ee      	b.n	8002e60 <__libc_init_array+0xc>
 8002e82:	00b3      	lsls	r3, r6, #2
 8002e84:	58eb      	ldr	r3, [r5, r3]
 8002e86:	4798      	blx	r3
 8002e88:	3601      	adds	r6, #1
 8002e8a:	e7f2      	b.n	8002e72 <__libc_init_array+0x1e>
 8002e8c:	08002fc8 	.word	0x08002fc8
 8002e90:	08002fc8 	.word	0x08002fc8
 8002e94:	08002fc8 	.word	0x08002fc8
 8002e98:	08002fcc 	.word	0x08002fcc

08002e9c <memset>:
 8002e9c:	0003      	movs	r3, r0
 8002e9e:	1882      	adds	r2, r0, r2
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d100      	bne.n	8002ea6 <memset+0xa>
 8002ea4:	4770      	bx	lr
 8002ea6:	7019      	strb	r1, [r3, #0]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	e7f9      	b.n	8002ea0 <memset+0x4>

08002eac <_init>:
 8002eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eae:	46c0      	nop			; (mov r8, r8)
 8002eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eb2:	bc08      	pop	{r3}
 8002eb4:	469e      	mov	lr, r3
 8002eb6:	4770      	bx	lr

08002eb8 <_fini>:
 8002eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ebe:	bc08      	pop	{r3}
 8002ec0:	469e      	mov	lr, r3
 8002ec2:	4770      	bx	lr
