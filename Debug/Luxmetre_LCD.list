
Luxmetre_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b14  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08001bd4  08001bd4  00011bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c20  08001c20  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001c20  08001c20  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c20  08001c20  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c20  08001c20  00011c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c24  08001c24  00011c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001c28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08001c2c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08001c2c  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000048f8  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014c3  00000000  00000000  00024924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c8  00000000  00000000  00025de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005f0  00000000  00000000  000264b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e57f  00000000  00000000  00026aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005baf  00000000  00000000  0003501f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004cb8a  00000000  00000000  0003abce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00087758  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001634  00000000  00000000  000877a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001bbc 	.word	0x08001bbc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08001bbc 	.word	0x08001bbc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <LL_ADC_SetCommonFrequencyMode>:
  *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_HIGH
  *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_LOW
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonFrequencyMode(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonFrequencyMode)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_LFMEN, CommonFrequencyMode);
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	4a05      	ldr	r2, [pc, #20]	; (8000244 <LL_ADC_SetCommonFrequencyMode+0x24>)
 8000230:	401a      	ands	r2, r3
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	431a      	orrs	r2, r3
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	601a      	str	r2, [r3, #0]
}
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	46bd      	mov	sp, r7
 800023e:	b002      	add	sp, #8
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	fdffffff 	.word	0xfdffffff

08000248 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTime)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
 8000250:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	2207      	movs	r2, #7
 8000258:	4393      	bics	r3, r2
 800025a:	001a      	movs	r2, r3
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	431a      	orrs	r2, r3
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	615a      	str	r2, [r3, #20]
}
 8000264:	46c0      	nop			; (mov r8, r8)
 8000266:	46bd      	mov	sp, r7
 8000268:	b002      	add	sp, #8
 800026a:	bd80      	pop	{r7, pc}

0800026c <LL_ADC_REG_SetSequencerScanDirection>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	68db      	ldr	r3, [r3, #12]
 800027a:	2204      	movs	r2, #4
 800027c:	4393      	bics	r3, r2
 800027e:	001a      	movs	r2, r3
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	431a      	orrs	r2, r3
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	60da      	str	r2, [r3, #12]
}
 8000288:	46c0      	nop			; (mov r8, r8)
 800028a:	46bd      	mov	sp, r7
 800028c:	b002      	add	sp, #8
 800028e:	bd80      	pop	{r7, pc}

08000290 <LL_ADC_REG_SetSequencerChAdd>:
  *         
  *         (1) On STM32L0, parameter not available on all devices: only on STM32L053xx, STM32L063xx, STM32L073xx, STM32L083xx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
 8000298:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	035b      	lsls	r3, r3, #13
 80002a2:	0b5b      	lsrs	r3, r3, #13
 80002a4:	431a      	orrs	r2, r3
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80002aa:	46c0      	nop			; (mov r8, r8)
 80002ac:	46bd      	mov	sp, r7
 80002ae:	b002      	add	sp, #8
 80002b0:	bd80      	pop	{r7, pc}

080002b2 <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_DISABLE
  *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 80002b2:	b580      	push	{r7, lr}
 80002b4:	b082      	sub	sp, #8
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	6078      	str	r0, [r7, #4]
 80002ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	691b      	ldr	r3, [r3, #16]
 80002c0:	2201      	movs	r2, #1
 80002c2:	4393      	bics	r3, r2
 80002c4:	001a      	movs	r2, r3
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	431a      	orrs	r2, r3
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	611a      	str	r2, [r3, #16]
}
 80002ce:	46c0      	nop			; (mov r8, r8)
 80002d0:	46bd      	mov	sp, r7
 80002d2:	b002      	add	sp, #8
 80002d4:	bd80      	pop	{r7, pc}
	...

080002d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	689b      	ldr	r3, [r3, #8]
 80002e4:	4a05      	ldr	r2, [pc, #20]	; (80002fc <LL_ADC_EnableInternalRegulator+0x24>)
 80002e6:	4013      	ands	r3, r2
 80002e8:	2280      	movs	r2, #128	; 0x80
 80002ea:	0552      	lsls	r2, r2, #21
 80002ec:	431a      	orrs	r2, r3
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80002f2:	46c0      	nop			; (mov r8, r8)
 80002f4:	46bd      	mov	sp, r7
 80002f6:	b002      	add	sp, #8
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)
 80002fc:	6fffffe8 	.word	0x6fffffe8

08000300 <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	685b      	ldr	r3, [r3, #4]
 800030c:	2204      	movs	r2, #4
 800030e:	4393      	bics	r3, r2
 8000310:	001a      	movs	r2, r3
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	605a      	str	r2, [r3, #4]
}
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	46bd      	mov	sp, r7
 800031a:	b002      	add	sp, #8
 800031c:	bd80      	pop	{r7, pc}

0800031e <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSEQIE        LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 800031e:	b580      	push	{r7, lr}
 8000320:	b082      	sub	sp, #8
 8000322:	af00      	add	r7, sp, #0
 8000324:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	2208      	movs	r2, #8
 800032c:	4393      	bics	r3, r2
 800032e:	001a      	movs	r2, r3
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	605a      	str	r2, [r3, #4]
}
 8000334:	46c0      	nop			; (mov r8, r8)
 8000336:	46bd      	mov	sp, r7
 8000338:	b002      	add	sp, #8
 800033a:	bd80      	pop	{r7, pc}

0800033c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000344:	4b07      	ldr	r3, [pc, #28]	; (8000364 <LL_APB2_GRP1_EnableClock+0x28>)
 8000346:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000348:	4b06      	ldr	r3, [pc, #24]	; (8000364 <LL_APB2_GRP1_EnableClock+0x28>)
 800034a:	687a      	ldr	r2, [r7, #4]
 800034c:	430a      	orrs	r2, r1
 800034e:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000350:	4b04      	ldr	r3, [pc, #16]	; (8000364 <LL_APB2_GRP1_EnableClock+0x28>)
 8000352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000354:	687a      	ldr	r2, [r7, #4]
 8000356:	4013      	ands	r3, r2
 8000358:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800035a:	68fb      	ldr	r3, [r7, #12]
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b004      	add	sp, #16
 8000362:	bd80      	pop	{r7, pc}
 8000364:	40021000 	.word	0x40021000

08000368 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b084      	sub	sp, #16
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000370:	4b07      	ldr	r3, [pc, #28]	; (8000390 <LL_IOP_GRP1_EnableClock+0x28>)
 8000372:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000374:	4b06      	ldr	r3, [pc, #24]	; (8000390 <LL_IOP_GRP1_EnableClock+0x28>)
 8000376:	687a      	ldr	r2, [r7, #4]
 8000378:	430a      	orrs	r2, r1
 800037a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800037c:	4b04      	ldr	r3, [pc, #16]	; (8000390 <LL_IOP_GRP1_EnableClock+0x28>)
 800037e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000380:	687a      	ldr	r2, [r7, #4]
 8000382:	4013      	ands	r3, r2
 8000384:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000386:	68fb      	ldr	r3, [r7, #12]
}
 8000388:	46c0      	nop			; (mov r8, r8)
 800038a:	46bd      	mov	sp, r7
 800038c:	b004      	add	sp, #16
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40021000 	.word	0x40021000

08000394 <MX_ADC_Init>:

/* USER CODE END 0 */

/* ADC init function */
void MX_ADC_Init(void)
{
 8000394:	b5b0      	push	{r4, r5, r7, lr}
 8000396:	b090      	sub	sp, #64	; 0x40
 8000398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800039a:	2428      	movs	r4, #40	; 0x28
 800039c:	193b      	adds	r3, r7, r4
 800039e:	0018      	movs	r0, r3
 80003a0:	2314      	movs	r3, #20
 80003a2:	001a      	movs	r2, r3
 80003a4:	2100      	movs	r1, #0
 80003a6:	f001 fc01 	bl	8001bac <memset>
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80003aa:	2518      	movs	r5, #24
 80003ac:	197b      	adds	r3, r7, r5
 80003ae:	0018      	movs	r0, r3
 80003b0:	2310      	movs	r3, #16
 80003b2:	001a      	movs	r2, r3
 80003b4:	2100      	movs	r1, #0
 80003b6:	f001 fbf9 	bl	8001bac <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ba:	003b      	movs	r3, r7
 80003bc:	0018      	movs	r0, r3
 80003be:	2318      	movs	r3, #24
 80003c0:	001a      	movs	r2, r3
 80003c2:	2100      	movs	r1, #0
 80003c4:	f001 fbf2 	bl	8001bac <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 80003c8:	2380      	movs	r3, #128	; 0x80
 80003ca:	009b      	lsls	r3, r3, #2
 80003cc:	0018      	movs	r0, r3
 80003ce:	f7ff ffb5 	bl	800033c <LL_APB2_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80003d2:	2001      	movs	r0, #1
 80003d4:	f7ff ffc8 	bl	8000368 <LL_IOP_GRP1_EnableClock>
  /**ADC GPIO Configuration
  PA0   ------> ADC_IN0
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80003d8:	003b      	movs	r3, r7
 80003da:	2201      	movs	r2, #1
 80003dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80003de:	003b      	movs	r3, r7
 80003e0:	2203      	movs	r2, #3
 80003e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80003e4:	003b      	movs	r3, r7
 80003e6:	2200      	movs	r2, #0
 80003e8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ea:	003a      	movs	r2, r7
 80003ec:	23a0      	movs	r3, #160	; 0xa0
 80003ee:	05db      	lsls	r3, r3, #23
 80003f0:	0011      	movs	r1, r2
 80003f2:	0018      	movs	r0, r3
 80003f4:	f001 f824 	bl	8001440 <LL_GPIO_Init>

  /* USER CODE END ADC_Init 1 */

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_0);
 80003f8:	4b35      	ldr	r3, [pc, #212]	; (80004d0 <MX_ADC_Init+0x13c>)
 80003fa:	2101      	movs	r1, #1
 80003fc:	0018      	movs	r0, r3
 80003fe:	f7ff ff47 	bl	8000290 <LL_ADC_REG_SetSequencerChAdd>

  /** Common config
  */
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000402:	0021      	movs	r1, r4
 8000404:	187b      	adds	r3, r7, r1
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800040a:	187b      	adds	r3, r7, r1
 800040c:	2200      	movs	r2, #0
 800040e:	605a      	str	r2, [r3, #4]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000410:	187b      	adds	r3, r7, r1
 8000412:	2200      	movs	r2, #0
 8000414:	609a      	str	r2, [r3, #8]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000416:	187b      	adds	r3, r7, r1
 8000418:	2200      	movs	r2, #0
 800041a:	60da      	str	r2, [r3, #12]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 800041c:	187b      	adds	r3, r7, r1
 800041e:	2200      	movs	r2, #0
 8000420:	611a      	str	r2, [r3, #16]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000422:	187b      	adds	r3, r7, r1
 8000424:	4a2a      	ldr	r2, [pc, #168]	; (80004d0 <MX_ADC_Init+0x13c>)
 8000426:	0019      	movs	r1, r3
 8000428:	0010      	movs	r0, r2
 800042a:	f000 fe0d 	bl	8001048 <LL_ADC_REG_Init>
  LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 800042e:	4b28      	ldr	r3, [pc, #160]	; (80004d0 <MX_ADC_Init+0x13c>)
 8000430:	2100      	movs	r1, #0
 8000432:	0018      	movs	r0, r3
 8000434:	f7ff ff08 	bl	8000248 <LL_ADC_SetSamplingTimeCommonChannels>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 8000438:	4b25      	ldr	r3, [pc, #148]	; (80004d0 <MX_ADC_Init+0x13c>)
 800043a:	2100      	movs	r1, #0
 800043c:	0018      	movs	r0, r3
 800043e:	f7ff ff38 	bl	80002b2 <LL_ADC_SetOverSamplingScope>
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
 8000442:	4b23      	ldr	r3, [pc, #140]	; (80004d0 <MX_ADC_Init+0x13c>)
 8000444:	2100      	movs	r1, #0
 8000446:	0018      	movs	r0, r3
 8000448:	f7ff ff10 	bl	800026c <LL_ADC_REG_SetSequencerScanDirection>
  LL_ADC_SetCommonFrequencyMode(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_CLOCK_FREQ_MODE_HIGH);
 800044c:	4b21      	ldr	r3, [pc, #132]	; (80004d4 <MX_ADC_Init+0x140>)
 800044e:	2100      	movs	r1, #0
 8000450:	0018      	movs	r0, r3
 8000452:	f7ff fee5 	bl	8000220 <LL_ADC_SetCommonFrequencyMode>
  LL_ADC_DisableIT_EOC(ADC1);
 8000456:	4b1e      	ldr	r3, [pc, #120]	; (80004d0 <MX_ADC_Init+0x13c>)
 8000458:	0018      	movs	r0, r3
 800045a:	f7ff ff51 	bl	8000300 <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 800045e:	4b1c      	ldr	r3, [pc, #112]	; (80004d0 <MX_ADC_Init+0x13c>)
 8000460:	0018      	movs	r0, r3
 8000462:	f7ff ff5c 	bl	800031e <LL_ADC_DisableIT_EOS>
  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV1;
 8000466:	197b      	adds	r3, r7, r5
 8000468:	22c0      	movs	r2, #192	; 0xc0
 800046a:	0612      	lsls	r2, r2, #24
 800046c:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 800046e:	197b      	adds	r3, r7, r5
 8000470:	2200      	movs	r2, #0
 8000472:	605a      	str	r2, [r3, #4]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000474:	197b      	adds	r3, r7, r5
 8000476:	2200      	movs	r2, #0
 8000478:	609a      	str	r2, [r3, #8]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 800047a:	197b      	adds	r3, r7, r5
 800047c:	2200      	movs	r2, #0
 800047e:	60da      	str	r2, [r3, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000480:	197b      	adds	r3, r7, r5
 8000482:	4a13      	ldr	r2, [pc, #76]	; (80004d0 <MX_ADC_Init+0x13c>)
 8000484:	0019      	movs	r1, r3
 8000486:	0010      	movs	r0, r2
 8000488:	f000 fda8 	bl	8000fdc <LL_ADC_Init>

  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 800048c:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <MX_ADC_Init+0x13c>)
 800048e:	0018      	movs	r0, r3
 8000490:	f7ff ff22 	bl	80002d8 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000494:	4b10      	ldr	r3, [pc, #64]	; (80004d8 <MX_ADC_Init+0x144>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4910      	ldr	r1, [pc, #64]	; (80004dc <MX_ADC_Init+0x148>)
 800049a:	0018      	movs	r0, r3
 800049c:	f7ff fe34 	bl	8000108 <__udivsi3>
 80004a0:	0003      	movs	r3, r0
 80004a2:	001a      	movs	r2, r3
 80004a4:	0013      	movs	r3, r2
 80004a6:	009b      	lsls	r3, r3, #2
 80004a8:	189b      	adds	r3, r3, r2
 80004aa:	005b      	lsls	r3, r3, #1
 80004ac:	210a      	movs	r1, #10
 80004ae:	0018      	movs	r0, r3
 80004b0:	f7ff fe2a 	bl	8000108 <__udivsi3>
 80004b4:	0003      	movs	r3, r0
 80004b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  while(wait_loop_index != 0)
 80004b8:	e002      	b.n	80004c0 <MX_ADC_Init+0x12c>
  {
    wait_loop_index--;
 80004ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80004bc:	3b01      	subs	r3, #1
 80004be:	63fb      	str	r3, [r7, #60]	; 0x3c
  while(wait_loop_index != 0)
 80004c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d1f9      	bne.n	80004ba <MX_ADC_Init+0x126>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	46c0      	nop			; (mov r8, r8)
 80004ca:	46bd      	mov	sp, r7
 80004cc:	b010      	add	sp, #64	; 0x40
 80004ce:	bdb0      	pop	{r4, r5, r7, pc}
 80004d0:	40012400 	.word	0x40012400
 80004d4:	40012708 	.word	0x40012708
 80004d8:	20000000 	.word	0x20000000
 80004dc:	00030d40 	.word	0x00030d40

080004e0 <LL_IOP_GRP1_EnableClock>:
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 80004e8:	4b07      	ldr	r3, [pc, #28]	; (8000508 <LL_IOP_GRP1_EnableClock+0x28>)
 80004ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <LL_IOP_GRP1_EnableClock+0x28>)
 80004ee:	687a      	ldr	r2, [r7, #4]
 80004f0:	430a      	orrs	r2, r1
 80004f2:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80004f4:	4b04      	ldr	r3, [pc, #16]	; (8000508 <LL_IOP_GRP1_EnableClock+0x28>)
 80004f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004f8:	687a      	ldr	r2, [r7, #4]
 80004fa:	4013      	ands	r3, r2
 80004fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004fe:	68fb      	ldr	r3, [r7, #12]
}
 8000500:	46c0      	nop			; (mov r8, r8)
 8000502:	46bd      	mov	sp, r7
 8000504:	b004      	add	sp, #16
 8000506:	bd80      	pop	{r7, pc}
 8000508:	40021000 	.word	0x40021000

0800050c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800050c:	b590      	push	{r4, r7, lr}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], SYSCFG_EXTICR1_EXTI0 << (Line >> 16U), Port << (Line >> 16U));
 8000516:	4a0f      	ldr	r2, [pc, #60]	; (8000554 <LL_SYSCFG_SetEXTISource+0x48>)
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	21ff      	movs	r1, #255	; 0xff
 800051c:	400b      	ands	r3, r1
 800051e:	3302      	adds	r3, #2
 8000520:	009b      	lsls	r3, r3, #2
 8000522:	589b      	ldr	r3, [r3, r2]
 8000524:	683a      	ldr	r2, [r7, #0]
 8000526:	0c12      	lsrs	r2, r2, #16
 8000528:	210f      	movs	r1, #15
 800052a:	4091      	lsls	r1, r2
 800052c:	000a      	movs	r2, r1
 800052e:	43d2      	mvns	r2, r2
 8000530:	401a      	ands	r2, r3
 8000532:	0011      	movs	r1, r2
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	0c1b      	lsrs	r3, r3, #16
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	409a      	lsls	r2, r3
 800053c:	4805      	ldr	r0, [pc, #20]	; (8000554 <LL_SYSCFG_SetEXTISource+0x48>)
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	24ff      	movs	r4, #255	; 0xff
 8000542:	4023      	ands	r3, r4
 8000544:	430a      	orrs	r2, r1
 8000546:	3302      	adds	r3, #2
 8000548:	009b      	lsls	r3, r3, #2
 800054a:	501a      	str	r2, [r3, r0]
}
 800054c:	46c0      	nop			; (mov r8, r8)
 800054e:	46bd      	mov	sp, r7
 8000550:	b003      	add	sp, #12
 8000552:	bd90      	pop	{r4, r7, pc}
 8000554:	40010000 	.word	0x40010000

08000558 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
 800055e:	60f8      	str	r0, [r7, #12]
 8000560:	60b9      	str	r1, [r7, #8]
 8000562:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	6819      	ldr	r1, [r3, #0]
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	435b      	muls	r3, r3
 800056c:	001a      	movs	r2, r3
 800056e:	0013      	movs	r3, r2
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	189b      	adds	r3, r3, r2
 8000574:	43db      	mvns	r3, r3
 8000576:	400b      	ands	r3, r1
 8000578:	001a      	movs	r2, r3
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	435b      	muls	r3, r3
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	434b      	muls	r3, r1
 8000582:	431a      	orrs	r2, r3
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	601a      	str	r2, [r3, #0]
}
 8000588:	46c0      	nop			; (mov r8, r8)
 800058a:	46bd      	mov	sp, r7
 800058c:	b004      	add	sp, #16
 800058e:	bd80      	pop	{r7, pc}

08000590 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	68d9      	ldr	r1, [r3, #12]
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	435b      	muls	r3, r3
 80005a4:	001a      	movs	r2, r3
 80005a6:	0013      	movs	r3, r2
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	189b      	adds	r3, r3, r2
 80005ac:	43db      	mvns	r3, r3
 80005ae:	400b      	ands	r3, r1
 80005b0:	001a      	movs	r2, r3
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	435b      	muls	r3, r3
 80005b6:	6879      	ldr	r1, [r7, #4]
 80005b8:	434b      	muls	r3, r1
 80005ba:	431a      	orrs	r2, r3
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	60da      	str	r2, [r3, #12]
}
 80005c0:	46c0      	nop			; (mov r8, r8)
 80005c2:	46bd      	mov	sp, r7
 80005c4:	b004      	add	sp, #16
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	683a      	ldr	r2, [r7, #0]
 80005d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80005d8:	46c0      	nop			; (mov r8, r8)
 80005da:	46bd      	mov	sp, r7
 80005dc:	b002      	add	sp, #8
 80005de:	bd80      	pop	{r7, pc}

080005e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e0:	b590      	push	{r4, r7, lr}
 80005e2:	b089      	sub	sp, #36	; 0x24
 80005e4:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80005e6:	2418      	movs	r4, #24
 80005e8:	193b      	adds	r3, r7, r4
 80005ea:	0018      	movs	r0, r3
 80005ec:	2308      	movs	r3, #8
 80005ee:	001a      	movs	r2, r3
 80005f0:	2100      	movs	r1, #0
 80005f2:	f001 fadb 	bl	8001bac <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f6:	003b      	movs	r3, r7
 80005f8:	0018      	movs	r0, r3
 80005fa:	2318      	movs	r3, #24
 80005fc:	001a      	movs	r2, r3
 80005fe:	2100      	movs	r1, #0
 8000600:	f001 fad4 	bl	8001bac <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000604:	2004      	movs	r0, #4
 8000606:	f7ff ff6b 	bl	80004e0 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOH);
 800060a:	2080      	movs	r0, #128	; 0x80
 800060c:	f7ff ff68 	bl	80004e0 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000610:	2001      	movs	r0, #1
 8000612:	f7ff ff65 	bl	80004e0 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8000616:	23a0      	movs	r3, #160	; 0xa0
 8000618:	05db      	lsls	r3, r3, #23
 800061a:	2120      	movs	r1, #32
 800061c:	0018      	movs	r0, r3
 800061e:	f7ff ffd3 	bl	80005c8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8000622:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <MX_GPIO_Init+0xc0>)
 8000624:	0019      	movs	r1, r3
 8000626:	2002      	movs	r0, #2
 8000628:	f7ff ff70 	bl	800050c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 800062c:	2380      	movs	r3, #128	; 0x80
 800062e:	019b      	lsls	r3, r3, #6
 8000630:	481c      	ldr	r0, [pc, #112]	; (80006a4 <MX_GPIO_Init+0xc4>)
 8000632:	2200      	movs	r2, #0
 8000634:	0019      	movs	r1, r3
 8000636:	f7ff ffab 	bl	8000590 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 800063a:	2380      	movs	r3, #128	; 0x80
 800063c:	019b      	lsls	r3, r3, #6
 800063e:	4819      	ldr	r0, [pc, #100]	; (80006a4 <MX_GPIO_Init+0xc4>)
 8000640:	2200      	movs	r2, #0
 8000642:	0019      	movs	r1, r3
 8000644:	f7ff ff88 	bl	8000558 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8000648:	0021      	movs	r1, r4
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2280      	movs	r2, #128	; 0x80
 800064e:	0192      	lsls	r2, r2, #6
 8000650:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000652:	187b      	adds	r3, r7, r1
 8000654:	2201      	movs	r2, #1
 8000656:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2200      	movs	r2, #0
 800065c:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800065e:	187b      	adds	r3, r7, r1
 8000660:	2202      	movs	r2, #2
 8000662:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000664:	187b      	adds	r3, r7, r1
 8000666:	0018      	movs	r0, r3
 8000668:	f000 fda8 	bl	80011bc <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 800066c:	003b      	movs	r3, r7
 800066e:	2220      	movs	r2, #32
 8000670:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000672:	003b      	movs	r3, r7
 8000674:	2201      	movs	r2, #1
 8000676:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000678:	003b      	movs	r3, r7
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800067e:	003b      	movs	r3, r7
 8000680:	2200      	movs	r2, #0
 8000682:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000684:	003b      	movs	r3, r7
 8000686:	2200      	movs	r2, #0
 8000688:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800068a:	003a      	movs	r2, r7
 800068c:	23a0      	movs	r3, #160	; 0xa0
 800068e:	05db      	lsls	r3, r3, #23
 8000690:	0011      	movs	r1, r2
 8000692:	0018      	movs	r0, r3
 8000694:	f000 fed4 	bl	8001440 <LL_GPIO_Init>

}
 8000698:	46c0      	nop			; (mov r8, r8)
 800069a:	46bd      	mov	sp, r7
 800069c:	b009      	add	sp, #36	; 0x24
 800069e:	bd90      	pop	{r4, r7, pc}
 80006a0:	00040003 	.word	0x00040003
 80006a4:	50000800 	.word	0x50000800

080006a8 <Ecrire>:
#include "lcd.h"

void Ecrire(char f){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	0002      	movs	r2, r0
 80006b0:	1dfb      	adds	r3, r7, #7
 80006b2:	701a      	strb	r2, [r3, #0]

//mettre les sorties � 0
PORT_CHAR->ODR&=~(1<<DB4);
 80006b4:	23a0      	movs	r3, #160	; 0xa0
 80006b6:	05db      	lsls	r3, r3, #23
 80006b8:	695a      	ldr	r2, [r3, #20]
 80006ba:	23a0      	movs	r3, #160	; 0xa0
 80006bc:	05db      	lsls	r3, r3, #23
 80006be:	2140      	movs	r1, #64	; 0x40
 80006c0:	438a      	bics	r2, r1
 80006c2:	615a      	str	r2, [r3, #20]
PORT_CHAR->ODR&=~(1<<DB5);
 80006c4:	23a0      	movs	r3, #160	; 0xa0
 80006c6:	05db      	lsls	r3, r3, #23
 80006c8:	695a      	ldr	r2, [r3, #20]
 80006ca:	23a0      	movs	r3, #160	; 0xa0
 80006cc:	05db      	lsls	r3, r3, #23
 80006ce:	2180      	movs	r1, #128	; 0x80
 80006d0:	438a      	bics	r2, r1
 80006d2:	615a      	str	r2, [r3, #20]
PORT_CHAR->ODR&=~(1<<DB6);
 80006d4:	23a0      	movs	r3, #160	; 0xa0
 80006d6:	05db      	lsls	r3, r3, #23
 80006d8:	695a      	ldr	r2, [r3, #20]
 80006da:	23a0      	movs	r3, #160	; 0xa0
 80006dc:	05db      	lsls	r3, r3, #23
 80006de:	4922      	ldr	r1, [pc, #136]	; (8000768 <Ecrire+0xc0>)
 80006e0:	400a      	ands	r2, r1
 80006e2:	615a      	str	r2, [r3, #20]
PORT_CHAR->ODR&=~(1<<DB7);
 80006e4:	23a0      	movs	r3, #160	; 0xa0
 80006e6:	05db      	lsls	r3, r3, #23
 80006e8:	695a      	ldr	r2, [r3, #20]
 80006ea:	23a0      	movs	r3, #160	; 0xa0
 80006ec:	05db      	lsls	r3, r3, #23
 80006ee:	491f      	ldr	r1, [pc, #124]	; (800076c <Ecrire+0xc4>)
 80006f0:	400a      	ands	r2, r1
 80006f2:	615a      	str	r2, [r3, #20]

//si le bit 7 de f est � 1 mettre le bit DB7 � 1
if((f & 0b10000000)!=0) PORT_CHAR->ODR|=(1<<DB7);
 80006f4:	1dfb      	adds	r3, r7, #7
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	b25b      	sxtb	r3, r3
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	da08      	bge.n	8000710 <Ecrire+0x68>
 80006fe:	23a0      	movs	r3, #160	; 0xa0
 8000700:	05db      	lsls	r3, r3, #23
 8000702:	695a      	ldr	r2, [r3, #20]
 8000704:	23a0      	movs	r3, #160	; 0xa0
 8000706:	05db      	lsls	r3, r3, #23
 8000708:	2180      	movs	r1, #128	; 0x80
 800070a:	0089      	lsls	r1, r1, #2
 800070c:	430a      	orrs	r2, r1
 800070e:	615a      	str	r2, [r3, #20]

//si le bit 6 de f est � 1 mettre le bit DB6 � 1
if((f & 0b01000000)!=0) PORT_CHAR->ODR|=(1<<DB6);
 8000710:	1dfb      	adds	r3, r7, #7
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2240      	movs	r2, #64	; 0x40
 8000716:	4013      	ands	r3, r2
 8000718:	d008      	beq.n	800072c <Ecrire+0x84>
 800071a:	23a0      	movs	r3, #160	; 0xa0
 800071c:	05db      	lsls	r3, r3, #23
 800071e:	695a      	ldr	r2, [r3, #20]
 8000720:	23a0      	movs	r3, #160	; 0xa0
 8000722:	05db      	lsls	r3, r3, #23
 8000724:	2180      	movs	r1, #128	; 0x80
 8000726:	0049      	lsls	r1, r1, #1
 8000728:	430a      	orrs	r2, r1
 800072a:	615a      	str	r2, [r3, #20]

//si le bit 5 de f est � 1 mettre le bit DB5 � 1
if((f & 0b00100000)!=0) PORT_CHAR->ODR|=(1<<DB5);
 800072c:	1dfb      	adds	r3, r7, #7
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2220      	movs	r2, #32
 8000732:	4013      	ands	r3, r2
 8000734:	d007      	beq.n	8000746 <Ecrire+0x9e>
 8000736:	23a0      	movs	r3, #160	; 0xa0
 8000738:	05db      	lsls	r3, r3, #23
 800073a:	695a      	ldr	r2, [r3, #20]
 800073c:	23a0      	movs	r3, #160	; 0xa0
 800073e:	05db      	lsls	r3, r3, #23
 8000740:	2180      	movs	r1, #128	; 0x80
 8000742:	430a      	orrs	r2, r1
 8000744:	615a      	str	r2, [r3, #20]

//si le bit 7 de f est � 1 mettre le bit DB4 � 1
if((f & 0b00010000)!=0) PORT_CHAR->ODR|=(1<<DB4);
 8000746:	1dfb      	adds	r3, r7, #7
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2210      	movs	r2, #16
 800074c:	4013      	ands	r3, r2
 800074e:	d007      	beq.n	8000760 <Ecrire+0xb8>
 8000750:	23a0      	movs	r3, #160	; 0xa0
 8000752:	05db      	lsls	r3, r3, #23
 8000754:	695a      	ldr	r2, [r3, #20]
 8000756:	23a0      	movs	r3, #160	; 0xa0
 8000758:	05db      	lsls	r3, r3, #23
 800075a:	2140      	movs	r1, #64	; 0x40
 800075c:	430a      	orrs	r2, r1
 800075e:	615a      	str	r2, [r3, #20]
}
 8000760:	46c0      	nop			; (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	b002      	add	sp, #8
 8000766:	bd80      	pop	{r7, pc}
 8000768:	fffffeff 	.word	0xfffffeff
 800076c:	fffffdff 	.word	0xfffffdff

08000770 <toggle_e>:


void toggle_e(){
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	//mettre la pin E du LCD � 1
	Port_E->ODR|=(1<<E);
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <toggle_e+0x28>)
 8000776:	695a      	ldr	r2, [r3, #20]
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <toggle_e+0x28>)
 800077a:	2120      	movs	r1, #32
 800077c:	430a      	orrs	r2, r1
 800077e:	615a      	str	r2, [r3, #20]


	//attendre un peu
	  LL_mDelay(50);//delay=50us
 8000780:	2032      	movs	r0, #50	; 0x32
 8000782:	f001 f9bf 	bl	8001b04 <LL_mDelay>

	//mettre la pin E du LCD � 0
	Port_E->ODR&=~(1<<E);	//mettre E � 0
 8000786:	4b04      	ldr	r3, [pc, #16]	; (8000798 <toggle_e+0x28>)
 8000788:	695a      	ldr	r2, [r3, #20]
 800078a:	4b03      	ldr	r3, [pc, #12]	; (8000798 <toggle_e+0x28>)
 800078c:	2120      	movs	r1, #32
 800078e:	438a      	bics	r2, r1
 8000790:	615a      	str	r2, [r3, #20]

}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	50000400 	.word	0x50000400

0800079c <D_set_E_Toggle>:
void D_set_E_Toggle (char f){
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	0002      	movs	r2, r0
 80007a4:	1dfb      	adds	r3, r7, #7
 80007a6:	701a      	strb	r2, [r3, #0]


Ecrire(f);
 80007a8:	1dfb      	adds	r3, r7, #7
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	0018      	movs	r0, r3
 80007ae:	f7ff ff7b 	bl	80006a8 <Ecrire>

toggle_e();
 80007b2:	f7ff ffdd 	bl	8000770 <toggle_e>

}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	46bd      	mov	sp, r7
 80007ba:	b002      	add	sp, #8
 80007bc:	bd80      	pop	{r7, pc}
	...

080007c0 <EcrireFonction>:


void EcrireFonction(char f){
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	0002      	movs	r2, r0
 80007c8:	1dfb      	adds	r3, r7, #7
 80007ca:	701a      	strb	r2, [r3, #0]
	char nibble_pfort;
	char nibble_pfaible;
//mettre la pin RS du LCD � 0
Port_RS->ODR&=~(1<<rs);
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <EcrireFonction+0x64>)
 80007ce:	695a      	ldr	r2, [r3, #20]
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <EcrireFonction+0x64>)
 80007d2:	2110      	movs	r1, #16
 80007d4:	438a      	bics	r2, r1
 80007d6:	615a      	str	r2, [r3, #20]

//�crire le nibble de poids fort de f
D_set_E_Toggle(f);
 80007d8:	1dfb      	adds	r3, r7, #7
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	0018      	movs	r0, r3
 80007de:	f7ff ffdd 	bl	800079c <D_set_E_Toggle>

//inverser le nibble de poids fort et le nibble de poids faible de f
nibble_pfort=(f&0b11110000)>>4;
 80007e2:	200f      	movs	r0, #15
 80007e4:	183b      	adds	r3, r7, r0
 80007e6:	1dfa      	adds	r2, r7, #7
 80007e8:	7812      	ldrb	r2, [r2, #0]
 80007ea:	0912      	lsrs	r2, r2, #4
 80007ec:	701a      	strb	r2, [r3, #0]
nibble_pfaible=f&0b00001111;
 80007ee:	240e      	movs	r4, #14
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	1dfa      	adds	r2, r7, #7
 80007f4:	7812      	ldrb	r2, [r2, #0]
 80007f6:	210f      	movs	r1, #15
 80007f8:	400a      	ands	r2, r1
 80007fa:	701a      	strb	r2, [r3, #0]
int swap=nibble_pfort|(nibble_pfaible<<4);
 80007fc:	183b      	adds	r3, r7, r0
 80007fe:	781a      	ldrb	r2, [r3, #0]
 8000800:	193b      	adds	r3, r7, r4
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	011b      	lsls	r3, r3, #4
 8000806:	4313      	orrs	r3, r2
 8000808:	60bb      	str	r3, [r7, #8]

//�crire le nibble
D_set_E_Toggle(swap);
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	b2db      	uxtb	r3, r3
 800080e:	0018      	movs	r0, r3
 8000810:	f7ff ffc4 	bl	800079c <D_set_E_Toggle>

//attendre un peu
LL_mDelay(50);//delay=50us
 8000814:	2032      	movs	r0, #50	; 0x32
 8000816:	f001 f975 	bl	8001b04 <LL_mDelay>

}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	46bd      	mov	sp, r7
 800081e:	b005      	add	sp, #20
 8000820:	bd90      	pop	{r4, r7, pc}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	50000400 	.word	0x50000400

08000828 <EcrireCaractere>:


void EcrireCaractere(char c){
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	0002      	movs	r2, r0
 8000830:	1dfb      	adds	r3, r7, #7
 8000832:	701a      	strb	r2, [r3, #0]
	//mettre la pin RS du LCD � 1
	 Port_RS->ODR|=(1<<rs);
 8000834:	4b15      	ldr	r3, [pc, #84]	; (800088c <EcrireCaractere+0x64>)
 8000836:	695a      	ldr	r2, [r3, #20]
 8000838:	4b14      	ldr	r3, [pc, #80]	; (800088c <EcrireCaractere+0x64>)
 800083a:	2110      	movs	r1, #16
 800083c:	430a      	orrs	r2, r1
 800083e:	615a      	str	r2, [r3, #20]

    //�crire le nibble de poids fort de c
	 D_set_E_Toggle(c); //call D_set_E_Toggle
 8000840:	1dfb      	adds	r3, r7, #7
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	0018      	movs	r0, r3
 8000846:	f7ff ffa9 	bl	800079c <D_set_E_Toggle>

    //inverser le nibble de poids fort et le nibble de poids faible de c
	char nibble_pfort=(c&0b11110000)>>4;
 800084a:	200f      	movs	r0, #15
 800084c:	183b      	adds	r3, r7, r0
 800084e:	1dfa      	adds	r2, r7, #7
 8000850:	7812      	ldrb	r2, [r2, #0]
 8000852:	0912      	lsrs	r2, r2, #4
 8000854:	701a      	strb	r2, [r3, #0]
	char nibble_pfaible=c&0b00001111;
 8000856:	240e      	movs	r4, #14
 8000858:	193b      	adds	r3, r7, r4
 800085a:	1dfa      	adds	r2, r7, #7
 800085c:	7812      	ldrb	r2, [r2, #0]
 800085e:	210f      	movs	r1, #15
 8000860:	400a      	ands	r2, r1
 8000862:	701a      	strb	r2, [r3, #0]
	int swap=nibble_pfort|(nibble_pfaible<<4);
 8000864:	183b      	adds	r3, r7, r0
 8000866:	781a      	ldrb	r2, [r3, #0]
 8000868:	193b      	adds	r3, r7, r4
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	011b      	lsls	r3, r3, #4
 800086e:	4313      	orrs	r3, r2
 8000870:	60bb      	str	r3, [r7, #8]

	//�crire le nibble
	 D_set_E_Toggle(swap);
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	0018      	movs	r0, r3
 8000878:	f7ff ff90 	bl	800079c <D_set_E_Toggle>

	 //attendre un peu
	  LL_mDelay(50); //delay=50us
 800087c:	2032      	movs	r0, #50	; 0x32
 800087e:	f001 f941 	bl	8001b04 <LL_mDelay>
}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	b005      	add	sp, #20
 8000888:	bd90      	pop	{r4, r7, pc}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	50000400 	.word	0x50000400

08000890 <EcrireChaine>:

void EcrireChaine(char ch[]){
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
int  i=0;
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
while(ch[i]!='\0') {EcrireCaractere (ch[i]); i++;}
 800089c:	e009      	b.n	80008b2 <EcrireChaine+0x22>
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	687a      	ldr	r2, [r7, #4]
 80008a2:	18d3      	adds	r3, r2, r3
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	0018      	movs	r0, r3
 80008a8:	f7ff ffbe 	bl	8000828 <EcrireCaractere>
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	3301      	adds	r3, #1
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	687a      	ldr	r2, [r7, #4]
 80008b6:	18d3      	adds	r3, r2, r3
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d1ef      	bne.n	800089e <EcrireChaine+0xe>

}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	46c0      	nop			; (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b004      	add	sp, #16
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <lcdinit4>:

void lcdinit4(){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0

	  LL_mDelay(1000000);//delay=1000ms
 80008cc:	4b4e      	ldr	r3, [pc, #312]	; (8000a08 <lcdinit4+0x140>)
 80008ce:	0018      	movs	r0, r3
 80008d0:	f001 f918 	bl	8001b04 <LL_mDelay>

	//Activer les sorties du microcontr�leur
	PORT_CHAR->MODER&=~(0b11<<(2*DB4));
 80008d4:	23a0      	movs	r3, #160	; 0xa0
 80008d6:	05db      	lsls	r3, r3, #23
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	23a0      	movs	r3, #160	; 0xa0
 80008dc:	05db      	lsls	r3, r3, #23
 80008de:	494b      	ldr	r1, [pc, #300]	; (8000a0c <lcdinit4+0x144>)
 80008e0:	400a      	ands	r2, r1
 80008e2:	601a      	str	r2, [r3, #0]
	PORT_CHAR->MODER|=(0b01<<(2*DB4));
 80008e4:	23a0      	movs	r3, #160	; 0xa0
 80008e6:	05db      	lsls	r3, r3, #23
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	23a0      	movs	r3, #160	; 0xa0
 80008ec:	05db      	lsls	r3, r3, #23
 80008ee:	2180      	movs	r1, #128	; 0x80
 80008f0:	0149      	lsls	r1, r1, #5
 80008f2:	430a      	orrs	r2, r1
 80008f4:	601a      	str	r2, [r3, #0]
	PORT_CHAR->MODER&=~(0b11<<(2*DB5));
 80008f6:	23a0      	movs	r3, #160	; 0xa0
 80008f8:	05db      	lsls	r3, r3, #23
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	23a0      	movs	r3, #160	; 0xa0
 80008fe:	05db      	lsls	r3, r3, #23
 8000900:	4943      	ldr	r1, [pc, #268]	; (8000a10 <lcdinit4+0x148>)
 8000902:	400a      	ands	r2, r1
 8000904:	601a      	str	r2, [r3, #0]
	PORT_CHAR->MODER|=(0b01<<(2*DB5));
 8000906:	23a0      	movs	r3, #160	; 0xa0
 8000908:	05db      	lsls	r3, r3, #23
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	23a0      	movs	r3, #160	; 0xa0
 800090e:	05db      	lsls	r3, r3, #23
 8000910:	2180      	movs	r1, #128	; 0x80
 8000912:	01c9      	lsls	r1, r1, #7
 8000914:	430a      	orrs	r2, r1
 8000916:	601a      	str	r2, [r3, #0]
	PORT_CHAR->MODER&=~(0b11<<(2*DB6));
 8000918:	23a0      	movs	r3, #160	; 0xa0
 800091a:	05db      	lsls	r3, r3, #23
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	23a0      	movs	r3, #160	; 0xa0
 8000920:	05db      	lsls	r3, r3, #23
 8000922:	493c      	ldr	r1, [pc, #240]	; (8000a14 <lcdinit4+0x14c>)
 8000924:	400a      	ands	r2, r1
 8000926:	601a      	str	r2, [r3, #0]
	PORT_CHAR->MODER|=(0b01<<(2*DB6));
 8000928:	23a0      	movs	r3, #160	; 0xa0
 800092a:	05db      	lsls	r3, r3, #23
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	23a0      	movs	r3, #160	; 0xa0
 8000930:	05db      	lsls	r3, r3, #23
 8000932:	2180      	movs	r1, #128	; 0x80
 8000934:	0249      	lsls	r1, r1, #9
 8000936:	430a      	orrs	r2, r1
 8000938:	601a      	str	r2, [r3, #0]
	PORT_CHAR->MODER&=~(0b11<<(2*DB7));
 800093a:	23a0      	movs	r3, #160	; 0xa0
 800093c:	05db      	lsls	r3, r3, #23
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	23a0      	movs	r3, #160	; 0xa0
 8000942:	05db      	lsls	r3, r3, #23
 8000944:	4934      	ldr	r1, [pc, #208]	; (8000a18 <lcdinit4+0x150>)
 8000946:	400a      	ands	r2, r1
 8000948:	601a      	str	r2, [r3, #0]
	PORT_CHAR->MODER|=(0b01<<(2*DB7));
 800094a:	23a0      	movs	r3, #160	; 0xa0
 800094c:	05db      	lsls	r3, r3, #23
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	23a0      	movs	r3, #160	; 0xa0
 8000952:	05db      	lsls	r3, r3, #23
 8000954:	2180      	movs	r1, #128	; 0x80
 8000956:	02c9      	lsls	r1, r1, #11
 8000958:	430a      	orrs	r2, r1
 800095a:	601a      	str	r2, [r3, #0]


	Port_E->MODER&=~(0b11<<(2*E));
 800095c:	4b2f      	ldr	r3, [pc, #188]	; (8000a1c <lcdinit4+0x154>)
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	4b2e      	ldr	r3, [pc, #184]	; (8000a1c <lcdinit4+0x154>)
 8000962:	492f      	ldr	r1, [pc, #188]	; (8000a20 <lcdinit4+0x158>)
 8000964:	400a      	ands	r2, r1
 8000966:	601a      	str	r2, [r3, #0]
	Port_E->MODER|=(0b01<<(2*E));
 8000968:	4b2c      	ldr	r3, [pc, #176]	; (8000a1c <lcdinit4+0x154>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	4b2b      	ldr	r3, [pc, #172]	; (8000a1c <lcdinit4+0x154>)
 800096e:	2180      	movs	r1, #128	; 0x80
 8000970:	00c9      	lsls	r1, r1, #3
 8000972:	430a      	orrs	r2, r1
 8000974:	601a      	str	r2, [r3, #0]

	Port_RS->MODER&=~(0b11<<(2*rs));
 8000976:	4b29      	ldr	r3, [pc, #164]	; (8000a1c <lcdinit4+0x154>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	4b28      	ldr	r3, [pc, #160]	; (8000a1c <lcdinit4+0x154>)
 800097c:	4929      	ldr	r1, [pc, #164]	; (8000a24 <lcdinit4+0x15c>)
 800097e:	400a      	ands	r2, r1
 8000980:	601a      	str	r2, [r3, #0]
	Port_RS->MODER|=(0b01<<(2*rs));
 8000982:	4b26      	ldr	r3, [pc, #152]	; (8000a1c <lcdinit4+0x154>)
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	4b25      	ldr	r3, [pc, #148]	; (8000a1c <lcdinit4+0x154>)
 8000988:	2180      	movs	r1, #128	; 0x80
 800098a:	0049      	lsls	r1, r1, #1
 800098c:	430a      	orrs	r2, r1
 800098e:	601a      	str	r2, [r3, #0]

	  LL_mDelay(20000);//delay=20ms
 8000990:	4b25      	ldr	r3, [pc, #148]	; (8000a28 <lcdinit4+0x160>)
 8000992:	0018      	movs	r0, r3
 8000994:	f001 f8b6 	bl	8001b04 <LL_mDelay>

     Ecrire(0x30);
 8000998:	2030      	movs	r0, #48	; 0x30
 800099a:	f7ff fe85 	bl	80006a8 <Ecrire>
     toggle_e();
 800099e:	f7ff fee7 	bl	8000770 <toggle_e>
     LL_mDelay(5000);//delay=5ms
 80009a2:	4b22      	ldr	r3, [pc, #136]	; (8000a2c <lcdinit4+0x164>)
 80009a4:	0018      	movs	r0, r3
 80009a6:	f001 f8ad 	bl	8001b04 <LL_mDelay>

	Ecrire(0x30);
 80009aa:	2030      	movs	r0, #48	; 0x30
 80009ac:	f7ff fe7c 	bl	80006a8 <Ecrire>
     toggle_e();
 80009b0:	f7ff fede 	bl	8000770 <toggle_e>
     LL_mDelay(200);//delay=200us
 80009b4:	20c8      	movs	r0, #200	; 0xc8
 80009b6:	f001 f8a5 	bl	8001b04 <LL_mDelay>

     Ecrire(0x30);
 80009ba:	2030      	movs	r0, #48	; 0x30
 80009bc:	f7ff fe74 	bl	80006a8 <Ecrire>
     toggle_e();
 80009c0:	f7ff fed6 	bl	8000770 <toggle_e>
     LL_mDelay(200);//delay=200us
 80009c4:	20c8      	movs	r0, #200	; 0xc8
 80009c6:	f001 f89d 	bl	8001b04 <LL_mDelay>

	Ecrire(0x20);
 80009ca:	2020      	movs	r0, #32
 80009cc:	f7ff fe6c 	bl	80006a8 <Ecrire>
     toggle_e();
 80009d0:	f7ff fece 	bl	8000770 <toggle_e>
     LL_mDelay(200);//delay=200us
 80009d4:	20c8      	movs	r0, #200	; 0xc8
 80009d6:	f001 f895 	bl	8001b04 <LL_mDelay>



	//SET FUNCTION: choix du mode de fonctionnement
	EcrireFonction(0x28);
 80009da:	2028      	movs	r0, #40	; 0x28
 80009dc:	f7ff fef0 	bl	80007c0 <EcrireFonction>

	//DISPLAY OFF
	EcrireFonction(0x8);
 80009e0:	2008      	movs	r0, #8
 80009e2:	f7ff feed 	bl	80007c0 <EcrireFonction>

	//DISPLAY CLEAR
	EcrireFonction(1);
 80009e6:	2001      	movs	r0, #1
 80009e8:	f7ff feea 	bl	80007c0 <EcrireFonction>
	LL_mDelay(1600);//delay=1.6ms
 80009ec:	23c8      	movs	r3, #200	; 0xc8
 80009ee:	00db      	lsls	r3, r3, #3
 80009f0:	0018      	movs	r0, r3
 80009f2:	f001 f887 	bl	8001b04 <LL_mDelay>


	//ENTRY MODE SET
	EcrireFonction(0x6);
 80009f6:	2006      	movs	r0, #6
 80009f8:	f7ff fee2 	bl	80007c0 <EcrireFonction>

	//DISPLAY ON

	EcrireFonction(0xC);
 80009fc:	200c      	movs	r0, #12
 80009fe:	f7ff fedf 	bl	80007c0 <EcrireFonction>


}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	000f4240 	.word	0x000f4240
 8000a0c:	ffffcfff 	.word	0xffffcfff
 8000a10:	ffff3fff 	.word	0xffff3fff
 8000a14:	fffcffff 	.word	0xfffcffff
 8000a18:	fff3ffff 	.word	0xfff3ffff
 8000a1c:	50000400 	.word	0x50000400
 8000a20:	fffff3ff 	.word	0xfffff3ff
 8000a24:	fffffcff 	.word	0xfffffcff
 8000a28:	00004e20 	.word	0x00004e20
 8000a2c:	00001388 	.word	0x00001388

08000a30 <Affichage_LCD>:

void Affichage_LCD(char * ligne1, char *ligne2){
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]

	/*effacer l'affichage*/
	// LCD <- 01, display clear
	EcrireFonction(0x80);
 8000a3a:	2080      	movs	r0, #128	; 0x80
 8000a3c:	f7ff fec0 	bl	80007c0 <EcrireFonction>
	EcrireFonction(1);
 8000a40:	2001      	movs	r0, #1
 8000a42:	f7ff febd 	bl	80007c0 <EcrireFonction>
	LL_mDelay(1600);//delay=1.6ms
 8000a46:	23c8      	movs	r3, #200	; 0xc8
 8000a48:	00db      	lsls	r3, r3, #3
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f001 f85a 	bl	8001b04 <LL_mDelay>

	/**ecriture sur la premiere ligne**/
	/*positionner le curseur avec la fonction SET DD RAM ADDRESS */
	EcrireFonction(0x80);
 8000a50:	2080      	movs	r0, #128	; 0x80
 8000a52:	f7ff feb5 	bl	80007c0 <EcrireFonction>
	EcrireChaine(ligne1);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f7ff ff19 	bl	8000890 <EcrireChaine>

	/**ecriture sur la deuxieme ligne**/
	/*positionner le curseur avec la fonction SET DD RAM ADDRESS*/ 
    EcrireFonction(0xC0);
 8000a5e:	20c0      	movs	r0, #192	; 0xc0
 8000a60:	f7ff feae 	bl	80007c0 <EcrireFonction>
	EcrireChaine(ligne2);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	0018      	movs	r0, r3
 8000a68:	f7ff ff12 	bl	8000890 <EcrireChaine>
}
 8000a6c:	46c0      	nop			; (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	b002      	add	sp, #8
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000a78:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <LL_RCC_HSI_Enable+0x18>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	4b03      	ldr	r3, [pc, #12]	; (8000a8c <LL_RCC_HSI_Enable+0x18>)
 8000a7e:	2101      	movs	r1, #1
 8000a80:	430a      	orrs	r2, r1
 8000a82:	601a      	str	r2, [r3, #0]
}
 8000a84:	46c0      	nop			; (mov r8, r8)
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	40021000 	.word	0x40021000

08000a90 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <LL_RCC_HSI_IsReady+0x1c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2204      	movs	r2, #4
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	2b04      	cmp	r3, #4
 8000a9e:	d101      	bne.n	8000aa4 <LL_RCC_HSI_IsReady+0x14>
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	e000      	b.n	8000aa6 <LL_RCC_HSI_IsReady+0x16>
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40021000 	.word	0x40021000

08000ab0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	4a06      	ldr	r2, [pc, #24]	; (8000ad8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000abe:	4013      	ands	r3, r2
 8000ac0:	0019      	movs	r1, r3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	021a      	lsls	r2, r3, #8
 8000ac6:	4b03      	ldr	r3, [pc, #12]	; (8000ad4 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	605a      	str	r2, [r3, #4]
}
 8000acc:	46c0      	nop			; (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b002      	add	sp, #8
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	ffffe0ff 	.word	0xffffe0ff

08000adc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <LL_RCC_SetSysClkSource+0x24>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	2203      	movs	r2, #3
 8000aea:	4393      	bics	r3, r2
 8000aec:	0019      	movs	r1, r3
 8000aee:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <LL_RCC_SetSysClkSource+0x24>)
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	430a      	orrs	r2, r1
 8000af4:	60da      	str	r2, [r3, #12]
}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b002      	add	sp, #8
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	40021000 	.word	0x40021000

08000b04 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000b08:	4b03      	ldr	r3, [pc, #12]	; (8000b18 <LL_RCC_GetSysClkSource+0x14>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	220c      	movs	r2, #12
 8000b0e:	4013      	ands	r3, r2
}
 8000b10:	0018      	movs	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	40021000 	.word	0x40021000

08000b1c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <LL_RCC_SetAHBPrescaler+0x24>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	22f0      	movs	r2, #240	; 0xf0
 8000b2a:	4393      	bics	r3, r2
 8000b2c:	0019      	movs	r1, r3
 8000b2e:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <LL_RCC_SetAHBPrescaler+0x24>)
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	430a      	orrs	r2, r1
 8000b34:	60da      	str	r2, [r3, #12]
}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	b002      	add	sp, #8
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	40021000 	.word	0x40021000

08000b44 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	4a06      	ldr	r2, [pc, #24]	; (8000b6c <LL_RCC_SetAPB1Prescaler+0x28>)
 8000b52:	4013      	ands	r3, r2
 8000b54:	0019      	movs	r1, r3
 8000b56:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	60da      	str	r2, [r3, #12]
}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	b002      	add	sp, #8
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	fffff8ff 	.word	0xfffff8ff

08000b70 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	4a06      	ldr	r2, [pc, #24]	; (8000b98 <LL_RCC_SetAPB2Prescaler+0x28>)
 8000b7e:	4013      	ands	r3, r2
 8000b80:	0019      	movs	r1, r3
 8000b82:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	430a      	orrs	r2, r1
 8000b88:	60da      	str	r2, [r3, #12]
}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	b002      	add	sp, #8
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	40021000 	.word	0x40021000
 8000b98:	ffffc7ff 	.word	0xffffc7ff

08000b9c <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <LL_RCC_SetUSARTClockSource+0x2c>)
 8000ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	0c12      	lsrs	r2, r2, #16
 8000bac:	43d2      	mvns	r2, r2
 8000bae:	401a      	ands	r2, r3
 8000bb0:	0011      	movs	r1, r2
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	041b      	lsls	r3, r3, #16
 8000bb6:	0c1a      	lsrs	r2, r3, #16
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <LL_RCC_SetUSARTClockSource+0x2c>)
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	b002      	add	sp, #8
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	40021000 	.word	0x40021000

08000bcc <LL_APB1_GRP1_EnableClock>:
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000bd4:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <LL_APB1_GRP1_EnableClock+0x28>)
 8000bd6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <LL_APB1_GRP1_EnableClock+0x28>)
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <LL_APB1_GRP1_EnableClock+0x28>)
 8000be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000be4:	687a      	ldr	r2, [r7, #4]
 8000be6:	4013      	ands	r3, r2
 8000be8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bea:	68fb      	ldr	r3, [r7, #12]
}
 8000bec:	46c0      	nop			; (mov r8, r8)
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	b004      	add	sp, #16
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40021000 	.word	0x40021000

08000bf8 <LL_APB2_GRP1_EnableClock>:
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c00:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <LL_APB2_GRP1_EnableClock+0x28>)
 8000c02:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <LL_APB2_GRP1_EnableClock+0x28>)
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c0c:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <LL_APB2_GRP1_EnableClock+0x28>)
 8000c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c10:	687a      	ldr	r2, [r7, #4]
 8000c12:	4013      	ands	r3, r2
 8000c14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c16:	68fb      	ldr	r3, [r7, #12]
}
 8000c18:	46c0      	nop			; (mov r8, r8)
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b004      	add	sp, #16
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40021000 	.word	0x40021000

08000c24 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <LL_FLASH_SetLatency+0x24>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2201      	movs	r2, #1
 8000c32:	4393      	bics	r3, r2
 8000c34:	0019      	movs	r1, r3
 8000c36:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <LL_FLASH_SetLatency+0x24>)
 8000c38:	687a      	ldr	r2, [r7, #4]
 8000c3a:	430a      	orrs	r2, r1
 8000c3c:	601a      	str	r2, [r3, #0]
}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	46bd      	mov	sp, r7
 8000c42:	b002      	add	sp, #8
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	40022000 	.word	0x40022000

08000c4c <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000c50:	4b03      	ldr	r3, [pc, #12]	; (8000c60 <LL_FLASH_GetLatency+0x14>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2201      	movs	r2, #1
 8000c56:	4013      	ands	r3, r2
}
 8000c58:	0018      	movs	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	40022000 	.word	0x40022000

08000c64 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a06      	ldr	r2, [pc, #24]	; (8000c8c <LL_PWR_SetRegulVoltageScaling+0x28>)
 8000c72:	4013      	ands	r3, r2
 8000c74:	0019      	movs	r1, r3
 8000c76:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	430a      	orrs	r2, r1
 8000c7c:	601a      	str	r2, [r3, #0]
}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b002      	add	sp, #8
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	40007000 	.word	0x40007000
 8000c8c:	ffffe7ff 	.word	0xffffe7ff

08000c90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c92:	b08b      	sub	sp, #44	; 0x2c
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000c96:	2001      	movs	r0, #1
 8000c98:	f7ff ffae 	bl	8000bf8 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000c9c:	2380      	movs	r3, #128	; 0x80
 8000c9e:	055b      	lsls	r3, r3, #21
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f7ff ff93 	bl	8000bcc <LL_APB1_GRP1_EnableClock>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ca6:	f000 f83d 	bl	8000d24 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  //activation de l'horloge pour GPIOA et GPIOB
  RCC->IOPENR |= RCC_IOPENR_GPIOAEN | RCC_IOPENR_GPIOBEN;
 8000caa:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <main+0x88>)
 8000cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cae:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <main+0x88>)
 8000cb0:	2103      	movs	r1, #3
 8000cb2:	430a      	orrs	r2, r1
 8000cb4:	62da      	str	r2, [r3, #44]	; 0x2c
  /*Ici la fonction LL_mDelay sera utilisée pour faire des temps d'attente en us Pour cette raison on initialise le nombre de ticks nécessaire pour faire 1ms à 16000 au lieu de 16000000
  */
  LL_Init1msTick(16000);
 8000cb6:	23fa      	movs	r3, #250	; 0xfa
 8000cb8:	019b      	lsls	r3, r3, #6
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f000 ff12 	bl	8001ae4 <LL_Init1msTick>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc0:	f7ff fc8e 	bl	80005e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cc4:	f000 f8d8 	bl	8000e78 <MX_USART2_UART_Init>
  MX_ADC_Init();
 8000cc8:	f7ff fb64 	bl	8000394 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  //Initialisation du LCD
  lcdinit4(); //call lcdinit4
 8000ccc:	f7ff fdfc 	bl	80008c8 <lcdinit4>
  while (1)
  {
    /* USER CODE END WHILE */

	  //les deux lignes qui seront affichées sur le LCD
	  char Text_LCD1[20] = "Test LCD";
 8000cd0:	2414      	movs	r4, #20
 8000cd2:	1939      	adds	r1, r7, r4
 8000cd4:	4a11      	ldr	r2, [pc, #68]	; (8000d1c <main+0x8c>)
 8000cd6:	000b      	movs	r3, r1
 8000cd8:	ca21      	ldmia	r2!, {r0, r5}
 8000cda:	c321      	stmia	r3!, {r0, r5}
 8000cdc:	7812      	ldrb	r2, [r2, #0]
 8000cde:	701a      	strb	r2, [r3, #0]
 8000ce0:	2309      	movs	r3, #9
 8000ce2:	18cb      	adds	r3, r1, r3
 8000ce4:	220b      	movs	r2, #11
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f000 ff5f 	bl	8001bac <memset>
	  char Text_LCD2[20] = "Hello World!!";
 8000cee:	0039      	movs	r1, r7
 8000cf0:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <main+0x90>)
 8000cf2:	000b      	movs	r3, r1
 8000cf4:	ca61      	ldmia	r2!, {r0, r5, r6}
 8000cf6:	c361      	stmia	r3!, {r0, r5, r6}
 8000cf8:	8812      	ldrh	r2, [r2, #0]
 8000cfa:	801a      	strh	r2, [r3, #0]
 8000cfc:	230e      	movs	r3, #14
 8000cfe:	18cb      	adds	r3, r1, r3
 8000d00:	2206      	movs	r2, #6
 8000d02:	2100      	movs	r1, #0
 8000d04:	0018      	movs	r0, r3
 8000d06:	f000 ff51 	bl	8001bac <memset>
	  //Affichage sur le LCD
	  Affichage_LCD(Text_LCD1, Text_LCD2); //call Affichage_LCD
 8000d0a:	003a      	movs	r2, r7
 8000d0c:	193b      	adds	r3, r7, r4
 8000d0e:	0011      	movs	r1, r2
 8000d10:	0018      	movs	r0, r3
 8000d12:	f7ff fe8d 	bl	8000a30 <Affichage_LCD>
  {
 8000d16:	e7db      	b.n	8000cd0 <main+0x40>
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	08001bd4 	.word	0x08001bd4
 8000d20:	08001be8 	.word	0x08001be8

08000d24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f7ff ff7b 	bl	8000c24 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	f7ff ff8c 	bl	8000c4c <LL_FLASH_GetLatency>
 8000d34:	1e03      	subs	r3, r0, #0
 8000d36:	d1fb      	bne.n	8000d30 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000d38:	2380      	movs	r3, #128	; 0x80
 8000d3a:	011b      	lsls	r3, r3, #4
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f7ff ff91 	bl	8000c64 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 8000d42:	f7ff fe97 	bl	8000a74 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	f7ff fea2 	bl	8000a90 <LL_RCC_HSI_IsReady>
 8000d4c:	0003      	movs	r3, r0
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d1fa      	bne.n	8000d48 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000d52:	2010      	movs	r0, #16
 8000d54:	f7ff feac 	bl	8000ab0 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f7ff fedf 	bl	8000b1c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f7ff fef0 	bl	8000b44 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000d64:	2000      	movs	r0, #0
 8000d66:	f7ff ff03 	bl	8000b70 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	f7ff feb6 	bl	8000adc <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	f7ff fec7 	bl	8000b04 <LL_RCC_GetSysClkSource>
 8000d76:	0003      	movs	r3, r0
 8000d78:	2b04      	cmp	r3, #4
 8000d7a:	d1fa      	bne.n	8000d72 <SystemClock_Config+0x4e>
  {

  }

  LL_Init1msTick(16000000);
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <SystemClock_Config+0x78>)
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f000 feb0 	bl	8001ae4 <LL_Init1msTick>

  LL_SetSystemCoreClock(16000000);
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <SystemClock_Config+0x78>)
 8000d86:	0018      	movs	r0, r3
 8000d88:	f000 fede 	bl	8001b48 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8000d8c:	23c0      	movs	r3, #192	; 0xc0
 8000d8e:	031b      	lsls	r3, r3, #12
 8000d90:	0018      	movs	r0, r3
 8000d92:	f7ff ff03 	bl	8000b9c <LL_RCC_SetUSARTClockSource>
}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	00f42400 	.word	0x00f42400

08000da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <NMI_Handler+0x4>

08000da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <HardFault_Handler+0x4>

08000dac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000db0:	46c0      	nop			; (mov r8, r8)
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc4:	46c0      	nop			; (mov r8, r8)
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <LL_APB1_GRP1_EnableClock>:
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000ddc:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <LL_APB1_GRP1_EnableClock+0x28>)
 8000dde:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <LL_APB1_GRP1_EnableClock+0x28>)
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	430a      	orrs	r2, r1
 8000de6:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000de8:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <LL_APB1_GRP1_EnableClock+0x28>)
 8000dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	4013      	ands	r3, r2
 8000df0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000df2:	68fb      	ldr	r3, [r7, #12]
}
 8000df4:	46c0      	nop			; (mov r8, r8)
 8000df6:	46bd      	mov	sp, r7
 8000df8:	b004      	add	sp, #16
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40021000 	.word	0x40021000

08000e00 <LL_IOP_GRP1_EnableClock>:
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8000e08:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <LL_IOP_GRP1_EnableClock+0x28>)
 8000e0a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <LL_IOP_GRP1_EnableClock+0x28>)
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	430a      	orrs	r2, r1
 8000e12:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000e14:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <LL_IOP_GRP1_EnableClock+0x28>)
 8000e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
}
 8000e20:	46c0      	nop			; (mov r8, r8)
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b004      	add	sp, #16
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40021000 	.word	0x40021000

08000e2c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2201      	movs	r2, #1
 8000e3a:	431a      	orrs	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	601a      	str	r2, [r3, #0]
}
 8000e40:	46c0      	nop			; (mov r8, r8)
 8000e42:	46bd      	mov	sp, r7
 8000e44:	b002      	add	sp, #8
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	4a07      	ldr	r2, [pc, #28]	; (8000e74 <LL_USART_ConfigAsyncMode+0x2c>)
 8000e56:	401a      	ands	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	222a      	movs	r2, #42	; 0x2a
 8000e62:	4393      	bics	r3, r2
 8000e64:	001a      	movs	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	609a      	str	r2, [r3, #8]
}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	b002      	add	sp, #8
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	ffffb7ff 	.word	0xffffb7ff

08000e78 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e78:	b590      	push	{r4, r7, lr}
 8000e7a:	b08f      	sub	sp, #60	; 0x3c
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000e7e:	241c      	movs	r4, #28
 8000e80:	193b      	adds	r3, r7, r4
 8000e82:	0018      	movs	r0, r3
 8000e84:	231c      	movs	r3, #28
 8000e86:	001a      	movs	r2, r3
 8000e88:	2100      	movs	r1, #0
 8000e8a:	f000 fe8f 	bl	8001bac <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	0018      	movs	r0, r3
 8000e92:	2318      	movs	r3, #24
 8000e94:	001a      	movs	r2, r3
 8000e96:	2100      	movs	r1, #0
 8000e98:	f000 fe88 	bl	8001bac <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000e9c:	2380      	movs	r3, #128	; 0x80
 8000e9e:	029b      	lsls	r3, r3, #10
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f7ff ff97 	bl	8000dd4 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	f7ff ffaa 	bl	8000e00 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin;
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	2204      	movs	r2, #4
 8000eb0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	2203      	movs	r2, #3
 8000ebc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	2204      	movs	r2, #4
 8000ece:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8000ed0:	1d3a      	adds	r2, r7, #4
 8000ed2:	23a0      	movs	r3, #160	; 0xa0
 8000ed4:	05db      	lsls	r3, r3, #23
 8000ed6:	0011      	movs	r1, r2
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f000 fab1 	bl	8001440 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = USART_RX_Pin;
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2208      	movs	r2, #8
 8000ee2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	2203      	movs	r2, #3
 8000eee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ef0:	1d3b      	adds	r3, r7, #4
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	2204      	movs	r2, #4
 8000f00:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8000f02:	1d3a      	adds	r2, r7, #4
 8000f04:	23a0      	movs	r3, #160	; 0xa0
 8000f06:	05db      	lsls	r3, r3, #23
 8000f08:	0011      	movs	r1, r2
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f000 fa98 	bl	8001440 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000f10:	193b      	adds	r3, r7, r4
 8000f12:	22e1      	movs	r2, #225	; 0xe1
 8000f14:	0252      	lsls	r2, r2, #9
 8000f16:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000f18:	0021      	movs	r1, r4
 8000f1a:	187b      	adds	r3, r7, r1
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000f20:	187b      	adds	r3, r7, r1
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000f26:	187b      	adds	r3, r7, r1
 8000f28:	2200      	movs	r2, #0
 8000f2a:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000f2c:	187b      	adds	r3, r7, r1
 8000f2e:	220c      	movs	r2, #12
 8000f30:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000f32:	187b      	adds	r3, r7, r1
 8000f34:	2200      	movs	r2, #0
 8000f36:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000f38:	187b      	adds	r3, r7, r1
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000f3e:	187b      	adds	r3, r7, r1
 8000f40:	4a08      	ldr	r2, [pc, #32]	; (8000f64 <MX_USART2_UART_Init+0xec>)
 8000f42:	0019      	movs	r1, r3
 8000f44:	0010      	movs	r0, r2
 8000f46:	f000 fd4f 	bl	80019e8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <MX_USART2_UART_Init+0xec>)
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f7ff ff7b 	bl	8000e48 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000f52:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <MX_USART2_UART_Init+0xec>)
 8000f54:	0018      	movs	r0, r3
 8000f56:	f7ff ff69 	bl	8000e2c <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	b00f      	add	sp, #60	; 0x3c
 8000f60:	bd90      	pop	{r4, r7, pc}
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	40004400 	.word	0x40004400

08000f68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000f68:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f6a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f6c:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f6e:	490e      	ldr	r1, [pc, #56]	; (8000fa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f70:	4a0e      	ldr	r2, [pc, #56]	; (8000fac <LoopForever+0xe>)
  movs r3, #0
 8000f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f74:	e002      	b.n	8000f7c <LoopCopyDataInit>

08000f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7a:	3304      	adds	r3, #4

08000f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f80:	d3f9      	bcc.n	8000f76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f82:	4a0b      	ldr	r2, [pc, #44]	; (8000fb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f84:	4c0b      	ldr	r4, [pc, #44]	; (8000fb4 <LoopForever+0x16>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f88:	e001      	b.n	8000f8e <LoopFillZerobss>

08000f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f8c:	3204      	adds	r2, #4

08000f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f90:	d3fb      	bcc.n	8000f8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f92:	f7ff ff1a 	bl	8000dca <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f96:	f000 fde5 	bl	8001b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f9a:	f7ff fe79 	bl	8000c90 <main>

08000f9e <LoopForever>:

LoopForever:
    b LoopForever
 8000f9e:	e7fe      	b.n	8000f9e <LoopForever>
  ldr   r0, =_estack
 8000fa0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000fac:	08001c28 	.word	0x08001c28
  ldr r2, =_sbss
 8000fb0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000fb4:	20000020 	.word	0x20000020

08000fb8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb8:	e7fe      	b.n	8000fb8 <ADC1_COMP_IRQHandler>

08000fba <LL_ADC_IsEnabled>:
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	4013      	ands	r3, r2
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	425a      	negs	r2, r3
 8000fce:	4153      	adcs	r3, r2
 8000fd0:	b2db      	uxtb	r3, r3
}
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	b002      	add	sp, #8
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8000fe6:	230f      	movs	r3, #15
 8000fe8:	18fb      	adds	r3, r7, r3
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	f7ff ffe2 	bl	8000fba <LL_ADC_IsEnabled>
 8000ff6:	1e03      	subs	r3, r0, #0
 8000ff8:	d118      	bne.n	800102c <LL_ADC_Init+0x50>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	4a11      	ldr	r2, [pc, #68]	; (8001044 <LL_ADC_Init+0x68>)
 8001000:	401a      	ands	r2, r3
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	6859      	ldr	r1, [r3, #4]
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	4319      	orrs	r1, r3
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	430b      	orrs	r3, r1
 8001012:	431a      	orrs	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	60da      	str	r2, [r3, #12]
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );
    
    MODIFY_REG(ADCx->CFGR2,
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	691b      	ldr	r3, [r3, #16]
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	089a      	lsrs	r2, r3, #2
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	431a      	orrs	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	611a      	str	r2, [r3, #16]
 800102a:	e003      	b.n	8001034 <LL_ADC_Init+0x58>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800102c:	230f      	movs	r3, #15
 800102e:	18fb      	adds	r3, r7, r3
 8001030:	2201      	movs	r2, #1
 8001032:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001034:	230f      	movs	r3, #15
 8001036:	18fb      	adds	r3, r7, r3
 8001038:	781b      	ldrb	r3, [r3, #0]
}
 800103a:	0018      	movs	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	b004      	add	sp, #16
 8001040:	bd80      	pop	{r7, pc}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	ffff3fc7 	.word	0xffff3fc7

08001048 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001052:	230f      	movs	r3, #15
 8001054:	18fb      	adds	r3, r7, r3
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	0018      	movs	r0, r3
 800105e:	f7ff ffac 	bl	8000fba <LL_ADC_IsEnabled>
 8001062:	1e03      	subs	r3, r0, #0
 8001064:	d115      	bne.n	8001092 <LL_ADC_REG_Init+0x4a>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    MODIFY_REG(ADCx->CFGR1,
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	4a0f      	ldr	r2, [pc, #60]	; (80010a8 <LL_ADC_REG_Init+0x60>)
 800106c:	401a      	ands	r2, r3
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	6819      	ldr	r1, [r3, #0]
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	4319      	orrs	r1, r3
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	4319      	orrs	r1, r3
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	4319      	orrs	r1, r3
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	691b      	ldr	r3, [r3, #16]
 8001088:	430b      	orrs	r3, r1
 800108a:	431a      	orrs	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	60da      	str	r2, [r3, #12]
 8001090:	e003      	b.n	800109a <LL_ADC_REG_Init+0x52>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001092:	230f      	movs	r3, #15
 8001094:	18fb      	adds	r3, r7, r3
 8001096:	2201      	movs	r2, #1
 8001098:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800109a:	230f      	movs	r3, #15
 800109c:	18fb      	adds	r3, r7, r3
 800109e:	781b      	ldrb	r3, [r3, #0]
}
 80010a0:	0018      	movs	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	b004      	add	sp, #16
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	fffec23c 	.word	0xfffec23c

080010ac <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <LL_EXTI_EnableIT_0_31+0x1c>)
 80010b6:	6819      	ldr	r1, [r3, #0]
 80010b8:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <LL_EXTI_EnableIT_0_31+0x1c>)
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	430a      	orrs	r2, r1
 80010be:	601a      	str	r2, [r3, #0]
}
 80010c0:	46c0      	nop			; (mov r8, r8)
 80010c2:	46bd      	mov	sp, r7
 80010c4:	b002      	add	sp, #8
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40010400 	.word	0x40010400

080010cc <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <LL_EXTI_DisableIT_0_31+0x20>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	43d9      	mvns	r1, r3
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <LL_EXTI_DisableIT_0_31+0x20>)
 80010de:	400a      	ands	r2, r1
 80010e0:	601a      	str	r2, [r3, #0]
}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	46bd      	mov	sp, r7
 80010e6:	b002      	add	sp, #8
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	40010400 	.word	0x40010400

080010f0 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80010f8:	4b04      	ldr	r3, [pc, #16]	; (800110c <LL_EXTI_EnableEvent_0_31+0x1c>)
 80010fa:	6859      	ldr	r1, [r3, #4]
 80010fc:	4b03      	ldr	r3, [pc, #12]	; (800110c <LL_EXTI_EnableEvent_0_31+0x1c>)
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	430a      	orrs	r2, r1
 8001102:	605a      	str	r2, [r3, #4]

}
 8001104:	46c0      	nop			; (mov r8, r8)
 8001106:	46bd      	mov	sp, r7
 8001108:	b002      	add	sp, #8
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40010400 	.word	0x40010400

08001110 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001118:	4b05      	ldr	r3, [pc, #20]	; (8001130 <LL_EXTI_DisableEvent_0_31+0x20>)
 800111a:	685a      	ldr	r2, [r3, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	43d9      	mvns	r1, r3
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <LL_EXTI_DisableEvent_0_31+0x20>)
 8001122:	400a      	ands	r2, r1
 8001124:	605a      	str	r2, [r3, #4]
}
 8001126:	46c0      	nop			; (mov r8, r8)
 8001128:	46bd      	mov	sp, r7
 800112a:	b002      	add	sp, #8
 800112c:	bd80      	pop	{r7, pc}
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	40010400 	.word	0x40010400

08001134 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 800113c:	4b04      	ldr	r3, [pc, #16]	; (8001150 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800113e:	6899      	ldr	r1, [r3, #8]
 8001140:	4b03      	ldr	r3, [pc, #12]	; (8001150 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	430a      	orrs	r2, r1
 8001146:	609a      	str	r2, [r3, #8]

}
 8001148:	46c0      	nop			; (mov r8, r8)
 800114a:	46bd      	mov	sp, r7
 800114c:	b002      	add	sp, #8
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40010400 	.word	0x40010400

08001154 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800115c:	4b05      	ldr	r3, [pc, #20]	; (8001174 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800115e:	689a      	ldr	r2, [r3, #8]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	43d9      	mvns	r1, r3
 8001164:	4b03      	ldr	r3, [pc, #12]	; (8001174 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001166:	400a      	ands	r2, r1
 8001168:	609a      	str	r2, [r3, #8]

}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	46bd      	mov	sp, r7
 800116e:	b002      	add	sp, #8
 8001170:	bd80      	pop	{r7, pc}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	40010400 	.word	0x40010400

08001178 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8001182:	68d9      	ldr	r1, [r3, #12]
 8001184:	4b03      	ldr	r3, [pc, #12]	; (8001194 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	430a      	orrs	r2, r1
 800118a:	60da      	str	r2, [r3, #12]
}
 800118c:	46c0      	nop			; (mov r8, r8)
 800118e:	46bd      	mov	sp, r7
 8001190:	b002      	add	sp, #8
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40010400 	.word	0x40010400

08001198 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80011a2:	68da      	ldr	r2, [r3, #12]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	43d9      	mvns	r1, r3
 80011a8:	4b03      	ldr	r3, [pc, #12]	; (80011b8 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80011aa:	400a      	ands	r2, r1
 80011ac:	60da      	str	r2, [r3, #12]
}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	46bd      	mov	sp, r7
 80011b2:	b002      	add	sp, #8
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	40010400 	.word	0x40010400

080011bc <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80011c4:	230f      	movs	r3, #15
 80011c6:	18fb      	adds	r3, r7, r3
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	791b      	ldrb	r3, [r3, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d100      	bne.n	80011d6 <LL_EXTI_Init+0x1a>
 80011d4:	e068      	b.n	80012a8 <LL_EXTI_Init+0xec>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d100      	bne.n	80011e0 <LL_EXTI_Init+0x24>
 80011de:	e06e      	b.n	80012be <LL_EXTI_Init+0x102>
    {
      switch (EXTI_InitStruct->Mode)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	795b      	ldrb	r3, [r3, #5]
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d01b      	beq.n	8001220 <LL_EXTI_Init+0x64>
 80011e8:	dc25      	bgt.n	8001236 <LL_EXTI_Init+0x7a>
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d002      	beq.n	80011f4 <LL_EXTI_Init+0x38>
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d00b      	beq.n	800120a <LL_EXTI_Init+0x4e>
 80011f2:	e020      	b.n	8001236 <LL_EXTI_Init+0x7a>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	0018      	movs	r0, r3
 80011fa:	f7ff ff89 	bl	8001110 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	0018      	movs	r0, r3
 8001204:	f7ff ff52 	bl	80010ac <LL_EXTI_EnableIT_0_31>
          break;
 8001208:	e01a      	b.n	8001240 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	0018      	movs	r0, r3
 8001210:	f7ff ff5c 	bl	80010cc <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	0018      	movs	r0, r3
 800121a:	f7ff ff69 	bl	80010f0 <LL_EXTI_EnableEvent_0_31>
          break;
 800121e:	e00f      	b.n	8001240 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	0018      	movs	r0, r3
 8001226:	f7ff ff41 	bl	80010ac <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	0018      	movs	r0, r3
 8001230:	f7ff ff5e 	bl	80010f0 <LL_EXTI_EnableEvent_0_31>
          break;
 8001234:	e004      	b.n	8001240 <LL_EXTI_Init+0x84>
        default:
          status = ERROR;
 8001236:	230f      	movs	r3, #15
 8001238:	18fb      	adds	r3, r7, r3
 800123a:	2201      	movs	r2, #1
 800123c:	701a      	strb	r2, [r3, #0]
          break;
 800123e:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	799b      	ldrb	r3, [r3, #6]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d03a      	beq.n	80012be <LL_EXTI_Init+0x102>
      {
        switch (EXTI_InitStruct->Trigger)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	799b      	ldrb	r3, [r3, #6]
 800124c:	2b03      	cmp	r3, #3
 800124e:	d01b      	beq.n	8001288 <LL_EXTI_Init+0xcc>
 8001250:	dc25      	bgt.n	800129e <LL_EXTI_Init+0xe2>
 8001252:	2b01      	cmp	r3, #1
 8001254:	d002      	beq.n	800125c <LL_EXTI_Init+0xa0>
 8001256:	2b02      	cmp	r3, #2
 8001258:	d00b      	beq.n	8001272 <LL_EXTI_Init+0xb6>
 800125a:	e020      	b.n	800129e <LL_EXTI_Init+0xe2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	0018      	movs	r0, r3
 8001262:	f7ff ff99 	bl	8001198 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	0018      	movs	r0, r3
 800126c:	f7ff ff62 	bl	8001134 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001270:	e026      	b.n	80012c0 <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	0018      	movs	r0, r3
 8001278:	f7ff ff6c 	bl	8001154 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	0018      	movs	r0, r3
 8001282:	f7ff ff79 	bl	8001178 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001286:	e01b      	b.n	80012c0 <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	0018      	movs	r0, r3
 800128e:	f7ff ff51 	bl	8001134 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	0018      	movs	r0, r3
 8001298:	f7ff ff6e 	bl	8001178 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800129c:	e010      	b.n	80012c0 <LL_EXTI_Init+0x104>
          default:
            status = ERROR;
 800129e:	230f      	movs	r3, #15
 80012a0:	18fb      	adds	r3, r7, r3
 80012a2:	2201      	movs	r2, #1
 80012a4:	701a      	strb	r2, [r3, #0]
            break;
 80012a6:	e00b      	b.n	80012c0 <LL_EXTI_Init+0x104>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	0018      	movs	r0, r3
 80012ae:	f7ff ff0d 	bl	80010cc <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	0018      	movs	r0, r3
 80012b8:	f7ff ff2a 	bl	8001110 <LL_EXTI_DisableEvent_0_31>
 80012bc:	e000      	b.n	80012c0 <LL_EXTI_Init+0x104>
      }
 80012be:	46c0      	nop			; (mov r8, r8)
  }
  return status;
 80012c0:	230f      	movs	r3, #15
 80012c2:	18fb      	adds	r3, r7, r3
 80012c4:	781b      	ldrb	r3, [r3, #0]
}
 80012c6:	0018      	movs	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	b004      	add	sp, #16
 80012cc:	bd80      	pop	{r7, pc}

080012ce <LL_GPIO_SetPinMode>:
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b084      	sub	sp, #16
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	60f8      	str	r0, [r7, #12]
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	6819      	ldr	r1, [r3, #0]
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	435b      	muls	r3, r3
 80012e2:	001a      	movs	r2, r3
 80012e4:	0013      	movs	r3, r2
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	189b      	adds	r3, r3, r2
 80012ea:	43db      	mvns	r3, r3
 80012ec:	400b      	ands	r3, r1
 80012ee:	001a      	movs	r2, r3
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	435b      	muls	r3, r3
 80012f4:	6879      	ldr	r1, [r7, #4]
 80012f6:	434b      	muls	r3, r1
 80012f8:	431a      	orrs	r2, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	601a      	str	r2, [r3, #0]
}
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	46bd      	mov	sp, r7
 8001302:	b004      	add	sp, #16
 8001304:	bd80      	pop	{r7, pc}

08001306 <LL_GPIO_SetPinOutputType>:
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b084      	sub	sp, #16
 800130a:	af00      	add	r7, sp, #0
 800130c:	60f8      	str	r0, [r7, #12]
 800130e:	60b9      	str	r1, [r7, #8]
 8001310:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	43d2      	mvns	r2, r2
 800131a:	401a      	ands	r2, r3
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	434b      	muls	r3, r1
 8001322:	431a      	orrs	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	605a      	str	r2, [r3, #4]
}
 8001328:	46c0      	nop			; (mov r8, r8)
 800132a:	46bd      	mov	sp, r7
 800132c:	b004      	add	sp, #16
 800132e:	bd80      	pop	{r7, pc}

08001330 <LL_GPIO_SetPinSpeed>:
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6899      	ldr	r1, [r3, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	435b      	muls	r3, r3
 8001344:	001a      	movs	r2, r3
 8001346:	0013      	movs	r3, r2
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	189b      	adds	r3, r3, r2
 800134c:	43db      	mvns	r3, r3
 800134e:	400b      	ands	r3, r1
 8001350:	001a      	movs	r2, r3
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	435b      	muls	r3, r3
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	434b      	muls	r3, r1
 800135a:	431a      	orrs	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	609a      	str	r2, [r3, #8]
}
 8001360:	46c0      	nop			; (mov r8, r8)
 8001362:	46bd      	mov	sp, r7
 8001364:	b004      	add	sp, #16
 8001366:	bd80      	pop	{r7, pc}

08001368 <LL_GPIO_SetPinPull>:
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	68d9      	ldr	r1, [r3, #12]
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	435b      	muls	r3, r3
 800137c:	001a      	movs	r2, r3
 800137e:	0013      	movs	r3, r2
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	189b      	adds	r3, r3, r2
 8001384:	43db      	mvns	r3, r3
 8001386:	400b      	ands	r3, r1
 8001388:	001a      	movs	r2, r3
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	435b      	muls	r3, r3
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	434b      	muls	r3, r1
 8001392:	431a      	orrs	r2, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	60da      	str	r2, [r3, #12]
}
 8001398:	46c0      	nop			; (mov r8, r8)
 800139a:	46bd      	mov	sp, r7
 800139c:	b004      	add	sp, #16
 800139e:	bd80      	pop	{r7, pc}

080013a0 <LL_GPIO_SetAFPin_0_7>:
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	6a19      	ldr	r1, [r3, #32]
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	435b      	muls	r3, r3
 80013b4:	68ba      	ldr	r2, [r7, #8]
 80013b6:	4353      	muls	r3, r2
 80013b8:	68ba      	ldr	r2, [r7, #8]
 80013ba:	435a      	muls	r2, r3
 80013bc:	0013      	movs	r3, r2
 80013be:	011b      	lsls	r3, r3, #4
 80013c0:	1a9b      	subs	r3, r3, r2
 80013c2:	43db      	mvns	r3, r3
 80013c4:	400b      	ands	r3, r1
 80013c6:	001a      	movs	r2, r3
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	435b      	muls	r3, r3
 80013cc:	68b9      	ldr	r1, [r7, #8]
 80013ce:	434b      	muls	r3, r1
 80013d0:	68b9      	ldr	r1, [r7, #8]
 80013d2:	434b      	muls	r3, r1
 80013d4:	6879      	ldr	r1, [r7, #4]
 80013d6:	434b      	muls	r3, r1
 80013d8:	431a      	orrs	r2, r3
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	621a      	str	r2, [r3, #32]
}
 80013de:	46c0      	nop			; (mov r8, r8)
 80013e0:	46bd      	mov	sp, r7
 80013e2:	b004      	add	sp, #16
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <LL_GPIO_SetAFPin_8_15>:
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b084      	sub	sp, #16
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	60f8      	str	r0, [r7, #12]
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	0a1b      	lsrs	r3, r3, #8
 80013fa:	68ba      	ldr	r2, [r7, #8]
 80013fc:	0a12      	lsrs	r2, r2, #8
 80013fe:	4353      	muls	r3, r2
 8001400:	68ba      	ldr	r2, [r7, #8]
 8001402:	0a12      	lsrs	r2, r2, #8
 8001404:	4353      	muls	r3, r2
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	0a12      	lsrs	r2, r2, #8
 800140a:	435a      	muls	r2, r3
 800140c:	0013      	movs	r3, r2
 800140e:	011b      	lsls	r3, r3, #4
 8001410:	1a9b      	subs	r3, r3, r2
 8001412:	43db      	mvns	r3, r3
 8001414:	400b      	ands	r3, r1
 8001416:	001a      	movs	r2, r3
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	0a1b      	lsrs	r3, r3, #8
 800141c:	68b9      	ldr	r1, [r7, #8]
 800141e:	0a09      	lsrs	r1, r1, #8
 8001420:	434b      	muls	r3, r1
 8001422:	68b9      	ldr	r1, [r7, #8]
 8001424:	0a09      	lsrs	r1, r1, #8
 8001426:	434b      	muls	r3, r1
 8001428:	68b9      	ldr	r1, [r7, #8]
 800142a:	0a09      	lsrs	r1, r1, #8
 800142c:	434b      	muls	r3, r1
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	434b      	muls	r3, r1
 8001432:	431a      	orrs	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001438:	46c0      	nop			; (mov r8, r8)
 800143a:	46bd      	mov	sp, r7
 800143c:	b004      	add	sp, #16
 800143e:	bd80      	pop	{r7, pc}

08001440 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001452:	e048      	b.n	80014e6 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2101      	movs	r1, #1
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	4091      	lsls	r1, r2
 800145e:	000a      	movs	r2, r1
 8001460:	4013      	ands	r3, r2
 8001462:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d03a      	beq.n	80014e0 <LL_GPIO_Init+0xa0>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d003      	beq.n	800147a <LL_GPIO_Init+0x3a>
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2b02      	cmp	r3, #2
 8001478:	d10e      	bne.n	8001498 <LL_GPIO_Init+0x58>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	689a      	ldr	r2, [r3, #8]
 800147e:	68b9      	ldr	r1, [r7, #8]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	0018      	movs	r0, r3
 8001484:	f7ff ff54 	bl	8001330 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	6819      	ldr	r1, [r3, #0]
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	68da      	ldr	r2, [r3, #12]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	0018      	movs	r0, r3
 8001494:	f7ff ff37 	bl	8001306 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	691a      	ldr	r2, [r3, #16]
 800149c:	68b9      	ldr	r1, [r7, #8]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	0018      	movs	r0, r3
 80014a2:	f7ff ff61 	bl	8001368 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d111      	bne.n	80014d2 <LL_GPIO_Init+0x92>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	2bff      	cmp	r3, #255	; 0xff
 80014b2:	d807      	bhi.n	80014c4 <LL_GPIO_Init+0x84>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	695a      	ldr	r2, [r3, #20]
 80014b8:	68b9      	ldr	r1, [r7, #8]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	0018      	movs	r0, r3
 80014be:	f7ff ff6f 	bl	80013a0 <LL_GPIO_SetAFPin_0_7>
 80014c2:	e006      	b.n	80014d2 <LL_GPIO_Init+0x92>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	695a      	ldr	r2, [r3, #20]
 80014c8:	68b9      	ldr	r1, [r7, #8]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	0018      	movs	r0, r3
 80014ce:	f7ff ff8a 	bl	80013e6 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	68b9      	ldr	r1, [r7, #8]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	0018      	movs	r0, r3
 80014dc:	f7ff fef7 	bl	80012ce <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	3301      	adds	r3, #1
 80014e4:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	40da      	lsrs	r2, r3
 80014ee:	1e13      	subs	r3, r2, #0
 80014f0:	d1b0      	bne.n	8001454 <LL_GPIO_Init+0x14>
  }


  return (SUCCESS);
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	0018      	movs	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	b004      	add	sp, #16
 80014fa:	bd80      	pop	{r7, pc}

080014fc <LL_RCC_HSI_IsReady>:
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <LL_RCC_HSI_IsReady+0x1c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2204      	movs	r2, #4
 8001506:	4013      	ands	r3, r2
 8001508:	2b04      	cmp	r3, #4
 800150a:	d101      	bne.n	8001510 <LL_RCC_HSI_IsReady+0x14>
 800150c:	2301      	movs	r3, #1
 800150e:	e000      	b.n	8001512 <LL_RCC_HSI_IsReady+0x16>
 8001510:	2300      	movs	r3, #0
}
 8001512:	0018      	movs	r0, r3
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40021000 	.word	0x40021000

0800151c <LL_RCC_LSE_IsReady>:
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 8001520:	4b07      	ldr	r3, [pc, #28]	; (8001540 <LL_RCC_LSE_IsReady+0x24>)
 8001522:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001524:	2380      	movs	r3, #128	; 0x80
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	401a      	ands	r2, r3
 800152a:	2380      	movs	r3, #128	; 0x80
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	429a      	cmp	r2, r3
 8001530:	d101      	bne.n	8001536 <LL_RCC_LSE_IsReady+0x1a>
 8001532:	2301      	movs	r3, #1
 8001534:	e000      	b.n	8001538 <LL_RCC_LSE_IsReady+0x1c>
 8001536:	2300      	movs	r3, #0
}
 8001538:	0018      	movs	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	40021000 	.word	0x40021000

08001544 <LL_RCC_MSI_GetRange>:
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <LL_RCC_MSI_GetRange+0x14>)
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	23e0      	movs	r3, #224	; 0xe0
 800154e:	021b      	lsls	r3, r3, #8
 8001550:	4013      	ands	r3, r2
}
 8001552:	0018      	movs	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40021000 	.word	0x40021000

0800155c <LL_RCC_GetSysClkSource>:
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001560:	4b03      	ldr	r3, [pc, #12]	; (8001570 <LL_RCC_GetSysClkSource+0x14>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	220c      	movs	r2, #12
 8001566:	4013      	ands	r3, r2
}
 8001568:	0018      	movs	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	40021000 	.word	0x40021000

08001574 <LL_RCC_GetAHBPrescaler>:
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001578:	4b03      	ldr	r3, [pc, #12]	; (8001588 <LL_RCC_GetAHBPrescaler+0x14>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	22f0      	movs	r2, #240	; 0xf0
 800157e:	4013      	ands	r3, r2
}
 8001580:	0018      	movs	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	40021000 	.word	0x40021000

0800158c <LL_RCC_GetAPB1Prescaler>:
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001590:	4b03      	ldr	r3, [pc, #12]	; (80015a0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001592:	68da      	ldr	r2, [r3, #12]
 8001594:	23e0      	movs	r3, #224	; 0xe0
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	4013      	ands	r3, r2
}
 800159a:	0018      	movs	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40021000 	.word	0x40021000

080015a4 <LL_RCC_GetAPB2Prescaler>:
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80015a8:	4b03      	ldr	r3, [pc, #12]	; (80015b8 <LL_RCC_GetAPB2Prescaler+0x14>)
 80015aa:	68da      	ldr	r2, [r3, #12]
 80015ac:	23e0      	movs	r3, #224	; 0xe0
 80015ae:	019b      	lsls	r3, r3, #6
 80015b0:	4013      	ands	r3, r2
}
 80015b2:	0018      	movs	r0, r3
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40021000 	.word	0x40021000

080015bc <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART2_CLKSOURCE_LSE
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80015c4:	4b05      	ldr	r3, [pc, #20]	; (80015dc <LL_RCC_GetUSARTClockSource+0x20>)
 80015c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	401a      	ands	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	041b      	lsls	r3, r3, #16
 80015d0:	4313      	orrs	r3, r2
}
 80015d2:	0018      	movs	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	b002      	add	sp, #8
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	40021000 	.word	0x40021000

080015e0 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80015e4:	4b03      	ldr	r3, [pc, #12]	; (80015f4 <LL_RCC_PLL_GetMainSource+0x14>)
 80015e6:	68da      	ldr	r2, [r3, #12]
 80015e8:	2380      	movs	r3, #128	; 0x80
 80015ea:	025b      	lsls	r3, r3, #9
 80015ec:	4013      	ands	r3, r2
}
 80015ee:	0018      	movs	r0, r3
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40021000 	.word	0x40021000

080015f8 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_24
  *         @arg @ref LL_RCC_PLL_MUL_32
  *         @arg @ref LL_RCC_PLL_MUL_48
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 80015fc:	4b03      	ldr	r3, [pc, #12]	; (800160c <LL_RCC_PLL_GetMultiplicator+0x14>)
 80015fe:	68da      	ldr	r2, [r3, #12]
 8001600:	23f0      	movs	r3, #240	; 0xf0
 8001602:	039b      	lsls	r3, r3, #14
 8001604:	4013      	ands	r3, r2
}
 8001606:	0018      	movs	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40021000 	.word	0x40021000

08001610 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLL_DIV_2
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 8001614:	4b03      	ldr	r3, [pc, #12]	; (8001624 <LL_RCC_PLL_GetDivider+0x14>)
 8001616:	68da      	ldr	r2, [r3, #12]
 8001618:	23c0      	movs	r3, #192	; 0xc0
 800161a:	041b      	lsls	r3, r3, #16
 800161c:	4013      	ands	r3, r2
}
 800161e:	0018      	movs	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40021000 	.word	0x40021000

08001628 <LL_RCC_IsActiveFlag_HSIDIV>:
  * @brief  Check if HSI Divider is enabled (it divides by 4)
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 800162c:	4b05      	ldr	r3, [pc, #20]	; (8001644 <LL_RCC_IsActiveFlag_HSIDIV+0x1c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2210      	movs	r2, #16
 8001632:	4013      	ands	r3, r2
 8001634:	2b10      	cmp	r3, #16
 8001636:	d101      	bne.n	800163c <LL_RCC_IsActiveFlag_HSIDIV+0x14>
 8001638:	2301      	movs	r3, #1
 800163a:	e000      	b.n	800163e <LL_RCC_IsActiveFlag_HSIDIV+0x16>
 800163c:	2300      	movs	r3, #0
}
 800163e:	0018      	movs	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40021000 	.word	0x40021000

08001648 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CCIPR_USART1SEL)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b03      	cmp	r3, #3
 8001658:	d139      	bne.n	80016ce <LL_RCC_GetUSARTClockFreq+0x86>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	0018      	movs	r0, r3
 800165e:	f7ff ffad 	bl	80015bc <LL_RCC_GetUSARTClockSource>
 8001662:	0003      	movs	r3, r0
 8001664:	4a40      	ldr	r2, [pc, #256]	; (8001768 <LL_RCC_GetUSARTClockFreq+0x120>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d01c      	beq.n	80016a4 <LL_RCC_GetUSARTClockFreq+0x5c>
 800166a:	4a3f      	ldr	r2, [pc, #252]	; (8001768 <LL_RCC_GetUSARTClockFreq+0x120>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d821      	bhi.n	80016b4 <LL_RCC_GetUSARTClockFreq+0x6c>
 8001670:	4a3e      	ldr	r2, [pc, #248]	; (800176c <LL_RCC_GetUSARTClockFreq+0x124>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d003      	beq.n	800167e <LL_RCC_GetUSARTClockFreq+0x36>
 8001676:	4a3e      	ldr	r2, [pc, #248]	; (8001770 <LL_RCC_GetUSARTClockFreq+0x128>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d005      	beq.n	8001688 <LL_RCC_GetUSARTClockFreq+0x40>
 800167c:	e01a      	b.n	80016b4 <LL_RCC_GetUSARTClockFreq+0x6c>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800167e:	f000 f883 	bl	8001788 <RCC_GetSystemClockFreq>
 8001682:	0003      	movs	r3, r0
 8001684:	60fb      	str	r3, [r7, #12]
        break;
 8001686:	e027      	b.n	80016d8 <LL_RCC_GetUSARTClockFreq+0x90>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001688:	f7ff ff38 	bl	80014fc <LL_RCC_HSI_IsReady>
 800168c:	1e03      	subs	r3, r0, #0
 800168e:	d020      	beq.n	80016d2 <LL_RCC_GetUSARTClockFreq+0x8a>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8001690:	f7ff ffca 	bl	8001628 <LL_RCC_IsActiveFlag_HSIDIV>
 8001694:	1e03      	subs	r3, r0, #0
 8001696:	d002      	beq.n	800169e <LL_RCC_GetUSARTClockFreq+0x56>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 8001698:	4b36      	ldr	r3, [pc, #216]	; (8001774 <LL_RCC_GetUSARTClockFreq+0x12c>)
 800169a:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 800169c:	e019      	b.n	80016d2 <LL_RCC_GetUSARTClockFreq+0x8a>
            usart_frequency = HSI_VALUE;
 800169e:	4b36      	ldr	r3, [pc, #216]	; (8001778 <LL_RCC_GetUSARTClockFreq+0x130>)
 80016a0:	60fb      	str	r3, [r7, #12]
        break;
 80016a2:	e016      	b.n	80016d2 <LL_RCC_GetUSARTClockFreq+0x8a>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80016a4:	f7ff ff3a 	bl	800151c <LL_RCC_LSE_IsReady>
 80016a8:	1e03      	subs	r3, r0, #0
 80016aa:	d014      	beq.n	80016d6 <LL_RCC_GetUSARTClockFreq+0x8e>
        {
          usart_frequency = LSE_VALUE;
 80016ac:	2380      	movs	r3, #128	; 0x80
 80016ae:	021b      	lsls	r3, r3, #8
 80016b0:	60fb      	str	r3, [r7, #12]
        }
        break;
 80016b2:	e010      	b.n	80016d6 <LL_RCC_GetUSARTClockFreq+0x8e>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80016b4:	f000 f868 	bl	8001788 <RCC_GetSystemClockFreq>
 80016b8:	0003      	movs	r3, r0
 80016ba:	0018      	movs	r0, r3
 80016bc:	f000 f8a8 	bl	8001810 <RCC_GetHCLKClockFreq>
 80016c0:	0003      	movs	r3, r0
 80016c2:	0018      	movs	r0, r3
 80016c4:	f000 f8ce 	bl	8001864 <RCC_GetPCLK2ClockFreq>
 80016c8:	0003      	movs	r3, r0
 80016ca:	60fb      	str	r3, [r7, #12]
        break;
 80016cc:	e004      	b.n	80016d8 <LL_RCC_GetUSARTClockFreq+0x90>
    }
  }
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	e002      	b.n	80016d8 <LL_RCC_GetUSARTClockFreq+0x90>
        break;
 80016d2:	46c0      	nop			; (mov r8, r8)
 80016d4:	e000      	b.n	80016d8 <LL_RCC_GetUSARTClockFreq+0x90>
        break;
 80016d6:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART1SEL  */

#if defined(RCC_CCIPR_USART2SEL)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b0c      	cmp	r3, #12
 80016dc:	d139      	bne.n	8001752 <LL_RCC_GetUSARTClockFreq+0x10a>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	0018      	movs	r0, r3
 80016e2:	f7ff ff6b 	bl	80015bc <LL_RCC_GetUSARTClockSource>
 80016e6:	0003      	movs	r3, r0
 80016e8:	4a24      	ldr	r2, [pc, #144]	; (800177c <LL_RCC_GetUSARTClockFreq+0x134>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d01c      	beq.n	8001728 <LL_RCC_GetUSARTClockFreq+0xe0>
 80016ee:	4a23      	ldr	r2, [pc, #140]	; (800177c <LL_RCC_GetUSARTClockFreq+0x134>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d821      	bhi.n	8001738 <LL_RCC_GetUSARTClockFreq+0xf0>
 80016f4:	4a22      	ldr	r2, [pc, #136]	; (8001780 <LL_RCC_GetUSARTClockFreq+0x138>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d003      	beq.n	8001702 <LL_RCC_GetUSARTClockFreq+0xba>
 80016fa:	4a22      	ldr	r2, [pc, #136]	; (8001784 <LL_RCC_GetUSARTClockFreq+0x13c>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d005      	beq.n	800170c <LL_RCC_GetUSARTClockFreq+0xc4>
 8001700:	e01a      	b.n	8001738 <LL_RCC_GetUSARTClockFreq+0xf0>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001702:	f000 f841 	bl	8001788 <RCC_GetSystemClockFreq>
 8001706:	0003      	movs	r3, r0
 8001708:	60fb      	str	r3, [r7, #12]
        break;
 800170a:	e027      	b.n	800175c <LL_RCC_GetUSARTClockFreq+0x114>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800170c:	f7ff fef6 	bl	80014fc <LL_RCC_HSI_IsReady>
 8001710:	1e03      	subs	r3, r0, #0
 8001712:	d020      	beq.n	8001756 <LL_RCC_GetUSARTClockFreq+0x10e>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8001714:	f7ff ff88 	bl	8001628 <LL_RCC_IsActiveFlag_HSIDIV>
 8001718:	1e03      	subs	r3, r0, #0
 800171a:	d002      	beq.n	8001722 <LL_RCC_GetUSARTClockFreq+0xda>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 800171c:	4b15      	ldr	r3, [pc, #84]	; (8001774 <LL_RCC_GetUSARTClockFreq+0x12c>)
 800171e:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 8001720:	e019      	b.n	8001756 <LL_RCC_GetUSARTClockFreq+0x10e>
            usart_frequency = HSI_VALUE;
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <LL_RCC_GetUSARTClockFreq+0x130>)
 8001724:	60fb      	str	r3, [r7, #12]
        break;
 8001726:	e016      	b.n	8001756 <LL_RCC_GetUSARTClockFreq+0x10e>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001728:	f7ff fef8 	bl	800151c <LL_RCC_LSE_IsReady>
 800172c:	1e03      	subs	r3, r0, #0
 800172e:	d014      	beq.n	800175a <LL_RCC_GetUSARTClockFreq+0x112>
        {
          usart_frequency = LSE_VALUE;
 8001730:	2380      	movs	r3, #128	; 0x80
 8001732:	021b      	lsls	r3, r3, #8
 8001734:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001736:	e010      	b.n	800175a <LL_RCC_GetUSARTClockFreq+0x112>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001738:	f000 f826 	bl	8001788 <RCC_GetSystemClockFreq>
 800173c:	0003      	movs	r3, r0
 800173e:	0018      	movs	r0, r3
 8001740:	f000 f866 	bl	8001810 <RCC_GetHCLKClockFreq>
 8001744:	0003      	movs	r3, r0
 8001746:	0018      	movs	r0, r3
 8001748:	f000 f878 	bl	800183c <RCC_GetPCLK1ClockFreq>
 800174c:	0003      	movs	r3, r0
 800174e:	60fb      	str	r3, [r7, #12]
        break;
 8001750:	e004      	b.n	800175c <LL_RCC_GetUSARTClockFreq+0x114>
    }
  }
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	e002      	b.n	800175c <LL_RCC_GetUSARTClockFreq+0x114>
        break;
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	e000      	b.n	800175c <LL_RCC_GetUSARTClockFreq+0x114>
        break;
 800175a:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART2SEL */

  return usart_frequency;
 800175c:	68fb      	ldr	r3, [r7, #12]
}
 800175e:	0018      	movs	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	b004      	add	sp, #16
 8001764:	bd80      	pop	{r7, pc}
 8001766:	46c0      	nop			; (mov r8, r8)
 8001768:	00030003 	.word	0x00030003
 800176c:	00030001 	.word	0x00030001
 8001770:	00030002 	.word	0x00030002
 8001774:	003d0900 	.word	0x003d0900
 8001778:	00f42400 	.word	0x00f42400
 800177c:	000c000c 	.word	0x000c000c
 8001780:	000c0004 	.word	0x000c0004
 8001784:	000c0008 	.word	0x000c0008

08001788 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800178e:	f7ff fee5 	bl	800155c <LL_RCC_GetSysClkSource>
 8001792:	0003      	movs	r3, r0
 8001794:	2b0c      	cmp	r3, #12
 8001796:	d020      	beq.n	80017da <RCC_GetSystemClockFreq+0x52>
 8001798:	d824      	bhi.n	80017e4 <RCC_GetSystemClockFreq+0x5c>
 800179a:	2b08      	cmp	r3, #8
 800179c:	d01a      	beq.n	80017d4 <RCC_GetSystemClockFreq+0x4c>
 800179e:	d821      	bhi.n	80017e4 <RCC_GetSystemClockFreq+0x5c>
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d002      	beq.n	80017aa <RCC_GetSystemClockFreq+0x22>
 80017a4:	2b04      	cmp	r3, #4
 80017a6:	d00b      	beq.n	80017c0 <RCC_GetSystemClockFreq+0x38>
 80017a8:	e01c      	b.n	80017e4 <RCC_GetSystemClockFreq+0x5c>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80017aa:	f7ff fecb 	bl	8001544 <LL_RCC_MSI_GetRange>
 80017ae:	0003      	movs	r3, r0
 80017b0:	0b5b      	lsrs	r3, r3, #13
 80017b2:	3301      	adds	r3, #1
 80017b4:	2280      	movs	r2, #128	; 0x80
 80017b6:	0212      	lsls	r2, r2, #8
 80017b8:	409a      	lsls	r2, r3
 80017ba:	0013      	movs	r3, r2
 80017bc:	607b      	str	r3, [r7, #4]
      break;
 80017be:	e01c      	b.n	80017fa <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 80017c0:	f7ff ff32 	bl	8001628 <LL_RCC_IsActiveFlag_HSIDIV>
 80017c4:	1e03      	subs	r3, r0, #0
 80017c6:	d002      	beq.n	80017ce <RCC_GetSystemClockFreq+0x46>
      {
        frequency = (HSI_VALUE >> 2U);
 80017c8:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <RCC_GetSystemClockFreq+0x7c>)
 80017ca:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSI_VALUE;
      }
      break;
 80017cc:	e015      	b.n	80017fa <RCC_GetSystemClockFreq+0x72>
        frequency = HSI_VALUE;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <RCC_GetSystemClockFreq+0x80>)
 80017d0:	607b      	str	r3, [r7, #4]
      break;
 80017d2:	e012      	b.n	80017fa <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock source */
      frequency = HSE_VALUE;
 80017d4:	4b0d      	ldr	r3, [pc, #52]	; (800180c <RCC_GetSystemClockFreq+0x84>)
 80017d6:	607b      	str	r3, [r7, #4]
      break;
 80017d8:	e00f      	b.n	80017fa <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80017da:	f000 f857 	bl	800188c <RCC_PLL_GetFreqDomain_SYS>
 80017de:	0003      	movs	r3, r0
 80017e0:	607b      	str	r3, [r7, #4]
      break;
 80017e2:	e00a      	b.n	80017fa <RCC_GetSystemClockFreq+0x72>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80017e4:	f7ff feae 	bl	8001544 <LL_RCC_MSI_GetRange>
 80017e8:	0003      	movs	r3, r0
 80017ea:	0b5b      	lsrs	r3, r3, #13
 80017ec:	3301      	adds	r3, #1
 80017ee:	2280      	movs	r2, #128	; 0x80
 80017f0:	0212      	lsls	r2, r2, #8
 80017f2:	409a      	lsls	r2, r3
 80017f4:	0013      	movs	r3, r2
 80017f6:	607b      	str	r3, [r7, #4]
      break;
 80017f8:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 80017fa:	687b      	ldr	r3, [r7, #4]
}
 80017fc:	0018      	movs	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	b002      	add	sp, #8
 8001802:	bd80      	pop	{r7, pc}
 8001804:	003d0900 	.word	0x003d0900
 8001808:	00f42400 	.word	0x00f42400
 800180c:	007a1200 	.word	0x007a1200

08001810 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001818:	f7ff feac 	bl	8001574 <LL_RCC_GetAHBPrescaler>
 800181c:	0003      	movs	r3, r0
 800181e:	091b      	lsrs	r3, r3, #4
 8001820:	220f      	movs	r2, #15
 8001822:	4013      	ands	r3, r2
 8001824:	4a04      	ldr	r2, [pc, #16]	; (8001838 <RCC_GetHCLKClockFreq+0x28>)
 8001826:	5cd3      	ldrb	r3, [r2, r3]
 8001828:	001a      	movs	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	40d3      	lsrs	r3, r2
}
 800182e:	0018      	movs	r0, r3
 8001830:	46bd      	mov	sp, r7
 8001832:	b002      	add	sp, #8
 8001834:	bd80      	pop	{r7, pc}
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	08001bfc 	.word	0x08001bfc

0800183c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001844:	f7ff fea2 	bl	800158c <LL_RCC_GetAPB1Prescaler>
 8001848:	0003      	movs	r3, r0
 800184a:	0a1b      	lsrs	r3, r3, #8
 800184c:	4a04      	ldr	r2, [pc, #16]	; (8001860 <RCC_GetPCLK1ClockFreq+0x24>)
 800184e:	5cd3      	ldrb	r3, [r2, r3]
 8001850:	001a      	movs	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	40d3      	lsrs	r3, r2
}
 8001856:	0018      	movs	r0, r3
 8001858:	46bd      	mov	sp, r7
 800185a:	b002      	add	sp, #8
 800185c:	bd80      	pop	{r7, pc}
 800185e:	46c0      	nop			; (mov r8, r8)
 8001860:	08001c0c 	.word	0x08001c0c

08001864 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800186c:	f7ff fe9a 	bl	80015a4 <LL_RCC_GetAPB2Prescaler>
 8001870:	0003      	movs	r3, r0
 8001872:	0adb      	lsrs	r3, r3, #11
 8001874:	4a04      	ldr	r2, [pc, #16]	; (8001888 <RCC_GetPCLK2ClockFreq+0x24>)
 8001876:	5cd3      	ldrb	r3, [r2, r3]
 8001878:	001a      	movs	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	40d3      	lsrs	r3, r2
}
 800187e:	0018      	movs	r0, r3
 8001880:	46bd      	mov	sp, r7
 8001882:	b002      	add	sp, #8
 8001884:	bd80      	pop	{r7, pc}
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	08001c0c 	.word	0x08001c0c

0800188c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800188c:	b590      	push	{r4, r7, lr}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001892:	f7ff fea5 	bl	80015e0 <LL_RCC_PLL_GetMainSource>
 8001896:	0003      	movs	r3, r0
 8001898:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d109      	bne.n	80018b4 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 80018a0:	f7ff fec2 	bl	8001628 <LL_RCC_IsActiveFlag_HSIDIV>
 80018a4:	1e03      	subs	r3, r0, #0
 80018a6:	d002      	beq.n	80018ae <RCC_PLL_GetFreqDomain_SYS+0x22>
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 80018a8:	4b10      	ldr	r3, [pc, #64]	; (80018ec <RCC_PLL_GetFreqDomain_SYS+0x60>)
 80018aa:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSI_VALUE;
      }
      break;
 80018ac:	e005      	b.n	80018ba <RCC_PLL_GetFreqDomain_SYS+0x2e>
        pllinputfreq = HSI_VALUE;
 80018ae:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 80018b0:	607b      	str	r3, [r7, #4]
      break;
 80018b2:	e002      	b.n	80018ba <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80018b4:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 80018b6:	607b      	str	r3, [r7, #4]
      break;
 80018b8:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 80018ba:	f7ff fe9d 	bl	80015f8 <LL_RCC_PLL_GetMultiplicator>
 80018be:	0003      	movs	r3, r0
 80018c0:	0c9b      	lsrs	r3, r3, #18
 80018c2:	4a0d      	ldr	r2, [pc, #52]	; (80018f8 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 80018c4:	5cd3      	ldrb	r3, [r2, r3]
 80018c6:	001a      	movs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4353      	muls	r3, r2
 80018cc:	001c      	movs	r4, r3
 80018ce:	f7ff fe9f 	bl	8001610 <LL_RCC_PLL_GetDivider>
 80018d2:	0003      	movs	r3, r0
 80018d4:	0d9b      	lsrs	r3, r3, #22
 80018d6:	3301      	adds	r3, #1
 80018d8:	0019      	movs	r1, r3
 80018da:	0020      	movs	r0, r4
 80018dc:	f7fe fc14 	bl	8000108 <__udivsi3>
 80018e0:	0003      	movs	r3, r0
}
 80018e2:	0018      	movs	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	b003      	add	sp, #12
 80018e8:	bd90      	pop	{r4, r7, pc}
 80018ea:	46c0      	nop			; (mov r8, r8)
 80018ec:	003d0900 	.word	0x003d0900
 80018f0:	00f42400 	.word	0x00f42400
 80018f4:	007a1200 	.word	0x007a1200
 80018f8:	08001c14 	.word	0x08001c14

080018fc <LL_USART_IsEnabled>:
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2201      	movs	r2, #1
 800190a:	4013      	ands	r3, r2
 800190c:	2b01      	cmp	r3, #1
 800190e:	d101      	bne.n	8001914 <LL_USART_IsEnabled+0x18>
 8001910:	2301      	movs	r3, #1
 8001912:	e000      	b.n	8001916 <LL_USART_IsEnabled+0x1a>
 8001914:	2300      	movs	r3, #0
}
 8001916:	0018      	movs	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	b002      	add	sp, #8
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <LL_USART_SetStopBitsLength>:
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	4a05      	ldr	r2, [pc, #20]	; (8001944 <LL_USART_SetStopBitsLength+0x24>)
 8001930:	401a      	ands	r2, r3
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	431a      	orrs	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	605a      	str	r2, [r3, #4]
}
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	46bd      	mov	sp, r7
 800193e:	b002      	add	sp, #8
 8001940:	bd80      	pop	{r7, pc}
 8001942:	46c0      	nop			; (mov r8, r8)
 8001944:	ffffcfff 	.word	0xffffcfff

08001948 <LL_USART_SetHWFlowCtrl>:
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	4a05      	ldr	r2, [pc, #20]	; (800196c <LL_USART_SetHWFlowCtrl+0x24>)
 8001958:	401a      	ands	r2, r3
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	431a      	orrs	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	609a      	str	r2, [r3, #8]
}
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	46bd      	mov	sp, r7
 8001966:	b002      	add	sp, #8
 8001968:	bd80      	pop	{r7, pc}
 800196a:	46c0      	nop			; (mov r8, r8)
 800196c:	fffffcff 	.word	0xfffffcff

08001970 <LL_USART_SetBaudRate>:
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
 800197c:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	2380      	movs	r3, #128	; 0x80
 8001982:	021b      	lsls	r3, r3, #8
 8001984:	429a      	cmp	r2, r3
 8001986:	d11c      	bne.n	80019c2 <LL_USART_SetBaudRate+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	005a      	lsls	r2, r3, #1
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	085b      	lsrs	r3, r3, #1
 8001990:	18d3      	adds	r3, r2, r3
 8001992:	6839      	ldr	r1, [r7, #0]
 8001994:	0018      	movs	r0, r3
 8001996:	f7fe fbb7 	bl	8000108 <__udivsi3>
 800199a:	0003      	movs	r3, r0
 800199c:	b29b      	uxth	r3, r3
 800199e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	4a10      	ldr	r2, [pc, #64]	; (80019e4 <LL_USART_SetBaudRate+0x74>)
 80019a4:	4013      	ands	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	085b      	lsrs	r3, r3, #1
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	001a      	movs	r2, r3
 80019b0:	2307      	movs	r3, #7
 80019b2:	4013      	ands	r3, r2
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	60da      	str	r2, [r3, #12]
}
 80019c0:	e00c      	b.n	80019dc <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	085a      	lsrs	r2, r3, #1
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	18d3      	adds	r3, r2, r3
 80019ca:	6839      	ldr	r1, [r7, #0]
 80019cc:	0018      	movs	r0, r3
 80019ce:	f7fe fb9b 	bl	8000108 <__udivsi3>
 80019d2:	0003      	movs	r3, r0
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	001a      	movs	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	60da      	str	r2, [r3, #12]
}
 80019dc:	46c0      	nop			; (mov r8, r8)
 80019de:	46bd      	mov	sp, r7
 80019e0:	b006      	add	sp, #24
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	0000fff0 	.word	0x0000fff0

080019e8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80019f2:	230f      	movs	r3, #15
 80019f4:	18fb      	adds	r3, r7, r3
 80019f6:	2201      	movs	r2, #1
 80019f8:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80019fa:	2300      	movs	r3, #0
 80019fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	0018      	movs	r0, r3
 8001a02:	f7ff ff7b 	bl	80018fc <LL_USART_IsEnabled>
 8001a06:	1e03      	subs	r3, r0, #0
 8001a08:	d145      	bne.n	8001a96 <LL_USART_Init+0xae>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a25      	ldr	r2, [pc, #148]	; (8001aa4 <LL_USART_Init+0xbc>)
 8001a10:	401a      	ands	r2, r3
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	6859      	ldr	r1, [r3, #4]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	4319      	orrs	r1, r3
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	4319      	orrs	r1, r3
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	430b      	orrs	r3, r1
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	0011      	movs	r1, r2
 8001a36:	0018      	movs	r0, r3
 8001a38:	f7ff ff72 	bl	8001920 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	695a      	ldr	r2, [r3, #20]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	0011      	movs	r1, r2
 8001a44:	0018      	movs	r0, r3
 8001a46:	f7ff ff7f 	bl	8001948 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
#if defined(USART1)
    if (USARTx == USART1)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a16      	ldr	r2, [pc, #88]	; (8001aa8 <LL_USART_Init+0xc0>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d105      	bne.n	8001a5e <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8001a52:	2003      	movs	r0, #3
 8001a54:	f7ff fdf8 	bl	8001648 <LL_RCC_GetUSARTClockFreq>
 8001a58:	0003      	movs	r3, r0
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	e008      	b.n	8001a70 <LL_USART_Init+0x88>
    }
#endif /* USART1 */
#if defined(USART1)
    else if (USARTx == USART2)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a12      	ldr	r2, [pc, #72]	; (8001aac <LL_USART_Init+0xc4>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d104      	bne.n	8001a70 <LL_USART_Init+0x88>
#else
    if (USARTx == USART2)
#endif /* USART1 */
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8001a66:	200c      	movs	r0, #12
 8001a68:	f7ff fdee 	bl	8001648 <LL_RCC_GetUSARTClockFreq>
 8001a6c:	0003      	movs	r3, r0
 8001a6e:	60bb      	str	r3, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d00f      	beq.n	8001a96 <LL_USART_Init+0xae>
        && (USART_InitStruct->BaudRate != 0U))
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d00b      	beq.n	8001a96 <LL_USART_Init+0xae>
    {
      status = SUCCESS;
 8001a7e:	230f      	movs	r3, #15
 8001a80:	18fb      	adds	r3, r7, r3
 8001a82:	2200      	movs	r2, #0
 8001a84:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	699a      	ldr	r2, [r3, #24]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68b9      	ldr	r1, [r7, #8]
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff ff6d 	bl	8001970 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001a96:	230f      	movs	r3, #15
 8001a98:	18fb      	adds	r3, r7, r3
 8001a9a:	781b      	ldrb	r3, [r3, #0]
}
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	b004      	add	sp, #16
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	efff69f3 	.word	0xefff69f3
 8001aa8:	40013800 	.word	0x40013800
 8001aac:	40004400 	.word	0x40004400

08001ab0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001aba:	6839      	ldr	r1, [r7, #0]
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7fe fb23 	bl	8000108 <__udivsi3>
 8001ac2:	0003      	movs	r3, r0
 8001ac4:	001a      	movs	r2, r3
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <LL_InitTick+0x30>)
 8001ac8:	3a01      	subs	r2, #1
 8001aca:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001acc:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <LL_InitTick+0x30>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ad2:	4b03      	ldr	r3, [pc, #12]	; (8001ae0 <LL_InitTick+0x30>)
 8001ad4:	2205      	movs	r2, #5
 8001ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001ad8:	46c0      	nop			; (mov r8, r8)
 8001ada:	46bd      	mov	sp, r7
 8001adc:	b002      	add	sp, #8
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	e000e010 	.word	0xe000e010

08001ae4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001aec:	23fa      	movs	r3, #250	; 0xfa
 8001aee:	009a      	lsls	r2, r3, #2
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	0011      	movs	r1, r2
 8001af4:	0018      	movs	r0, r3
 8001af6:	f7ff ffdb 	bl	8001ab0 <LL_InitTick>
}
 8001afa:	46c0      	nop			; (mov r8, r8)
 8001afc:	46bd      	mov	sp, r7
 8001afe:	b002      	add	sp, #8
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001b0c:	4b0d      	ldr	r3, [pc, #52]	; (8001b44 <LL_mDelay+0x40>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001b12:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3301      	adds	r3, #1
 8001b18:	d00c      	beq.n	8001b34 <LL_mDelay+0x30>
  {
    Delay++;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001b20:	e008      	b.n	8001b34 <LL_mDelay+0x30>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001b22:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <LL_mDelay+0x40>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	2380      	movs	r3, #128	; 0x80
 8001b28:	025b      	lsls	r3, r3, #9
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	d002      	beq.n	8001b34 <LL_mDelay+0x30>
    {
      Delay--;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	3b01      	subs	r3, #1
 8001b32:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f3      	bne.n	8001b22 <LL_mDelay+0x1e>
    }
  }
}
 8001b3a:	46c0      	nop			; (mov r8, r8)
 8001b3c:	46c0      	nop			; (mov r8, r8)
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	b004      	add	sp, #16
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	e000e010 	.word	0xe000e010

08001b48 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001b50:	4b03      	ldr	r3, [pc, #12]	; (8001b60 <LL_SetSystemCoreClock+0x18>)
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	601a      	str	r2, [r3, #0]
}
 8001b56:	46c0      	nop			; (mov r8, r8)
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	b002      	add	sp, #8
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	20000000 	.word	0x20000000

08001b64 <__libc_init_array>:
 8001b64:	b570      	push	{r4, r5, r6, lr}
 8001b66:	2600      	movs	r6, #0
 8001b68:	4d0c      	ldr	r5, [pc, #48]	; (8001b9c <__libc_init_array+0x38>)
 8001b6a:	4c0d      	ldr	r4, [pc, #52]	; (8001ba0 <__libc_init_array+0x3c>)
 8001b6c:	1b64      	subs	r4, r4, r5
 8001b6e:	10a4      	asrs	r4, r4, #2
 8001b70:	42a6      	cmp	r6, r4
 8001b72:	d109      	bne.n	8001b88 <__libc_init_array+0x24>
 8001b74:	2600      	movs	r6, #0
 8001b76:	f000 f821 	bl	8001bbc <_init>
 8001b7a:	4d0a      	ldr	r5, [pc, #40]	; (8001ba4 <__libc_init_array+0x40>)
 8001b7c:	4c0a      	ldr	r4, [pc, #40]	; (8001ba8 <__libc_init_array+0x44>)
 8001b7e:	1b64      	subs	r4, r4, r5
 8001b80:	10a4      	asrs	r4, r4, #2
 8001b82:	42a6      	cmp	r6, r4
 8001b84:	d105      	bne.n	8001b92 <__libc_init_array+0x2e>
 8001b86:	bd70      	pop	{r4, r5, r6, pc}
 8001b88:	00b3      	lsls	r3, r6, #2
 8001b8a:	58eb      	ldr	r3, [r5, r3]
 8001b8c:	4798      	blx	r3
 8001b8e:	3601      	adds	r6, #1
 8001b90:	e7ee      	b.n	8001b70 <__libc_init_array+0xc>
 8001b92:	00b3      	lsls	r3, r6, #2
 8001b94:	58eb      	ldr	r3, [r5, r3]
 8001b96:	4798      	blx	r3
 8001b98:	3601      	adds	r6, #1
 8001b9a:	e7f2      	b.n	8001b82 <__libc_init_array+0x1e>
 8001b9c:	08001c20 	.word	0x08001c20
 8001ba0:	08001c20 	.word	0x08001c20
 8001ba4:	08001c20 	.word	0x08001c20
 8001ba8:	08001c24 	.word	0x08001c24

08001bac <memset>:
 8001bac:	0003      	movs	r3, r0
 8001bae:	1882      	adds	r2, r0, r2
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d100      	bne.n	8001bb6 <memset+0xa>
 8001bb4:	4770      	bx	lr
 8001bb6:	7019      	strb	r1, [r3, #0]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	e7f9      	b.n	8001bb0 <memset+0x4>

08001bbc <_init>:
 8001bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bc2:	bc08      	pop	{r3}
 8001bc4:	469e      	mov	lr, r3
 8001bc6:	4770      	bx	lr

08001bc8 <_fini>:
 8001bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bca:	46c0      	nop			; (mov r8, r8)
 8001bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bce:	bc08      	pop	{r3}
 8001bd0:	469e      	mov	lr, r3
 8001bd2:	4770      	bx	lr
