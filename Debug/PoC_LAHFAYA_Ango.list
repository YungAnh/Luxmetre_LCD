
PoC_LAHFAYA_Ango.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021f0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080022b0  080022b0  000122b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022cc  080022cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080022cc  080022cc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022cc  080022cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022cc  080022cc  000122cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022d0  080022d0  000122d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080022d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000000c  080022e0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  080022e0  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000494d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000010df  00000000  00000000  00024981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004c0  00000000  00000000  00025a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000428  00000000  00000000  00025f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012935  00000000  00000000  00026348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005c85  00000000  00000000  00038c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00073957  00000000  00000000  0003e902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b2259  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f70  00000000  00000000  000b22ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002298 	.word	0x08002298

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002298 	.word	0x08002298

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000226:	1dfb      	adds	r3, r7, #7
 8000228:	2200      	movs	r2, #0
 800022a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800022c:	4b0b      	ldr	r3, [pc, #44]	; (800025c <HAL_Init+0x3c>)
 800022e:	681a      	ldr	r2, [r3, #0]
 8000230:	4b0a      	ldr	r3, [pc, #40]	; (800025c <HAL_Init+0x3c>)
 8000232:	2140      	movs	r1, #64	; 0x40
 8000234:	430a      	orrs	r2, r1
 8000236:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000238:	2000      	movs	r0, #0
 800023a:	f000 f811 	bl	8000260 <HAL_InitTick>
 800023e:	1e03      	subs	r3, r0, #0
 8000240:	d003      	beq.n	800024a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000242:	1dfb      	adds	r3, r7, #7
 8000244:	2201      	movs	r2, #1
 8000246:	701a      	strb	r2, [r3, #0]
 8000248:	e001      	b.n	800024e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800024a:	f001 ff25 	bl	8002098 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800024e:	1dfb      	adds	r3, r7, #7
 8000250:	781b      	ldrb	r3, [r3, #0]
}
 8000252:	0018      	movs	r0, r3
 8000254:	46bd      	mov	sp, r7
 8000256:	b002      	add	sp, #8
 8000258:	bd80      	pop	{r7, pc}
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	40022000 	.word	0x40022000

08000260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000260:	b590      	push	{r4, r7, lr}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000268:	4b14      	ldr	r3, [pc, #80]	; (80002bc <HAL_InitTick+0x5c>)
 800026a:	681c      	ldr	r4, [r3, #0]
 800026c:	4b14      	ldr	r3, [pc, #80]	; (80002c0 <HAL_InitTick+0x60>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	0019      	movs	r1, r3
 8000272:	23fa      	movs	r3, #250	; 0xfa
 8000274:	0098      	lsls	r0, r3, #2
 8000276:	f7ff ff47 	bl	8000108 <__udivsi3>
 800027a:	0003      	movs	r3, r0
 800027c:	0019      	movs	r1, r3
 800027e:	0020      	movs	r0, r4
 8000280:	f7ff ff42 	bl	8000108 <__udivsi3>
 8000284:	0003      	movs	r3, r0
 8000286:	0018      	movs	r0, r3
 8000288:	f000 fc8f 	bl	8000baa <HAL_SYSTICK_Config>
 800028c:	1e03      	subs	r3, r0, #0
 800028e:	d001      	beq.n	8000294 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000290:	2301      	movs	r3, #1
 8000292:	e00f      	b.n	80002b4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	2b03      	cmp	r3, #3
 8000298:	d80b      	bhi.n	80002b2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800029a:	6879      	ldr	r1, [r7, #4]
 800029c:	2301      	movs	r3, #1
 800029e:	425b      	negs	r3, r3
 80002a0:	2200      	movs	r2, #0
 80002a2:	0018      	movs	r0, r3
 80002a4:	f000 fc6c 	bl	8000b80 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80002a8:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <HAL_InitTick+0x64>)
 80002aa:	687a      	ldr	r2, [r7, #4]
 80002ac:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80002ae:	2300      	movs	r3, #0
 80002b0:	e000      	b.n	80002b4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80002b2:	2301      	movs	r3, #1
}
 80002b4:	0018      	movs	r0, r3
 80002b6:	46bd      	mov	sp, r7
 80002b8:	b003      	add	sp, #12
 80002ba:	bd90      	pop	{r4, r7, pc}
 80002bc:	20000008 	.word	0x20000008
 80002c0:	20000004 	.word	0x20000004
 80002c4:	20000000 	.word	0x20000000

080002c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002cc:	4b05      	ldr	r3, [pc, #20]	; (80002e4 <HAL_IncTick+0x1c>)
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	001a      	movs	r2, r3
 80002d2:	4b05      	ldr	r3, [pc, #20]	; (80002e8 <HAL_IncTick+0x20>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	18d2      	adds	r2, r2, r3
 80002d8:	4b03      	ldr	r3, [pc, #12]	; (80002e8 <HAL_IncTick+0x20>)
 80002da:	601a      	str	r2, [r3, #0]
}
 80002dc:	46c0      	nop			; (mov r8, r8)
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	46c0      	nop			; (mov r8, r8)
 80002e4:	20000004 	.word	0x20000004
 80002e8:	20000028 	.word	0x20000028

080002ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  return uwTick;
 80002f0:	4b02      	ldr	r3, [pc, #8]	; (80002fc <HAL_GetTick+0x10>)
 80002f2:	681b      	ldr	r3, [r3, #0]
}
 80002f4:	0018      	movs	r0, r3
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)
 80002fc:	20000028 	.word	0x20000028

08000300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000308:	f7ff fff0 	bl	80002ec <HAL_GetTick>
 800030c:	0003      	movs	r3, r0
 800030e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	3301      	adds	r3, #1
 8000318:	d005      	beq.n	8000326 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800031a:	4b0a      	ldr	r3, [pc, #40]	; (8000344 <HAL_Delay+0x44>)
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	001a      	movs	r2, r3
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	189b      	adds	r3, r3, r2
 8000324:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000326:	46c0      	nop			; (mov r8, r8)
 8000328:	f7ff ffe0 	bl	80002ec <HAL_GetTick>
 800032c:	0002      	movs	r2, r0
 800032e:	68bb      	ldr	r3, [r7, #8]
 8000330:	1ad3      	subs	r3, r2, r3
 8000332:	68fa      	ldr	r2, [r7, #12]
 8000334:	429a      	cmp	r2, r3
 8000336:	d8f7      	bhi.n	8000328 <HAL_Delay+0x28>
  {
  }
}
 8000338:	46c0      	nop			; (mov r8, r8)
 800033a:	46c0      	nop			; (mov r8, r8)
 800033c:	46bd      	mov	sp, r7
 800033e:	b004      	add	sp, #16
 8000340:	bd80      	pop	{r7, pc}
 8000342:	46c0      	nop			; (mov r8, r8)
 8000344:	20000004 	.word	0x20000004

08000348 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d101      	bne.n	800035a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000356:	2301      	movs	r3, #1
 8000358:	e159      	b.n	800060e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800035e:	2b00      	cmp	r3, #0
 8000360:	d10a      	bne.n	8000378 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	2200      	movs	r2, #0
 8000366:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	2250      	movs	r2, #80	; 0x50
 800036c:	2100      	movs	r1, #0
 800036e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	0018      	movs	r0, r3
 8000374:	f001 fea4 	bl	80020c0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800037c:	2210      	movs	r2, #16
 800037e:	4013      	ands	r3, r2
 8000380:	2b10      	cmp	r3, #16
 8000382:	d005      	beq.n	8000390 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	689b      	ldr	r3, [r3, #8]
 800038a:	2204      	movs	r2, #4
 800038c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800038e:	d00b      	beq.n	80003a8 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000394:	2210      	movs	r2, #16
 8000396:	431a      	orrs	r2, r3
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	2250      	movs	r2, #80	; 0x50
 80003a0:	2100      	movs	r1, #0
 80003a2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80003a4:	2301      	movs	r3, #1
 80003a6:	e132      	b.n	800060e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80003ac:	4a9a      	ldr	r2, [pc, #616]	; (8000618 <HAL_ADC_Init+0x2d0>)
 80003ae:	4013      	ands	r3, r2
 80003b0:	2202      	movs	r2, #2
 80003b2:	431a      	orrs	r2, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	689b      	ldr	r3, [r3, #8]
 80003be:	2203      	movs	r2, #3
 80003c0:	4013      	ands	r3, r2
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d108      	bne.n	80003d8 <HAL_ADC_Init+0x90>
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	2201      	movs	r2, #1
 80003ce:	4013      	ands	r3, r2
 80003d0:	2b01      	cmp	r3, #1
 80003d2:	d101      	bne.n	80003d8 <HAL_ADC_Init+0x90>
 80003d4:	2301      	movs	r3, #1
 80003d6:	e000      	b.n	80003da <HAL_ADC_Init+0x92>
 80003d8:	2300      	movs	r3, #0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d149      	bne.n	8000472 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	685a      	ldr	r2, [r3, #4]
 80003e2:	23c0      	movs	r3, #192	; 0xc0
 80003e4:	061b      	lsls	r3, r3, #24
 80003e6:	429a      	cmp	r2, r3
 80003e8:	d00b      	beq.n	8000402 <HAL_ADC_Init+0xba>
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	685a      	ldr	r2, [r3, #4]
 80003ee:	2380      	movs	r3, #128	; 0x80
 80003f0:	05db      	lsls	r3, r3, #23
 80003f2:	429a      	cmp	r2, r3
 80003f4:	d005      	beq.n	8000402 <HAL_ADC_Init+0xba>
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	685a      	ldr	r2, [r3, #4]
 80003fa:	2380      	movs	r3, #128	; 0x80
 80003fc:	061b      	lsls	r3, r3, #24
 80003fe:	429a      	cmp	r2, r3
 8000400:	d111      	bne.n	8000426 <HAL_ADC_Init+0xde>
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	691a      	ldr	r2, [r3, #16]
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	0092      	lsls	r2, r2, #2
 800040e:	0892      	lsrs	r2, r2, #2
 8000410:	611a      	str	r2, [r3, #16]
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	6919      	ldr	r1, [r3, #16]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	685a      	ldr	r2, [r3, #4]
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	430a      	orrs	r2, r1
 8000422:	611a      	str	r2, [r3, #16]
 8000424:	e014      	b.n	8000450 <HAL_ADC_Init+0x108>
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	691a      	ldr	r2, [r3, #16]
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	0092      	lsls	r2, r2, #2
 8000432:	0892      	lsrs	r2, r2, #2
 8000434:	611a      	str	r2, [r3, #16]
 8000436:	4b79      	ldr	r3, [pc, #484]	; (800061c <HAL_ADC_Init+0x2d4>)
 8000438:	681a      	ldr	r2, [r3, #0]
 800043a:	4b78      	ldr	r3, [pc, #480]	; (800061c <HAL_ADC_Init+0x2d4>)
 800043c:	4978      	ldr	r1, [pc, #480]	; (8000620 <HAL_ADC_Init+0x2d8>)
 800043e:	400a      	ands	r2, r1
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	4b76      	ldr	r3, [pc, #472]	; (800061c <HAL_ADC_Init+0x2d4>)
 8000444:	6819      	ldr	r1, [r3, #0]
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	685a      	ldr	r2, [r3, #4]
 800044a:	4b74      	ldr	r3, [pc, #464]	; (800061c <HAL_ADC_Init+0x2d4>)
 800044c:	430a      	orrs	r2, r1
 800044e:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	68da      	ldr	r2, [r3, #12]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	2118      	movs	r1, #24
 800045c:	438a      	bics	r2, r1
 800045e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	68d9      	ldr	r1, [r3, #12]
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	689a      	ldr	r2, [r3, #8]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	430a      	orrs	r2, r1
 8000470:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000472:	4b6a      	ldr	r3, [pc, #424]	; (800061c <HAL_ADC_Init+0x2d4>)
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	4b69      	ldr	r3, [pc, #420]	; (800061c <HAL_ADC_Init+0x2d4>)
 8000478:	496a      	ldr	r1, [pc, #424]	; (8000624 <HAL_ADC_Init+0x2dc>)
 800047a:	400a      	ands	r2, r1
 800047c:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800047e:	4b67      	ldr	r3, [pc, #412]	; (800061c <HAL_ADC_Init+0x2d4>)
 8000480:	6819      	ldr	r1, [r3, #0]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000486:	065a      	lsls	r2, r3, #25
 8000488:	4b64      	ldr	r3, [pc, #400]	; (800061c <HAL_ADC_Init+0x2d4>)
 800048a:	430a      	orrs	r2, r1
 800048c:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	689a      	ldr	r2, [r3, #8]
 8000494:	2380      	movs	r3, #128	; 0x80
 8000496:	055b      	lsls	r3, r3, #21
 8000498:	4013      	ands	r3, r2
 800049a:	d108      	bne.n	80004ae <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	689a      	ldr	r2, [r3, #8]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	2180      	movs	r1, #128	; 0x80
 80004a8:	0549      	lsls	r1, r1, #21
 80004aa:	430a      	orrs	r2, r1
 80004ac:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	68da      	ldr	r2, [r3, #12]
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	495b      	ldr	r1, [pc, #364]	; (8000628 <HAL_ADC_Init+0x2e0>)
 80004ba:	400a      	ands	r2, r1
 80004bc:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	68d9      	ldr	r1, [r3, #12]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	691b      	ldr	r3, [r3, #16]
 80004cc:	2b02      	cmp	r3, #2
 80004ce:	d101      	bne.n	80004d4 <HAL_ADC_Init+0x18c>
 80004d0:	2304      	movs	r3, #4
 80004d2:	e000      	b.n	80004d6 <HAL_ADC_Init+0x18e>
 80004d4:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80004d6:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2020      	movs	r0, #32
 80004dc:	5c1b      	ldrb	r3, [r3, r0]
 80004de:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80004e0:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	202c      	movs	r0, #44	; 0x2c
 80004e6:	5c1b      	ldrb	r3, [r3, r0]
 80004e8:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80004ea:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80004f0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80004f8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	69db      	ldr	r3, [r3, #28]
 80004fe:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000500:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	430a      	orrs	r2, r1
 8000508:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800050e:	23c2      	movs	r3, #194	; 0xc2
 8000510:	33ff      	adds	r3, #255	; 0xff
 8000512:	429a      	cmp	r2, r3
 8000514:	d00b      	beq.n	800052e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	68d9      	ldr	r1, [r3, #12]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000524:	431a      	orrs	r2, r3
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	430a      	orrs	r2, r1
 800052c:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2221      	movs	r2, #33	; 0x21
 8000532:	5c9b      	ldrb	r3, [r3, r2]
 8000534:	2b01      	cmp	r3, #1
 8000536:	d11a      	bne.n	800056e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2220      	movs	r2, #32
 800053c:	5c9b      	ldrb	r3, [r3, r2]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d109      	bne.n	8000556 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	68da      	ldr	r2, [r3, #12]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2180      	movs	r1, #128	; 0x80
 800054e:	0249      	lsls	r1, r1, #9
 8000550:	430a      	orrs	r2, r1
 8000552:	60da      	str	r2, [r3, #12]
 8000554:	e00b      	b.n	800056e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800055a:	2220      	movs	r2, #32
 800055c:	431a      	orrs	r2, r3
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000566:	2201      	movs	r2, #1
 8000568:	431a      	orrs	r2, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000572:	2b01      	cmp	r3, #1
 8000574:	d11f      	bne.n	80005b6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	691a      	ldr	r2, [r3, #16]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	492a      	ldr	r1, [pc, #168]	; (800062c <HAL_ADC_Init+0x2e4>)
 8000582:	400a      	ands	r2, r1
 8000584:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	6919      	ldr	r1, [r3, #16]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000594:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 800059a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	430a      	orrs	r2, r1
 80005a2:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	691a      	ldr	r2, [r3, #16]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2101      	movs	r1, #1
 80005b0:	430a      	orrs	r2, r1
 80005b2:	611a      	str	r2, [r3, #16]
 80005b4:	e00e      	b.n	80005d4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	691b      	ldr	r3, [r3, #16]
 80005bc:	2201      	movs	r2, #1
 80005be:	4013      	ands	r3, r2
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d107      	bne.n	80005d4 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	691a      	ldr	r2, [r3, #16]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	2101      	movs	r1, #1
 80005d0:	438a      	bics	r2, r1
 80005d2:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	695a      	ldr	r2, [r3, #20]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2107      	movs	r1, #7
 80005e0:	438a      	bics	r2, r1
 80005e2:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	6959      	ldr	r1, [r3, #20]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	430a      	orrs	r2, r1
 80005f4:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2200      	movs	r2, #0
 80005fa:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000600:	2203      	movs	r2, #3
 8000602:	4393      	bics	r3, r2
 8000604:	2201      	movs	r2, #1
 8000606:	431a      	orrs	r2, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800060c:	2300      	movs	r3, #0
}
 800060e:	0018      	movs	r0, r3
 8000610:	46bd      	mov	sp, r7
 8000612:	b002      	add	sp, #8
 8000614:	bd80      	pop	{r7, pc}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	fffffefd 	.word	0xfffffefd
 800061c:	40012708 	.word	0x40012708
 8000620:	ffc3ffff 	.word	0xffc3ffff
 8000624:	fdffffff 	.word	0xfdffffff
 8000628:	fffe0219 	.word	0xfffe0219
 800062c:	fffffc03 	.word	0xfffffc03

08000630 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000638:	230f      	movs	r3, #15
 800063a:	18fb      	adds	r3, r7, r3
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	2204      	movs	r2, #4
 8000648:	4013      	ands	r3, r2
 800064a:	d138      	bne.n	80006be <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2250      	movs	r2, #80	; 0x50
 8000650:	5c9b      	ldrb	r3, [r3, r2]
 8000652:	2b01      	cmp	r3, #1
 8000654:	d101      	bne.n	800065a <HAL_ADC_Start+0x2a>
 8000656:	2302      	movs	r3, #2
 8000658:	e038      	b.n	80006cc <HAL_ADC_Start+0x9c>
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2250      	movs	r2, #80	; 0x50
 800065e:	2101      	movs	r1, #1
 8000660:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d007      	beq.n	800067a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800066a:	230f      	movs	r3, #15
 800066c:	18fc      	adds	r4, r7, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	0018      	movs	r0, r3
 8000672:	f000 f973 	bl	800095c <ADC_Enable>
 8000676:	0003      	movs	r3, r0
 8000678:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800067a:	230f      	movs	r3, #15
 800067c:	18fb      	adds	r3, r7, r3
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d120      	bne.n	80006c6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000688:	4a12      	ldr	r2, [pc, #72]	; (80006d4 <HAL_ADC_Start+0xa4>)
 800068a:	4013      	ands	r3, r2
 800068c:	2280      	movs	r2, #128	; 0x80
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	431a      	orrs	r2, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2200      	movs	r2, #0
 800069a:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2250      	movs	r2, #80	; 0x50
 80006a0:	2100      	movs	r1, #0
 80006a2:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	221c      	movs	r2, #28
 80006aa:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	689a      	ldr	r2, [r3, #8]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	2104      	movs	r1, #4
 80006b8:	430a      	orrs	r2, r1
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	e003      	b.n	80006c6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80006be:	230f      	movs	r3, #15
 80006c0:	18fb      	adds	r3, r7, r3
 80006c2:	2202      	movs	r2, #2
 80006c4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80006c6:	230f      	movs	r3, #15
 80006c8:	18fb      	adds	r3, r7, r3
 80006ca:	781b      	ldrb	r3, [r3, #0]
}
 80006cc:	0018      	movs	r0, r3
 80006ce:	46bd      	mov	sp, r7
 80006d0:	b005      	add	sp, #20
 80006d2:	bd90      	pop	{r4, r7, pc}
 80006d4:	fffff0fe 	.word	0xfffff0fe

080006d8 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	2b08      	cmp	r3, #8
 80006f0:	d102      	bne.n	80006f8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80006f2:	2308      	movs	r3, #8
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	e014      	b.n	8000722 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	68db      	ldr	r3, [r3, #12]
 80006fe:	2201      	movs	r2, #1
 8000700:	4013      	ands	r3, r2
 8000702:	2b01      	cmp	r3, #1
 8000704:	d10b      	bne.n	800071e <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800070a:	2220      	movs	r2, #32
 800070c:	431a      	orrs	r2, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2250      	movs	r2, #80	; 0x50
 8000716:	2100      	movs	r1, #0
 8000718:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 800071a:	2301      	movs	r3, #1
 800071c:	e06c      	b.n	80007f8 <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800071e:	230c      	movs	r3, #12
 8000720:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000722:	f7ff fde3 	bl	80002ec <HAL_GetTick>
 8000726:	0003      	movs	r3, r0
 8000728:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800072a:	e019      	b.n	8000760 <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	3301      	adds	r3, #1
 8000730:	d016      	beq.n	8000760 <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d007      	beq.n	8000748 <HAL_ADC_PollForConversion+0x70>
 8000738:	f7ff fdd8 	bl	80002ec <HAL_GetTick>
 800073c:	0002      	movs	r2, r0
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	683a      	ldr	r2, [r7, #0]
 8000744:	429a      	cmp	r2, r3
 8000746:	d20b      	bcs.n	8000760 <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800074c:	2204      	movs	r2, #4
 800074e:	431a      	orrs	r2, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2250      	movs	r2, #80	; 0x50
 8000758:	2100      	movs	r1, #0
 800075a:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 800075c:	2303      	movs	r3, #3
 800075e:	e04b      	b.n	80007f8 <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	68fa      	ldr	r2, [r7, #12]
 8000768:	4013      	ands	r3, r2
 800076a:	d0df      	beq.n	800072c <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000770:	2280      	movs	r2, #128	; 0x80
 8000772:	0092      	lsls	r2, r2, #2
 8000774:	431a      	orrs	r2, r3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	68da      	ldr	r2, [r3, #12]
 8000780:	23c0      	movs	r3, #192	; 0xc0
 8000782:	011b      	lsls	r3, r3, #4
 8000784:	4013      	ands	r3, r2
 8000786:	d12e      	bne.n	80007e6 <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2220      	movs	r2, #32
 800078c:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800078e:	2b00      	cmp	r3, #0
 8000790:	d129      	bne.n	80007e6 <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2208      	movs	r2, #8
 800079a:	4013      	ands	r3, r2
 800079c:	2b08      	cmp	r3, #8
 800079e:	d122      	bne.n	80007e6 <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	689b      	ldr	r3, [r3, #8]
 80007a6:	2204      	movs	r2, #4
 80007a8:	4013      	ands	r3, r2
 80007aa:	d110      	bne.n	80007ce <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	685a      	ldr	r2, [r3, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	210c      	movs	r1, #12
 80007b8:	438a      	bics	r2, r1
 80007ba:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80007c0:	4a0f      	ldr	r2, [pc, #60]	; (8000800 <HAL_ADC_PollForConversion+0x128>)
 80007c2:	4013      	ands	r3, r2
 80007c4:	2201      	movs	r2, #1
 80007c6:	431a      	orrs	r2, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	655a      	str	r2, [r3, #84]	; 0x54
 80007cc:	e00b      	b.n	80007e6 <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80007d2:	2220      	movs	r2, #32
 80007d4:	431a      	orrs	r2, r3
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007de:	2201      	movs	r2, #1
 80007e0:	431a      	orrs	r2, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	699b      	ldr	r3, [r3, #24]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d103      	bne.n	80007f6 <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	220c      	movs	r2, #12
 80007f4:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 80007f6:	2300      	movs	r3, #0
}
 80007f8:	0018      	movs	r0, r3
 80007fa:	46bd      	mov	sp, r7
 80007fc:	b004      	add	sp, #16
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	fffffefe 	.word	0xfffffefe

08000804 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000812:	0018      	movs	r0, r3
 8000814:	46bd      	mov	sp, r7
 8000816:	b002      	add	sp, #8
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2250      	movs	r2, #80	; 0x50
 800082a:	5c9b      	ldrb	r3, [r3, r2]
 800082c:	2b01      	cmp	r3, #1
 800082e:	d101      	bne.n	8000834 <HAL_ADC_ConfigChannel+0x18>
 8000830:	2302      	movs	r3, #2
 8000832:	e085      	b.n	8000940 <HAL_ADC_ConfigChannel+0x124>
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2250      	movs	r2, #80	; 0x50
 8000838:	2101      	movs	r1, #1
 800083a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	689b      	ldr	r3, [r3, #8]
 8000842:	2204      	movs	r2, #4
 8000844:	4013      	ands	r3, r2
 8000846:	d00b      	beq.n	8000860 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800084c:	2220      	movs	r2, #32
 800084e:	431a      	orrs	r2, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2250      	movs	r2, #80	; 0x50
 8000858:	2100      	movs	r1, #0
 800085a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800085c:	2301      	movs	r3, #1
 800085e:	e06f      	b.n	8000940 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	4a38      	ldr	r2, [pc, #224]	; (8000948 <HAL_ADC_ConfigChannel+0x12c>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d035      	beq.n	80008d6 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	035b      	lsls	r3, r3, #13
 8000876:	0b5a      	lsrs	r2, r3, #13
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	430a      	orrs	r2, r1
 800087e:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	2380      	movs	r3, #128	; 0x80
 8000886:	02db      	lsls	r3, r3, #11
 8000888:	4013      	ands	r3, r2
 800088a:	d009      	beq.n	80008a0 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 800088c:	4b2f      	ldr	r3, [pc, #188]	; (800094c <HAL_ADC_ConfigChannel+0x130>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	4b2e      	ldr	r3, [pc, #184]	; (800094c <HAL_ADC_ConfigChannel+0x130>)
 8000892:	2180      	movs	r1, #128	; 0x80
 8000894:	0409      	lsls	r1, r1, #16
 8000896:	430a      	orrs	r2, r1
 8000898:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800089a:	200a      	movs	r0, #10
 800089c:	f000 f8be 	bl	8000a1c <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	2380      	movs	r3, #128	; 0x80
 80008a6:	029b      	lsls	r3, r3, #10
 80008a8:	4013      	ands	r3, r2
 80008aa:	d006      	beq.n	80008ba <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80008ac:	4b27      	ldr	r3, [pc, #156]	; (800094c <HAL_ADC_ConfigChannel+0x130>)
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	4b26      	ldr	r3, [pc, #152]	; (800094c <HAL_ADC_ConfigChannel+0x130>)
 80008b2:	2180      	movs	r1, #128	; 0x80
 80008b4:	03c9      	lsls	r1, r1, #15
 80008b6:	430a      	orrs	r2, r1
 80008b8:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	2380      	movs	r3, #128	; 0x80
 80008c0:	025b      	lsls	r3, r3, #9
 80008c2:	4013      	ands	r3, r2
 80008c4:	d037      	beq.n	8000936 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 80008c6:	4b21      	ldr	r3, [pc, #132]	; (800094c <HAL_ADC_ConfigChannel+0x130>)
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	4b20      	ldr	r3, [pc, #128]	; (800094c <HAL_ADC_ConfigChannel+0x130>)
 80008cc:	2180      	movs	r1, #128	; 0x80
 80008ce:	0449      	lsls	r1, r1, #17
 80008d0:	430a      	orrs	r2, r1
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	e02f      	b.n	8000936 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	035b      	lsls	r3, r3, #13
 80008e2:	0b5b      	lsrs	r3, r3, #13
 80008e4:	43d9      	mvns	r1, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	400a      	ands	r2, r1
 80008ec:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	2380      	movs	r3, #128	; 0x80
 80008f4:	02db      	lsls	r3, r3, #11
 80008f6:	4013      	ands	r3, r2
 80008f8:	d005      	beq.n	8000906 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80008fa:	4b14      	ldr	r3, [pc, #80]	; (800094c <HAL_ADC_ConfigChannel+0x130>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	4b13      	ldr	r3, [pc, #76]	; (800094c <HAL_ADC_ConfigChannel+0x130>)
 8000900:	4913      	ldr	r1, [pc, #76]	; (8000950 <HAL_ADC_ConfigChannel+0x134>)
 8000902:	400a      	ands	r2, r1
 8000904:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	2380      	movs	r3, #128	; 0x80
 800090c:	029b      	lsls	r3, r3, #10
 800090e:	4013      	ands	r3, r2
 8000910:	d005      	beq.n	800091e <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <HAL_ADC_ConfigChannel+0x130>)
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	4b0d      	ldr	r3, [pc, #52]	; (800094c <HAL_ADC_ConfigChannel+0x130>)
 8000918:	490e      	ldr	r1, [pc, #56]	; (8000954 <HAL_ADC_ConfigChannel+0x138>)
 800091a:	400a      	ands	r2, r1
 800091c:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	2380      	movs	r3, #128	; 0x80
 8000924:	025b      	lsls	r3, r3, #9
 8000926:	4013      	ands	r3, r2
 8000928:	d005      	beq.n	8000936 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <HAL_ADC_ConfigChannel+0x130>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	4b07      	ldr	r3, [pc, #28]	; (800094c <HAL_ADC_ConfigChannel+0x130>)
 8000930:	4909      	ldr	r1, [pc, #36]	; (8000958 <HAL_ADC_ConfigChannel+0x13c>)
 8000932:	400a      	ands	r2, r1
 8000934:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2250      	movs	r2, #80	; 0x50
 800093a:	2100      	movs	r1, #0
 800093c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 800093e:	2300      	movs	r3, #0
}
 8000940:	0018      	movs	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	b002      	add	sp, #8
 8000946:	bd80      	pop	{r7, pc}
 8000948:	00001001 	.word	0x00001001
 800094c:	40012708 	.word	0x40012708
 8000950:	ff7fffff 	.word	0xff7fffff
 8000954:	ffbfffff 	.word	0xffbfffff
 8000958:	feffffff 	.word	0xfeffffff

0800095c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000964:	2300      	movs	r3, #0
 8000966:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	2203      	movs	r2, #3
 8000970:	4013      	ands	r3, r2
 8000972:	2b01      	cmp	r3, #1
 8000974:	d108      	bne.n	8000988 <ADC_Enable+0x2c>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2201      	movs	r2, #1
 800097e:	4013      	ands	r3, r2
 8000980:	2b01      	cmp	r3, #1
 8000982:	d101      	bne.n	8000988 <ADC_Enable+0x2c>
 8000984:	2301      	movs	r3, #1
 8000986:	e000      	b.n	800098a <ADC_Enable+0x2e>
 8000988:	2300      	movs	r3, #0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d13f      	bne.n	8000a0e <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	689b      	ldr	r3, [r3, #8]
 8000994:	4a20      	ldr	r2, [pc, #128]	; (8000a18 <ADC_Enable+0xbc>)
 8000996:	4013      	ands	r3, r2
 8000998:	d00d      	beq.n	80009b6 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800099e:	2210      	movs	r2, #16
 80009a0:	431a      	orrs	r2, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009aa:	2201      	movs	r2, #1
 80009ac:	431a      	orrs	r2, r3
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
 80009b4:	e02c      	b.n	8000a10 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	689a      	ldr	r2, [r3, #8]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2101      	movs	r1, #1
 80009c2:	430a      	orrs	r2, r1
 80009c4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80009c6:	2001      	movs	r0, #1
 80009c8:	f000 f828 	bl	8000a1c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80009cc:	f7ff fc8e 	bl	80002ec <HAL_GetTick>
 80009d0:	0003      	movs	r3, r0
 80009d2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80009d4:	e014      	b.n	8000a00 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80009d6:	f7ff fc89 	bl	80002ec <HAL_GetTick>
 80009da:	0002      	movs	r2, r0
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	1ad3      	subs	r3, r2, r3
 80009e0:	2b0a      	cmp	r3, #10
 80009e2:	d90d      	bls.n	8000a00 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009e8:	2210      	movs	r2, #16
 80009ea:	431a      	orrs	r2, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f4:	2201      	movs	r2, #1
 80009f6:	431a      	orrs	r2, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 80009fc:	2301      	movs	r3, #1
 80009fe:	e007      	b.n	8000a10 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2201      	movs	r2, #1
 8000a08:	4013      	ands	r3, r2
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d1e3      	bne.n	80009d6 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000a0e:	2300      	movs	r3, #0
}
 8000a10:	0018      	movs	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b004      	add	sp, #16
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	80000017 	.word	0x80000017

08000a1c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8000a24:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <ADC_DelayMicroSecond+0x38>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	490b      	ldr	r1, [pc, #44]	; (8000a58 <ADC_DelayMicroSecond+0x3c>)
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f7ff fb6c 	bl	8000108 <__udivsi3>
 8000a30:	0003      	movs	r3, r0
 8000a32:	001a      	movs	r2, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4353      	muls	r3, r2
 8000a38:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8000a3a:	e002      	b.n	8000a42 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d1f9      	bne.n	8000a3c <ADC_DelayMicroSecond+0x20>
  } 
}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	b004      	add	sp, #16
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	20000008 	.word	0x20000008
 8000a58:	000f4240 	.word	0x000f4240

08000a5c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a5c:	b590      	push	{r4, r7, lr}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	0002      	movs	r2, r0
 8000a64:	6039      	str	r1, [r7, #0]
 8000a66:	1dfb      	adds	r3, r7, #7
 8000a68:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b7f      	cmp	r3, #127	; 0x7f
 8000a70:	d932      	bls.n	8000ad8 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a72:	4a2f      	ldr	r2, [pc, #188]	; (8000b30 <NVIC_SetPriority+0xd4>)
 8000a74:	1dfb      	adds	r3, r7, #7
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	0019      	movs	r1, r3
 8000a7a:	230f      	movs	r3, #15
 8000a7c:	400b      	ands	r3, r1
 8000a7e:	3b08      	subs	r3, #8
 8000a80:	089b      	lsrs	r3, r3, #2
 8000a82:	3306      	adds	r3, #6
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	18d3      	adds	r3, r2, r3
 8000a88:	3304      	adds	r3, #4
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	1dfa      	adds	r2, r7, #7
 8000a8e:	7812      	ldrb	r2, [r2, #0]
 8000a90:	0011      	movs	r1, r2
 8000a92:	2203      	movs	r2, #3
 8000a94:	400a      	ands	r2, r1
 8000a96:	00d2      	lsls	r2, r2, #3
 8000a98:	21ff      	movs	r1, #255	; 0xff
 8000a9a:	4091      	lsls	r1, r2
 8000a9c:	000a      	movs	r2, r1
 8000a9e:	43d2      	mvns	r2, r2
 8000aa0:	401a      	ands	r2, r3
 8000aa2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	019b      	lsls	r3, r3, #6
 8000aa8:	22ff      	movs	r2, #255	; 0xff
 8000aaa:	401a      	ands	r2, r3
 8000aac:	1dfb      	adds	r3, r7, #7
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	4003      	ands	r3, r0
 8000ab6:	00db      	lsls	r3, r3, #3
 8000ab8:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aba:	481d      	ldr	r0, [pc, #116]	; (8000b30 <NVIC_SetPriority+0xd4>)
 8000abc:	1dfb      	adds	r3, r7, #7
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	230f      	movs	r3, #15
 8000ac4:	4023      	ands	r3, r4
 8000ac6:	3b08      	subs	r3, #8
 8000ac8:	089b      	lsrs	r3, r3, #2
 8000aca:	430a      	orrs	r2, r1
 8000acc:	3306      	adds	r3, #6
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	18c3      	adds	r3, r0, r3
 8000ad2:	3304      	adds	r3, #4
 8000ad4:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ad6:	e027      	b.n	8000b28 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ad8:	4a16      	ldr	r2, [pc, #88]	; (8000b34 <NVIC_SetPriority+0xd8>)
 8000ada:	1dfb      	adds	r3, r7, #7
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	b25b      	sxtb	r3, r3
 8000ae0:	089b      	lsrs	r3, r3, #2
 8000ae2:	33c0      	adds	r3, #192	; 0xc0
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	589b      	ldr	r3, [r3, r2]
 8000ae8:	1dfa      	adds	r2, r7, #7
 8000aea:	7812      	ldrb	r2, [r2, #0]
 8000aec:	0011      	movs	r1, r2
 8000aee:	2203      	movs	r2, #3
 8000af0:	400a      	ands	r2, r1
 8000af2:	00d2      	lsls	r2, r2, #3
 8000af4:	21ff      	movs	r1, #255	; 0xff
 8000af6:	4091      	lsls	r1, r2
 8000af8:	000a      	movs	r2, r1
 8000afa:	43d2      	mvns	r2, r2
 8000afc:	401a      	ands	r2, r3
 8000afe:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	019b      	lsls	r3, r3, #6
 8000b04:	22ff      	movs	r2, #255	; 0xff
 8000b06:	401a      	ands	r2, r3
 8000b08:	1dfb      	adds	r3, r7, #7
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	2303      	movs	r3, #3
 8000b10:	4003      	ands	r3, r0
 8000b12:	00db      	lsls	r3, r3, #3
 8000b14:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b16:	4807      	ldr	r0, [pc, #28]	; (8000b34 <NVIC_SetPriority+0xd8>)
 8000b18:	1dfb      	adds	r3, r7, #7
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	b25b      	sxtb	r3, r3
 8000b1e:	089b      	lsrs	r3, r3, #2
 8000b20:	430a      	orrs	r2, r1
 8000b22:	33c0      	adds	r3, #192	; 0xc0
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	501a      	str	r2, [r3, r0]
}
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b003      	add	sp, #12
 8000b2e:	bd90      	pop	{r4, r7, pc}
 8000b30:	e000ed00 	.word	0xe000ed00
 8000b34:	e000e100 	.word	0xe000e100

08000b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	1e5a      	subs	r2, r3, #1
 8000b44:	2380      	movs	r3, #128	; 0x80
 8000b46:	045b      	lsls	r3, r3, #17
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d301      	bcc.n	8000b50 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	e010      	b.n	8000b72 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b50:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <SysTick_Config+0x44>)
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	3a01      	subs	r2, #1
 8000b56:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b58:	2301      	movs	r3, #1
 8000b5a:	425b      	negs	r3, r3
 8000b5c:	2103      	movs	r1, #3
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f7ff ff7c 	bl	8000a5c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b64:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <SysTick_Config+0x44>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b6a:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <SysTick_Config+0x44>)
 8000b6c:	2207      	movs	r2, #7
 8000b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	0018      	movs	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	b002      	add	sp, #8
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	e000e010 	.word	0xe000e010

08000b80 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60b9      	str	r1, [r7, #8]
 8000b88:	607a      	str	r2, [r7, #4]
 8000b8a:	210f      	movs	r1, #15
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	1c02      	adds	r2, r0, #0
 8000b90:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	b25b      	sxtb	r3, r3
 8000b9a:	0011      	movs	r1, r2
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f7ff ff5d 	bl	8000a5c <NVIC_SetPriority>
}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	b004      	add	sp, #16
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f7ff ffbf 	bl	8000b38 <SysTick_Config>
 8000bba:	0003      	movs	r3, r0
}
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	b002      	add	sp, #8
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000bda:	e14f      	b.n	8000e7c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2101      	movs	r1, #1
 8000be2:	697a      	ldr	r2, [r7, #20]
 8000be4:	4091      	lsls	r1, r2
 8000be6:	000a      	movs	r2, r1
 8000be8:	4013      	ands	r3, r2
 8000bea:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d100      	bne.n	8000bf4 <HAL_GPIO_Init+0x30>
 8000bf2:	e140      	b.n	8000e76 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d00b      	beq.n	8000c14 <HAL_GPIO_Init+0x50>
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	d007      	beq.n	8000c14 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c08:	2b11      	cmp	r3, #17
 8000c0a:	d003      	beq.n	8000c14 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	2b12      	cmp	r3, #18
 8000c12:	d130      	bne.n	8000c76 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	2203      	movs	r2, #3
 8000c20:	409a      	lsls	r2, r3
 8000c22:	0013      	movs	r3, r2
 8000c24:	43da      	mvns	r2, r3
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	68da      	ldr	r2, [r3, #12]
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	409a      	lsls	r2, r3
 8000c36:	0013      	movs	r3, r2
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	409a      	lsls	r2, r3
 8000c50:	0013      	movs	r3, r2
 8000c52:	43da      	mvns	r2, r3
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	4013      	ands	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	091b      	lsrs	r3, r3, #4
 8000c60:	2201      	movs	r2, #1
 8000c62:	401a      	ands	r2, r3
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	409a      	lsls	r2, r3
 8000c68:	0013      	movs	r3, r2
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	2203      	movs	r2, #3
 8000c82:	409a      	lsls	r2, r3
 8000c84:	0013      	movs	r3, r2
 8000c86:	43da      	mvns	r2, r3
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	689a      	ldr	r2, [r3, #8]
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	409a      	lsls	r2, r3
 8000c98:	0013      	movs	r3, r2
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	d003      	beq.n	8000cb6 <HAL_GPIO_Init+0xf2>
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	2b12      	cmp	r3, #18
 8000cb4:	d123      	bne.n	8000cfe <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	08da      	lsrs	r2, r3, #3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	3208      	adds	r2, #8
 8000cbe:	0092      	lsls	r2, r2, #2
 8000cc0:	58d3      	ldr	r3, [r2, r3]
 8000cc2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	2207      	movs	r2, #7
 8000cc8:	4013      	ands	r3, r2
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	220f      	movs	r2, #15
 8000cce:	409a      	lsls	r2, r3
 8000cd0:	0013      	movs	r3, r2
 8000cd2:	43da      	mvns	r2, r3
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	691a      	ldr	r2, [r3, #16]
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	2107      	movs	r1, #7
 8000ce2:	400b      	ands	r3, r1
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	409a      	lsls	r2, r3
 8000ce8:	0013      	movs	r3, r2
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	08da      	lsrs	r2, r3, #3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3208      	adds	r2, #8
 8000cf8:	0092      	lsls	r2, r2, #2
 8000cfa:	6939      	ldr	r1, [r7, #16]
 8000cfc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	2203      	movs	r2, #3
 8000d0a:	409a      	lsls	r2, r3
 8000d0c:	0013      	movs	r3, r2
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	4013      	ands	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	401a      	ands	r2, r3
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	409a      	lsls	r2, r3
 8000d24:	0013      	movs	r3, r2
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685a      	ldr	r2, [r3, #4]
 8000d36:	2380      	movs	r3, #128	; 0x80
 8000d38:	055b      	lsls	r3, r3, #21
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	d100      	bne.n	8000d40 <HAL_GPIO_Init+0x17c>
 8000d3e:	e09a      	b.n	8000e76 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d40:	4b54      	ldr	r3, [pc, #336]	; (8000e94 <HAL_GPIO_Init+0x2d0>)
 8000d42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d44:	4b53      	ldr	r3, [pc, #332]	; (8000e94 <HAL_GPIO_Init+0x2d0>)
 8000d46:	2101      	movs	r1, #1
 8000d48:	430a      	orrs	r2, r1
 8000d4a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d4c:	4a52      	ldr	r2, [pc, #328]	; (8000e98 <HAL_GPIO_Init+0x2d4>)
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	089b      	lsrs	r3, r3, #2
 8000d52:	3302      	adds	r3, #2
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	589b      	ldr	r3, [r3, r2]
 8000d58:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	4013      	ands	r3, r2
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	220f      	movs	r2, #15
 8000d64:	409a      	lsls	r2, r3
 8000d66:	0013      	movs	r3, r2
 8000d68:	43da      	mvns	r2, r3
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	23a0      	movs	r3, #160	; 0xa0
 8000d74:	05db      	lsls	r3, r3, #23
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d019      	beq.n	8000dae <HAL_GPIO_Init+0x1ea>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a47      	ldr	r2, [pc, #284]	; (8000e9c <HAL_GPIO_Init+0x2d8>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d013      	beq.n	8000daa <HAL_GPIO_Init+0x1e6>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a46      	ldr	r2, [pc, #280]	; (8000ea0 <HAL_GPIO_Init+0x2dc>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d00d      	beq.n	8000da6 <HAL_GPIO_Init+0x1e2>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a45      	ldr	r2, [pc, #276]	; (8000ea4 <HAL_GPIO_Init+0x2e0>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d007      	beq.n	8000da2 <HAL_GPIO_Init+0x1de>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a44      	ldr	r2, [pc, #272]	; (8000ea8 <HAL_GPIO_Init+0x2e4>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d101      	bne.n	8000d9e <HAL_GPIO_Init+0x1da>
 8000d9a:	2305      	movs	r3, #5
 8000d9c:	e008      	b.n	8000db0 <HAL_GPIO_Init+0x1ec>
 8000d9e:	2306      	movs	r3, #6
 8000da0:	e006      	b.n	8000db0 <HAL_GPIO_Init+0x1ec>
 8000da2:	2303      	movs	r3, #3
 8000da4:	e004      	b.n	8000db0 <HAL_GPIO_Init+0x1ec>
 8000da6:	2302      	movs	r3, #2
 8000da8:	e002      	b.n	8000db0 <HAL_GPIO_Init+0x1ec>
 8000daa:	2301      	movs	r3, #1
 8000dac:	e000      	b.n	8000db0 <HAL_GPIO_Init+0x1ec>
 8000dae:	2300      	movs	r3, #0
 8000db0:	697a      	ldr	r2, [r7, #20]
 8000db2:	2103      	movs	r1, #3
 8000db4:	400a      	ands	r2, r1
 8000db6:	0092      	lsls	r2, r2, #2
 8000db8:	4093      	lsls	r3, r2
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dc0:	4935      	ldr	r1, [pc, #212]	; (8000e98 <HAL_GPIO_Init+0x2d4>)
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	089b      	lsrs	r3, r3, #2
 8000dc6:	3302      	adds	r3, #2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dce:	4b37      	ldr	r3, [pc, #220]	; (8000eac <HAL_GPIO_Init+0x2e8>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	43da      	mvns	r2, r3
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685a      	ldr	r2, [r3, #4]
 8000de2:	2380      	movs	r3, #128	; 0x80
 8000de4:	025b      	lsls	r3, r3, #9
 8000de6:	4013      	ands	r3, r2
 8000de8:	d003      	beq.n	8000df2 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000df2:	4b2e      	ldr	r3, [pc, #184]	; (8000eac <HAL_GPIO_Init+0x2e8>)
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000df8:	4b2c      	ldr	r3, [pc, #176]	; (8000eac <HAL_GPIO_Init+0x2e8>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	43da      	mvns	r2, r3
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685a      	ldr	r2, [r3, #4]
 8000e0c:	2380      	movs	r3, #128	; 0x80
 8000e0e:	029b      	lsls	r3, r3, #10
 8000e10:	4013      	ands	r3, r2
 8000e12:	d003      	beq.n	8000e1c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e1c:	4b23      	ldr	r3, [pc, #140]	; (8000eac <HAL_GPIO_Init+0x2e8>)
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e22:	4b22      	ldr	r3, [pc, #136]	; (8000eac <HAL_GPIO_Init+0x2e8>)
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	43da      	mvns	r2, r3
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	2380      	movs	r3, #128	; 0x80
 8000e38:	035b      	lsls	r3, r3, #13
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	d003      	beq.n	8000e46 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e46:	4b19      	ldr	r3, [pc, #100]	; (8000eac <HAL_GPIO_Init+0x2e8>)
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e4c:	4b17      	ldr	r3, [pc, #92]	; (8000eac <HAL_GPIO_Init+0x2e8>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	43da      	mvns	r2, r3
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685a      	ldr	r2, [r3, #4]
 8000e60:	2380      	movs	r3, #128	; 0x80
 8000e62:	039b      	lsls	r3, r3, #14
 8000e64:	4013      	ands	r3, r2
 8000e66:	d003      	beq.n	8000e70 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e70:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <HAL_GPIO_Init+0x2e8>)
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	40da      	lsrs	r2, r3
 8000e84:	1e13      	subs	r3, r2, #0
 8000e86:	d000      	beq.n	8000e8a <HAL_GPIO_Init+0x2c6>
 8000e88:	e6a8      	b.n	8000bdc <HAL_GPIO_Init+0x18>
  }
}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	46c0      	nop			; (mov r8, r8)
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	b006      	add	sp, #24
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40021000 	.word	0x40021000
 8000e98:	40010000 	.word	0x40010000
 8000e9c:	50000400 	.word	0x50000400
 8000ea0:	50000800 	.word	0x50000800
 8000ea4:	50000c00 	.word	0x50000c00
 8000ea8:	50001c00 	.word	0x50001c00
 8000eac:	40010400 	.word	0x40010400

08000eb0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	0008      	movs	r0, r1
 8000eba:	0011      	movs	r1, r2
 8000ebc:	1cbb      	adds	r3, r7, #2
 8000ebe:	1c02      	adds	r2, r0, #0
 8000ec0:	801a      	strh	r2, [r3, #0]
 8000ec2:	1c7b      	adds	r3, r7, #1
 8000ec4:	1c0a      	adds	r2, r1, #0
 8000ec6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ec8:	1c7b      	adds	r3, r7, #1
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d004      	beq.n	8000eda <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ed0:	1cbb      	adds	r3, r7, #2
 8000ed2:	881a      	ldrh	r2, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000ed8:	e003      	b.n	8000ee2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000eda:	1cbb      	adds	r3, r7, #2
 8000edc:	881a      	ldrh	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	b002      	add	sp, #8
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000eec:	b5b0      	push	{r4, r5, r7, lr}
 8000eee:	b08a      	sub	sp, #40	; 0x28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d102      	bne.n	8000f00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	f000 fbab 	bl	8001656 <HAL_RCC_OscConfig+0x76a>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f00:	4bce      	ldr	r3, [pc, #824]	; (800123c <HAL_RCC_OscConfig+0x350>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	220c      	movs	r2, #12
 8000f06:	4013      	ands	r3, r2
 8000f08:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f0a:	4bcc      	ldr	r3, [pc, #816]	; (800123c <HAL_RCC_OscConfig+0x350>)
 8000f0c:	68da      	ldr	r2, [r3, #12]
 8000f0e:	2380      	movs	r3, #128	; 0x80
 8000f10:	025b      	lsls	r3, r3, #9
 8000f12:	4013      	ands	r3, r2
 8000f14:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	d100      	bne.n	8000f22 <HAL_RCC_OscConfig+0x36>
 8000f20:	e07e      	b.n	8001020 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f22:	6a3b      	ldr	r3, [r7, #32]
 8000f24:	2b08      	cmp	r3, #8
 8000f26:	d007      	beq.n	8000f38 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f28:	6a3b      	ldr	r3, [r7, #32]
 8000f2a:	2b0c      	cmp	r3, #12
 8000f2c:	d112      	bne.n	8000f54 <HAL_RCC_OscConfig+0x68>
 8000f2e:	69fa      	ldr	r2, [r7, #28]
 8000f30:	2380      	movs	r3, #128	; 0x80
 8000f32:	025b      	lsls	r3, r3, #9
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d10d      	bne.n	8000f54 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f38:	4bc0      	ldr	r3, [pc, #768]	; (800123c <HAL_RCC_OscConfig+0x350>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	029b      	lsls	r3, r3, #10
 8000f40:	4013      	ands	r3, r2
 8000f42:	d100      	bne.n	8000f46 <HAL_RCC_OscConfig+0x5a>
 8000f44:	e06b      	b.n	800101e <HAL_RCC_OscConfig+0x132>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d167      	bne.n	800101e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	f000 fb81 	bl	8001656 <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685a      	ldr	r2, [r3, #4]
 8000f58:	2380      	movs	r3, #128	; 0x80
 8000f5a:	025b      	lsls	r3, r3, #9
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d107      	bne.n	8000f70 <HAL_RCC_OscConfig+0x84>
 8000f60:	4bb6      	ldr	r3, [pc, #728]	; (800123c <HAL_RCC_OscConfig+0x350>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4bb5      	ldr	r3, [pc, #724]	; (800123c <HAL_RCC_OscConfig+0x350>)
 8000f66:	2180      	movs	r1, #128	; 0x80
 8000f68:	0249      	lsls	r1, r1, #9
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	e027      	b.n	8000fc0 <HAL_RCC_OscConfig+0xd4>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685a      	ldr	r2, [r3, #4]
 8000f74:	23a0      	movs	r3, #160	; 0xa0
 8000f76:	02db      	lsls	r3, r3, #11
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d10e      	bne.n	8000f9a <HAL_RCC_OscConfig+0xae>
 8000f7c:	4baf      	ldr	r3, [pc, #700]	; (800123c <HAL_RCC_OscConfig+0x350>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4bae      	ldr	r3, [pc, #696]	; (800123c <HAL_RCC_OscConfig+0x350>)
 8000f82:	2180      	movs	r1, #128	; 0x80
 8000f84:	02c9      	lsls	r1, r1, #11
 8000f86:	430a      	orrs	r2, r1
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	4bac      	ldr	r3, [pc, #688]	; (800123c <HAL_RCC_OscConfig+0x350>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	4bab      	ldr	r3, [pc, #684]	; (800123c <HAL_RCC_OscConfig+0x350>)
 8000f90:	2180      	movs	r1, #128	; 0x80
 8000f92:	0249      	lsls	r1, r1, #9
 8000f94:	430a      	orrs	r2, r1
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	e012      	b.n	8000fc0 <HAL_RCC_OscConfig+0xd4>
 8000f9a:	4ba8      	ldr	r3, [pc, #672]	; (800123c <HAL_RCC_OscConfig+0x350>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	4ba7      	ldr	r3, [pc, #668]	; (800123c <HAL_RCC_OscConfig+0x350>)
 8000fa0:	49a7      	ldr	r1, [pc, #668]	; (8001240 <HAL_RCC_OscConfig+0x354>)
 8000fa2:	400a      	ands	r2, r1
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	4ba5      	ldr	r3, [pc, #660]	; (800123c <HAL_RCC_OscConfig+0x350>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	2380      	movs	r3, #128	; 0x80
 8000fac:	025b      	lsls	r3, r3, #9
 8000fae:	4013      	ands	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	4ba1      	ldr	r3, [pc, #644]	; (800123c <HAL_RCC_OscConfig+0x350>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4ba0      	ldr	r3, [pc, #640]	; (800123c <HAL_RCC_OscConfig+0x350>)
 8000fba:	49a2      	ldr	r1, [pc, #648]	; (8001244 <HAL_RCC_OscConfig+0x358>)
 8000fbc:	400a      	ands	r2, r1
 8000fbe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d015      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc8:	f7ff f990 	bl	80002ec <HAL_GetTick>
 8000fcc:	0003      	movs	r3, r0
 8000fce:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000fd0:	e009      	b.n	8000fe6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fd2:	f7ff f98b 	bl	80002ec <HAL_GetTick>
 8000fd6:	0002      	movs	r2, r0
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	2b64      	cmp	r3, #100	; 0x64
 8000fde:	d902      	bls.n	8000fe6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	f000 fb38 	bl	8001656 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000fe6:	4b95      	ldr	r3, [pc, #596]	; (800123c <HAL_RCC_OscConfig+0x350>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	2380      	movs	r3, #128	; 0x80
 8000fec:	029b      	lsls	r3, r3, #10
 8000fee:	4013      	ands	r3, r2
 8000ff0:	d0ef      	beq.n	8000fd2 <HAL_RCC_OscConfig+0xe6>
 8000ff2:	e015      	b.n	8001020 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff4:	f7ff f97a 	bl	80002ec <HAL_GetTick>
 8000ff8:	0003      	movs	r3, r0
 8000ffa:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000ffc:	e008      	b.n	8001010 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ffe:	f7ff f975 	bl	80002ec <HAL_GetTick>
 8001002:	0002      	movs	r2, r0
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	2b64      	cmp	r3, #100	; 0x64
 800100a:	d901      	bls.n	8001010 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800100c:	2303      	movs	r3, #3
 800100e:	e322      	b.n	8001656 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001010:	4b8a      	ldr	r3, [pc, #552]	; (800123c <HAL_RCC_OscConfig+0x350>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	2380      	movs	r3, #128	; 0x80
 8001016:	029b      	lsls	r3, r3, #10
 8001018:	4013      	ands	r3, r2
 800101a:	d1f0      	bne.n	8000ffe <HAL_RCC_OscConfig+0x112>
 800101c:	e000      	b.n	8001020 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800101e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2202      	movs	r2, #2
 8001026:	4013      	ands	r3, r2
 8001028:	d100      	bne.n	800102c <HAL_RCC_OscConfig+0x140>
 800102a:	e08a      	b.n	8001142 <HAL_RCC_OscConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001032:	6a3b      	ldr	r3, [r7, #32]
 8001034:	2b04      	cmp	r3, #4
 8001036:	d005      	beq.n	8001044 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001038:	6a3b      	ldr	r3, [r7, #32]
 800103a:	2b0c      	cmp	r3, #12
 800103c:	d13d      	bne.n	80010ba <HAL_RCC_OscConfig+0x1ce>
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d13a      	bne.n	80010ba <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001044:	4b7d      	ldr	r3, [pc, #500]	; (800123c <HAL_RCC_OscConfig+0x350>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2204      	movs	r2, #4
 800104a:	4013      	ands	r3, r2
 800104c:	d004      	beq.n	8001058 <HAL_RCC_OscConfig+0x16c>
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d101      	bne.n	8001058 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	e2fe      	b.n	8001656 <HAL_RCC_OscConfig+0x76a>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001058:	4b78      	ldr	r3, [pc, #480]	; (800123c <HAL_RCC_OscConfig+0x350>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	4a7a      	ldr	r2, [pc, #488]	; (8001248 <HAL_RCC_OscConfig+0x35c>)
 800105e:	4013      	ands	r3, r2
 8001060:	0019      	movs	r1, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	691b      	ldr	r3, [r3, #16]
 8001066:	021a      	lsls	r2, r3, #8
 8001068:	4b74      	ldr	r3, [pc, #464]	; (800123c <HAL_RCC_OscConfig+0x350>)
 800106a:	430a      	orrs	r2, r1
 800106c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800106e:	4b73      	ldr	r3, [pc, #460]	; (800123c <HAL_RCC_OscConfig+0x350>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2209      	movs	r2, #9
 8001074:	4393      	bics	r3, r2
 8001076:	0019      	movs	r1, r3
 8001078:	4b70      	ldr	r3, [pc, #448]	; (800123c <HAL_RCC_OscConfig+0x350>)
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	430a      	orrs	r2, r1
 800107e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001080:	f000 fc1e 	bl	80018c0 <HAL_RCC_GetSysClockFreq>
 8001084:	0001      	movs	r1, r0
 8001086:	4b6d      	ldr	r3, [pc, #436]	; (800123c <HAL_RCC_OscConfig+0x350>)
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	091b      	lsrs	r3, r3, #4
 800108c:	220f      	movs	r2, #15
 800108e:	4013      	ands	r3, r2
 8001090:	4a6e      	ldr	r2, [pc, #440]	; (800124c <HAL_RCC_OscConfig+0x360>)
 8001092:	5cd3      	ldrb	r3, [r2, r3]
 8001094:	000a      	movs	r2, r1
 8001096:	40da      	lsrs	r2, r3
 8001098:	4b6d      	ldr	r3, [pc, #436]	; (8001250 <HAL_RCC_OscConfig+0x364>)
 800109a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 800109c:	2513      	movs	r5, #19
 800109e:	197c      	adds	r4, r7, r5
 80010a0:	2000      	movs	r0, #0
 80010a2:	f7ff f8dd 	bl	8000260 <HAL_InitTick>
 80010a6:	0003      	movs	r3, r0
 80010a8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80010aa:	002a      	movs	r2, r5
 80010ac:	18bb      	adds	r3, r7, r2
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d046      	beq.n	8001142 <HAL_RCC_OscConfig+0x256>
      {
        return status;
 80010b4:	18bb      	adds	r3, r7, r2
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	e2cd      	b.n	8001656 <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d027      	beq.n	8001110 <HAL_RCC_OscConfig+0x224>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80010c0:	4b5e      	ldr	r3, [pc, #376]	; (800123c <HAL_RCC_OscConfig+0x350>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2209      	movs	r2, #9
 80010c6:	4393      	bics	r3, r2
 80010c8:	0019      	movs	r1, r3
 80010ca:	4b5c      	ldr	r3, [pc, #368]	; (800123c <HAL_RCC_OscConfig+0x350>)
 80010cc:	697a      	ldr	r2, [r7, #20]
 80010ce:	430a      	orrs	r2, r1
 80010d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d2:	f7ff f90b 	bl	80002ec <HAL_GetTick>
 80010d6:	0003      	movs	r3, r0
 80010d8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010da:	e008      	b.n	80010ee <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010dc:	f7ff f906 	bl	80002ec <HAL_GetTick>
 80010e0:	0002      	movs	r2, r0
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d901      	bls.n	80010ee <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e2b3      	b.n	8001656 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010ee:	4b53      	ldr	r3, [pc, #332]	; (800123c <HAL_RCC_OscConfig+0x350>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2204      	movs	r2, #4
 80010f4:	4013      	ands	r3, r2
 80010f6:	d0f1      	beq.n	80010dc <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f8:	4b50      	ldr	r3, [pc, #320]	; (800123c <HAL_RCC_OscConfig+0x350>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	4a52      	ldr	r2, [pc, #328]	; (8001248 <HAL_RCC_OscConfig+0x35c>)
 80010fe:	4013      	ands	r3, r2
 8001100:	0019      	movs	r1, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	691b      	ldr	r3, [r3, #16]
 8001106:	021a      	lsls	r2, r3, #8
 8001108:	4b4c      	ldr	r3, [pc, #304]	; (800123c <HAL_RCC_OscConfig+0x350>)
 800110a:	430a      	orrs	r2, r1
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	e018      	b.n	8001142 <HAL_RCC_OscConfig+0x256>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001110:	4b4a      	ldr	r3, [pc, #296]	; (800123c <HAL_RCC_OscConfig+0x350>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b49      	ldr	r3, [pc, #292]	; (800123c <HAL_RCC_OscConfig+0x350>)
 8001116:	2101      	movs	r1, #1
 8001118:	438a      	bics	r2, r1
 800111a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111c:	f7ff f8e6 	bl	80002ec <HAL_GetTick>
 8001120:	0003      	movs	r3, r0
 8001122:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001124:	e008      	b.n	8001138 <HAL_RCC_OscConfig+0x24c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001126:	f7ff f8e1 	bl	80002ec <HAL_GetTick>
 800112a:	0002      	movs	r2, r0
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	2b02      	cmp	r3, #2
 8001132:	d901      	bls.n	8001138 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8001134:	2303      	movs	r3, #3
 8001136:	e28e      	b.n	8001656 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001138:	4b40      	ldr	r3, [pc, #256]	; (800123c <HAL_RCC_OscConfig+0x350>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2204      	movs	r2, #4
 800113e:	4013      	ands	r3, r2
 8001140:	d1f1      	bne.n	8001126 <HAL_RCC_OscConfig+0x23a>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2210      	movs	r2, #16
 8001148:	4013      	ands	r3, r2
 800114a:	d100      	bne.n	800114e <HAL_RCC_OscConfig+0x262>
 800114c:	e09e      	b.n	800128c <HAL_RCC_OscConfig+0x3a0>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800114e:	6a3b      	ldr	r3, [r7, #32]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d13f      	bne.n	80011d4 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001154:	4b39      	ldr	r3, [pc, #228]	; (800123c <HAL_RCC_OscConfig+0x350>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	2380      	movs	r3, #128	; 0x80
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4013      	ands	r3, r2
 800115e:	d005      	beq.n	800116c <HAL_RCC_OscConfig+0x280>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	69db      	ldr	r3, [r3, #28]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d101      	bne.n	800116c <HAL_RCC_OscConfig+0x280>
      {
        return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e274      	b.n	8001656 <HAL_RCC_OscConfig+0x76a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800116c:	4b33      	ldr	r3, [pc, #204]	; (800123c <HAL_RCC_OscConfig+0x350>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	4a38      	ldr	r2, [pc, #224]	; (8001254 <HAL_RCC_OscConfig+0x368>)
 8001172:	4013      	ands	r3, r2
 8001174:	0019      	movs	r1, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800117a:	4b30      	ldr	r3, [pc, #192]	; (800123c <HAL_RCC_OscConfig+0x350>)
 800117c:	430a      	orrs	r2, r1
 800117e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001180:	4b2e      	ldr	r3, [pc, #184]	; (800123c <HAL_RCC_OscConfig+0x350>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	021b      	lsls	r3, r3, #8
 8001186:	0a19      	lsrs	r1, r3, #8
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a1b      	ldr	r3, [r3, #32]
 800118c:	061a      	lsls	r2, r3, #24
 800118e:	4b2b      	ldr	r3, [pc, #172]	; (800123c <HAL_RCC_OscConfig+0x350>)
 8001190:	430a      	orrs	r2, r1
 8001192:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001198:	0b5b      	lsrs	r3, r3, #13
 800119a:	3301      	adds	r3, #1
 800119c:	2280      	movs	r2, #128	; 0x80
 800119e:	0212      	lsls	r2, r2, #8
 80011a0:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80011a2:	4b26      	ldr	r3, [pc, #152]	; (800123c <HAL_RCC_OscConfig+0x350>)
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	091b      	lsrs	r3, r3, #4
 80011a8:	210f      	movs	r1, #15
 80011aa:	400b      	ands	r3, r1
 80011ac:	4927      	ldr	r1, [pc, #156]	; (800124c <HAL_RCC_OscConfig+0x360>)
 80011ae:	5ccb      	ldrb	r3, [r1, r3]
 80011b0:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80011b2:	4b27      	ldr	r3, [pc, #156]	; (8001250 <HAL_RCC_OscConfig+0x364>)
 80011b4:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80011b6:	2513      	movs	r5, #19
 80011b8:	197c      	adds	r4, r7, r5
 80011ba:	2000      	movs	r0, #0
 80011bc:	f7ff f850 	bl	8000260 <HAL_InitTick>
 80011c0:	0003      	movs	r3, r0
 80011c2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80011c4:	002a      	movs	r2, r5
 80011c6:	18bb      	adds	r3, r7, r2
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d05e      	beq.n	800128c <HAL_RCC_OscConfig+0x3a0>
        {
          return status;
 80011ce:	18bb      	adds	r3, r7, r2
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	e240      	b.n	8001656 <HAL_RCC_OscConfig+0x76a>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	69db      	ldr	r3, [r3, #28]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d03d      	beq.n	8001258 <HAL_RCC_OscConfig+0x36c>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011dc:	4b17      	ldr	r3, [pc, #92]	; (800123c <HAL_RCC_OscConfig+0x350>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b16      	ldr	r3, [pc, #88]	; (800123c <HAL_RCC_OscConfig+0x350>)
 80011e2:	2180      	movs	r1, #128	; 0x80
 80011e4:	0049      	lsls	r1, r1, #1
 80011e6:	430a      	orrs	r2, r1
 80011e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ea:	f7ff f87f 	bl	80002ec <HAL_GetTick>
 80011ee:	0003      	movs	r3, r0
 80011f0:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011f4:	f7ff f87a 	bl	80002ec <HAL_GetTick>
 80011f8:	0002      	movs	r2, r0
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e227      	b.n	8001656 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001206:	4b0d      	ldr	r3, [pc, #52]	; (800123c <HAL_RCC_OscConfig+0x350>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	2380      	movs	r3, #128	; 0x80
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	4013      	ands	r3, r2
 8001210:	d0f0      	beq.n	80011f4 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001212:	4b0a      	ldr	r3, [pc, #40]	; (800123c <HAL_RCC_OscConfig+0x350>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	4a0f      	ldr	r2, [pc, #60]	; (8001254 <HAL_RCC_OscConfig+0x368>)
 8001218:	4013      	ands	r3, r2
 800121a:	0019      	movs	r1, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_RCC_OscConfig+0x350>)
 8001222:	430a      	orrs	r2, r1
 8001224:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001226:	4b05      	ldr	r3, [pc, #20]	; (800123c <HAL_RCC_OscConfig+0x350>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	021b      	lsls	r3, r3, #8
 800122c:	0a19      	lsrs	r1, r3, #8
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6a1b      	ldr	r3, [r3, #32]
 8001232:	061a      	lsls	r2, r3, #24
 8001234:	4b01      	ldr	r3, [pc, #4]	; (800123c <HAL_RCC_OscConfig+0x350>)
 8001236:	430a      	orrs	r2, r1
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	e027      	b.n	800128c <HAL_RCC_OscConfig+0x3a0>
 800123c:	40021000 	.word	0x40021000
 8001240:	fffeffff 	.word	0xfffeffff
 8001244:	fffbffff 	.word	0xfffbffff
 8001248:	ffffe0ff 	.word	0xffffe0ff
 800124c:	080022b0 	.word	0x080022b0
 8001250:	20000008 	.word	0x20000008
 8001254:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001258:	4bbd      	ldr	r3, [pc, #756]	; (8001550 <HAL_RCC_OscConfig+0x664>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4bbc      	ldr	r3, [pc, #752]	; (8001550 <HAL_RCC_OscConfig+0x664>)
 800125e:	49bd      	ldr	r1, [pc, #756]	; (8001554 <HAL_RCC_OscConfig+0x668>)
 8001260:	400a      	ands	r2, r1
 8001262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001264:	f7ff f842 	bl	80002ec <HAL_GetTick>
 8001268:	0003      	movs	r3, r0
 800126a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800126c:	e008      	b.n	8001280 <HAL_RCC_OscConfig+0x394>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800126e:	f7ff f83d 	bl	80002ec <HAL_GetTick>
 8001272:	0002      	movs	r2, r0
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x394>
          {
            return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e1ea      	b.n	8001656 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001280:	4bb3      	ldr	r3, [pc, #716]	; (8001550 <HAL_RCC_OscConfig+0x664>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	2380      	movs	r3, #128	; 0x80
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	4013      	ands	r3, r2
 800128a:	d1f0      	bne.n	800126e <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2208      	movs	r2, #8
 8001292:	4013      	ands	r3, r2
 8001294:	d036      	beq.n	8001304 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d019      	beq.n	80012d2 <HAL_RCC_OscConfig+0x3e6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800129e:	4bac      	ldr	r3, [pc, #688]	; (8001550 <HAL_RCC_OscConfig+0x664>)
 80012a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012a2:	4bab      	ldr	r3, [pc, #684]	; (8001550 <HAL_RCC_OscConfig+0x664>)
 80012a4:	2101      	movs	r1, #1
 80012a6:	430a      	orrs	r2, r1
 80012a8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012aa:	f7ff f81f 	bl	80002ec <HAL_GetTick>
 80012ae:	0003      	movs	r3, r0
 80012b0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x3da>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012b4:	f7ff f81a 	bl	80002ec <HAL_GetTick>
 80012b8:	0002      	movs	r2, r0
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x3da>
        {
          return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e1c7      	b.n	8001656 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012c6:	4ba2      	ldr	r3, [pc, #648]	; (8001550 <HAL_RCC_OscConfig+0x664>)
 80012c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012ca:	2202      	movs	r2, #2
 80012cc:	4013      	ands	r3, r2
 80012ce:	d0f1      	beq.n	80012b4 <HAL_RCC_OscConfig+0x3c8>
 80012d0:	e018      	b.n	8001304 <HAL_RCC_OscConfig+0x418>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012d2:	4b9f      	ldr	r3, [pc, #636]	; (8001550 <HAL_RCC_OscConfig+0x664>)
 80012d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012d6:	4b9e      	ldr	r3, [pc, #632]	; (8001550 <HAL_RCC_OscConfig+0x664>)
 80012d8:	2101      	movs	r1, #1
 80012da:	438a      	bics	r2, r1
 80012dc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012de:	f7ff f805 	bl	80002ec <HAL_GetTick>
 80012e2:	0003      	movs	r3, r0
 80012e4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0x40e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012e8:	f7ff f800 	bl	80002ec <HAL_GetTick>
 80012ec:	0002      	movs	r2, r0
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e1ad      	b.n	8001656 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012fa:	4b95      	ldr	r3, [pc, #596]	; (8001550 <HAL_RCC_OscConfig+0x664>)
 80012fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012fe:	2202      	movs	r2, #2
 8001300:	4013      	ands	r3, r2
 8001302:	d1f1      	bne.n	80012e8 <HAL_RCC_OscConfig+0x3fc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2204      	movs	r2, #4
 800130a:	4013      	ands	r3, r2
 800130c:	d100      	bne.n	8001310 <HAL_RCC_OscConfig+0x424>
 800130e:	e0ae      	b.n	800146e <HAL_RCC_OscConfig+0x582>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001310:	2027      	movs	r0, #39	; 0x27
 8001312:	183b      	adds	r3, r7, r0
 8001314:	2200      	movs	r2, #0
 8001316:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001318:	4b8d      	ldr	r3, [pc, #564]	; (8001550 <HAL_RCC_OscConfig+0x664>)
 800131a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	055b      	lsls	r3, r3, #21
 8001320:	4013      	ands	r3, r2
 8001322:	d109      	bne.n	8001338 <HAL_RCC_OscConfig+0x44c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001324:	4b8a      	ldr	r3, [pc, #552]	; (8001550 <HAL_RCC_OscConfig+0x664>)
 8001326:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001328:	4b89      	ldr	r3, [pc, #548]	; (8001550 <HAL_RCC_OscConfig+0x664>)
 800132a:	2180      	movs	r1, #128	; 0x80
 800132c:	0549      	lsls	r1, r1, #21
 800132e:	430a      	orrs	r2, r1
 8001330:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001332:	183b      	adds	r3, r7, r0
 8001334:	2201      	movs	r2, #1
 8001336:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001338:	4b87      	ldr	r3, [pc, #540]	; (8001558 <HAL_RCC_OscConfig+0x66c>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4013      	ands	r3, r2
 8001342:	d11a      	bne.n	800137a <HAL_RCC_OscConfig+0x48e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001344:	4b84      	ldr	r3, [pc, #528]	; (8001558 <HAL_RCC_OscConfig+0x66c>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4b83      	ldr	r3, [pc, #524]	; (8001558 <HAL_RCC_OscConfig+0x66c>)
 800134a:	2180      	movs	r1, #128	; 0x80
 800134c:	0049      	lsls	r1, r1, #1
 800134e:	430a      	orrs	r2, r1
 8001350:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001352:	f7fe ffcb 	bl	80002ec <HAL_GetTick>
 8001356:	0003      	movs	r3, r0
 8001358:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0x482>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800135c:	f7fe ffc6 	bl	80002ec <HAL_GetTick>
 8001360:	0002      	movs	r2, r0
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b64      	cmp	r3, #100	; 0x64
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x482>
        {
          return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e173      	b.n	8001656 <HAL_RCC_OscConfig+0x76a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800136e:	4b7a      	ldr	r3, [pc, #488]	; (8001558 <HAL_RCC_OscConfig+0x66c>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	2380      	movs	r3, #128	; 0x80
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	4013      	ands	r3, r2
 8001378:	d0f0      	beq.n	800135c <HAL_RCC_OscConfig+0x470>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	2380      	movs	r3, #128	; 0x80
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	429a      	cmp	r2, r3
 8001384:	d107      	bne.n	8001396 <HAL_RCC_OscConfig+0x4aa>
 8001386:	4b72      	ldr	r3, [pc, #456]	; (8001550 <HAL_RCC_OscConfig+0x664>)
 8001388:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800138a:	4b71      	ldr	r3, [pc, #452]	; (8001550 <HAL_RCC_OscConfig+0x664>)
 800138c:	2180      	movs	r1, #128	; 0x80
 800138e:	0049      	lsls	r1, r1, #1
 8001390:	430a      	orrs	r2, r1
 8001392:	651a      	str	r2, [r3, #80]	; 0x50
 8001394:	e031      	b.n	80013fa <HAL_RCC_OscConfig+0x50e>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d10c      	bne.n	80013b8 <HAL_RCC_OscConfig+0x4cc>
 800139e:	4b6c      	ldr	r3, [pc, #432]	; (8001550 <HAL_RCC_OscConfig+0x664>)
 80013a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013a2:	4b6b      	ldr	r3, [pc, #428]	; (8001550 <HAL_RCC_OscConfig+0x664>)
 80013a4:	496b      	ldr	r1, [pc, #428]	; (8001554 <HAL_RCC_OscConfig+0x668>)
 80013a6:	400a      	ands	r2, r1
 80013a8:	651a      	str	r2, [r3, #80]	; 0x50
 80013aa:	4b69      	ldr	r3, [pc, #420]	; (8001550 <HAL_RCC_OscConfig+0x664>)
 80013ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013ae:	4b68      	ldr	r3, [pc, #416]	; (8001550 <HAL_RCC_OscConfig+0x664>)
 80013b0:	496a      	ldr	r1, [pc, #424]	; (800155c <HAL_RCC_OscConfig+0x670>)
 80013b2:	400a      	ands	r2, r1
 80013b4:	651a      	str	r2, [r3, #80]	; 0x50
 80013b6:	e020      	b.n	80013fa <HAL_RCC_OscConfig+0x50e>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	23a0      	movs	r3, #160	; 0xa0
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d10e      	bne.n	80013e2 <HAL_RCC_OscConfig+0x4f6>
 80013c4:	4b62      	ldr	r3, [pc, #392]	; (8001550 <HAL_RCC_OscConfig+0x664>)
 80013c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013c8:	4b61      	ldr	r3, [pc, #388]	; (8001550 <HAL_RCC_OscConfig+0x664>)
 80013ca:	2180      	movs	r1, #128	; 0x80
 80013cc:	00c9      	lsls	r1, r1, #3
 80013ce:	430a      	orrs	r2, r1
 80013d0:	651a      	str	r2, [r3, #80]	; 0x50
 80013d2:	4b5f      	ldr	r3, [pc, #380]	; (8001550 <HAL_RCC_OscConfig+0x664>)
 80013d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013d6:	4b5e      	ldr	r3, [pc, #376]	; (8001550 <HAL_RCC_OscConfig+0x664>)
 80013d8:	2180      	movs	r1, #128	; 0x80
 80013da:	0049      	lsls	r1, r1, #1
 80013dc:	430a      	orrs	r2, r1
 80013de:	651a      	str	r2, [r3, #80]	; 0x50
 80013e0:	e00b      	b.n	80013fa <HAL_RCC_OscConfig+0x50e>
 80013e2:	4b5b      	ldr	r3, [pc, #364]	; (8001550 <HAL_RCC_OscConfig+0x664>)
 80013e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013e6:	4b5a      	ldr	r3, [pc, #360]	; (8001550 <HAL_RCC_OscConfig+0x664>)
 80013e8:	495a      	ldr	r1, [pc, #360]	; (8001554 <HAL_RCC_OscConfig+0x668>)
 80013ea:	400a      	ands	r2, r1
 80013ec:	651a      	str	r2, [r3, #80]	; 0x50
 80013ee:	4b58      	ldr	r3, [pc, #352]	; (8001550 <HAL_RCC_OscConfig+0x664>)
 80013f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013f2:	4b57      	ldr	r3, [pc, #348]	; (8001550 <HAL_RCC_OscConfig+0x664>)
 80013f4:	4959      	ldr	r1, [pc, #356]	; (800155c <HAL_RCC_OscConfig+0x670>)
 80013f6:	400a      	ands	r2, r1
 80013f8:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d015      	beq.n	800142e <HAL_RCC_OscConfig+0x542>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001402:	f7fe ff73 	bl	80002ec <HAL_GetTick>
 8001406:	0003      	movs	r3, r0
 8001408:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800140a:	e009      	b.n	8001420 <HAL_RCC_OscConfig+0x534>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800140c:	f7fe ff6e 	bl	80002ec <HAL_GetTick>
 8001410:	0002      	movs	r2, r0
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	4a52      	ldr	r2, [pc, #328]	; (8001560 <HAL_RCC_OscConfig+0x674>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x534>
        {
          return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e11a      	b.n	8001656 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001420:	4b4b      	ldr	r3, [pc, #300]	; (8001550 <HAL_RCC_OscConfig+0x664>)
 8001422:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001424:	2380      	movs	r3, #128	; 0x80
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4013      	ands	r3, r2
 800142a:	d0ef      	beq.n	800140c <HAL_RCC_OscConfig+0x520>
 800142c:	e014      	b.n	8001458 <HAL_RCC_OscConfig+0x56c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800142e:	f7fe ff5d 	bl	80002ec <HAL_GetTick>
 8001432:	0003      	movs	r3, r0
 8001434:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001436:	e009      	b.n	800144c <HAL_RCC_OscConfig+0x560>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001438:	f7fe ff58 	bl	80002ec <HAL_GetTick>
 800143c:	0002      	movs	r2, r0
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	4a47      	ldr	r2, [pc, #284]	; (8001560 <HAL_RCC_OscConfig+0x674>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x560>
        {
          return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e104      	b.n	8001656 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800144c:	4b40      	ldr	r3, [pc, #256]	; (8001550 <HAL_RCC_OscConfig+0x664>)
 800144e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4013      	ands	r3, r2
 8001456:	d1ef      	bne.n	8001438 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001458:	2327      	movs	r3, #39	; 0x27
 800145a:	18fb      	adds	r3, r7, r3
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d105      	bne.n	800146e <HAL_RCC_OscConfig+0x582>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001462:	4b3b      	ldr	r3, [pc, #236]	; (8001550 <HAL_RCC_OscConfig+0x664>)
 8001464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001466:	4b3a      	ldr	r3, [pc, #232]	; (8001550 <HAL_RCC_OscConfig+0x664>)
 8001468:	493e      	ldr	r1, [pc, #248]	; (8001564 <HAL_RCC_OscConfig+0x678>)
 800146a:	400a      	ands	r2, r1
 800146c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2220      	movs	r2, #32
 8001474:	4013      	ands	r3, r2
 8001476:	d049      	beq.n	800150c <HAL_RCC_OscConfig+0x620>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d026      	beq.n	80014ce <HAL_RCC_OscConfig+0x5e2>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001480:	4b33      	ldr	r3, [pc, #204]	; (8001550 <HAL_RCC_OscConfig+0x664>)
 8001482:	689a      	ldr	r2, [r3, #8]
 8001484:	4b32      	ldr	r3, [pc, #200]	; (8001550 <HAL_RCC_OscConfig+0x664>)
 8001486:	2101      	movs	r1, #1
 8001488:	430a      	orrs	r2, r1
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	4b30      	ldr	r3, [pc, #192]	; (8001550 <HAL_RCC_OscConfig+0x664>)
 800148e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001490:	4b2f      	ldr	r3, [pc, #188]	; (8001550 <HAL_RCC_OscConfig+0x664>)
 8001492:	2101      	movs	r1, #1
 8001494:	430a      	orrs	r2, r1
 8001496:	635a      	str	r2, [r3, #52]	; 0x34
 8001498:	4b33      	ldr	r3, [pc, #204]	; (8001568 <HAL_RCC_OscConfig+0x67c>)
 800149a:	6a1a      	ldr	r2, [r3, #32]
 800149c:	4b32      	ldr	r3, [pc, #200]	; (8001568 <HAL_RCC_OscConfig+0x67c>)
 800149e:	2180      	movs	r1, #128	; 0x80
 80014a0:	0189      	lsls	r1, r1, #6
 80014a2:	430a      	orrs	r2, r1
 80014a4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a6:	f7fe ff21 	bl	80002ec <HAL_GetTick>
 80014aa:	0003      	movs	r3, r0
 80014ac:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x5d6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014b0:	f7fe ff1c 	bl	80002ec <HAL_GetTick>
 80014b4:	0002      	movs	r2, r0
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x5d6>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e0c9      	b.n	8001656 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80014c2:	4b23      	ldr	r3, [pc, #140]	; (8001550 <HAL_RCC_OscConfig+0x664>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	2202      	movs	r2, #2
 80014c8:	4013      	ands	r3, r2
 80014ca:	d0f1      	beq.n	80014b0 <HAL_RCC_OscConfig+0x5c4>
 80014cc:	e01e      	b.n	800150c <HAL_RCC_OscConfig+0x620>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80014ce:	4b20      	ldr	r3, [pc, #128]	; (8001550 <HAL_RCC_OscConfig+0x664>)
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <HAL_RCC_OscConfig+0x664>)
 80014d4:	2101      	movs	r1, #1
 80014d6:	438a      	bics	r2, r1
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	4b23      	ldr	r3, [pc, #140]	; (8001568 <HAL_RCC_OscConfig+0x67c>)
 80014dc:	6a1a      	ldr	r2, [r3, #32]
 80014de:	4b22      	ldr	r3, [pc, #136]	; (8001568 <HAL_RCC_OscConfig+0x67c>)
 80014e0:	4922      	ldr	r1, [pc, #136]	; (800156c <HAL_RCC_OscConfig+0x680>)
 80014e2:	400a      	ands	r2, r1
 80014e4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e6:	f7fe ff01 	bl	80002ec <HAL_GetTick>
 80014ea:	0003      	movs	r3, r0
 80014ec:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x616>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014f0:	f7fe fefc 	bl	80002ec <HAL_GetTick>
 80014f4:	0002      	movs	r2, r0
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x616>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e0a9      	b.n	8001656 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <HAL_RCC_OscConfig+0x664>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	2202      	movs	r2, #2
 8001508:	4013      	ands	r3, r2
 800150a:	d1f1      	bne.n	80014f0 <HAL_RCC_OscConfig+0x604>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001510:	2b00      	cmp	r3, #0
 8001512:	d100      	bne.n	8001516 <HAL_RCC_OscConfig+0x62a>
 8001514:	e09e      	b.n	8001654 <HAL_RCC_OscConfig+0x768>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001516:	6a3b      	ldr	r3, [r7, #32]
 8001518:	2b0c      	cmp	r3, #12
 800151a:	d100      	bne.n	800151e <HAL_RCC_OscConfig+0x632>
 800151c:	e077      	b.n	800160e <HAL_RCC_OscConfig+0x722>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001522:	2b02      	cmp	r3, #2
 8001524:	d158      	bne.n	80015d8 <HAL_RCC_OscConfig+0x6ec>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001526:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <HAL_RCC_OscConfig+0x664>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <HAL_RCC_OscConfig+0x664>)
 800152c:	4910      	ldr	r1, [pc, #64]	; (8001570 <HAL_RCC_OscConfig+0x684>)
 800152e:	400a      	ands	r2, r1
 8001530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001532:	f7fe fedb 	bl	80002ec <HAL_GetTick>
 8001536:	0003      	movs	r3, r0
 8001538:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800153a:	e01b      	b.n	8001574 <HAL_RCC_OscConfig+0x688>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800153c:	f7fe fed6 	bl	80002ec <HAL_GetTick>
 8001540:	0002      	movs	r2, r0
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d914      	bls.n	8001574 <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e083      	b.n	8001656 <HAL_RCC_OscConfig+0x76a>
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	40021000 	.word	0x40021000
 8001554:	fffffeff 	.word	0xfffffeff
 8001558:	40007000 	.word	0x40007000
 800155c:	fffffbff 	.word	0xfffffbff
 8001560:	00001388 	.word	0x00001388
 8001564:	efffffff 	.word	0xefffffff
 8001568:	40010000 	.word	0x40010000
 800156c:	ffffdfff 	.word	0xffffdfff
 8001570:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001574:	4b3a      	ldr	r3, [pc, #232]	; (8001660 <HAL_RCC_OscConfig+0x774>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	049b      	lsls	r3, r3, #18
 800157c:	4013      	ands	r3, r2
 800157e:	d1dd      	bne.n	800153c <HAL_RCC_OscConfig+0x650>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001580:	4b37      	ldr	r3, [pc, #220]	; (8001660 <HAL_RCC_OscConfig+0x774>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	4a37      	ldr	r2, [pc, #220]	; (8001664 <HAL_RCC_OscConfig+0x778>)
 8001586:	4013      	ands	r3, r2
 8001588:	0019      	movs	r1, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	431a      	orrs	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001598:	431a      	orrs	r2, r3
 800159a:	4b31      	ldr	r3, [pc, #196]	; (8001660 <HAL_RCC_OscConfig+0x774>)
 800159c:	430a      	orrs	r2, r1
 800159e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015a0:	4b2f      	ldr	r3, [pc, #188]	; (8001660 <HAL_RCC_OscConfig+0x774>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4b2e      	ldr	r3, [pc, #184]	; (8001660 <HAL_RCC_OscConfig+0x774>)
 80015a6:	2180      	movs	r1, #128	; 0x80
 80015a8:	0449      	lsls	r1, r1, #17
 80015aa:	430a      	orrs	r2, r1
 80015ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ae:	f7fe fe9d 	bl	80002ec <HAL_GetTick>
 80015b2:	0003      	movs	r3, r0
 80015b4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b8:	f7fe fe98 	bl	80002ec <HAL_GetTick>
 80015bc:	0002      	movs	r2, r0
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x6de>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e045      	b.n	8001656 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80015ca:	4b25      	ldr	r3, [pc, #148]	; (8001660 <HAL_RCC_OscConfig+0x774>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	049b      	lsls	r3, r3, #18
 80015d2:	4013      	ands	r3, r2
 80015d4:	d0f0      	beq.n	80015b8 <HAL_RCC_OscConfig+0x6cc>
 80015d6:	e03d      	b.n	8001654 <HAL_RCC_OscConfig+0x768>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d8:	4b21      	ldr	r3, [pc, #132]	; (8001660 <HAL_RCC_OscConfig+0x774>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4b20      	ldr	r3, [pc, #128]	; (8001660 <HAL_RCC_OscConfig+0x774>)
 80015de:	4922      	ldr	r1, [pc, #136]	; (8001668 <HAL_RCC_OscConfig+0x77c>)
 80015e0:	400a      	ands	r2, r1
 80015e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e4:	f7fe fe82 	bl	80002ec <HAL_GetTick>
 80015e8:	0003      	movs	r3, r0
 80015ea:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ee:	f7fe fe7d 	bl	80002ec <HAL_GetTick>
 80015f2:	0002      	movs	r2, r0
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e02a      	b.n	8001656 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001600:	4b17      	ldr	r3, [pc, #92]	; (8001660 <HAL_RCC_OscConfig+0x774>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	2380      	movs	r3, #128	; 0x80
 8001606:	049b      	lsls	r3, r3, #18
 8001608:	4013      	ands	r3, r2
 800160a:	d1f0      	bne.n	80015ee <HAL_RCC_OscConfig+0x702>
 800160c:	e022      	b.n	8001654 <HAL_RCC_OscConfig+0x768>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001612:	2b01      	cmp	r3, #1
 8001614:	d101      	bne.n	800161a <HAL_RCC_OscConfig+0x72e>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e01d      	b.n	8001656 <HAL_RCC_OscConfig+0x76a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800161a:	4b11      	ldr	r3, [pc, #68]	; (8001660 <HAL_RCC_OscConfig+0x774>)
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001620:	69fa      	ldr	r2, [r7, #28]
 8001622:	2380      	movs	r3, #128	; 0x80
 8001624:	025b      	lsls	r3, r3, #9
 8001626:	401a      	ands	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162c:	429a      	cmp	r2, r3
 800162e:	d10f      	bne.n	8001650 <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001630:	69fa      	ldr	r2, [r7, #28]
 8001632:	23f0      	movs	r3, #240	; 0xf0
 8001634:	039b      	lsls	r3, r3, #14
 8001636:	401a      	ands	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800163c:	429a      	cmp	r2, r3
 800163e:	d107      	bne.n	8001650 <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001640:	69fa      	ldr	r2, [r7, #28]
 8001642:	23c0      	movs	r3, #192	; 0xc0
 8001644:	041b      	lsls	r3, r3, #16
 8001646:	401a      	ands	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800164c:	429a      	cmp	r2, r3
 800164e:	d001      	beq.n	8001654 <HAL_RCC_OscConfig+0x768>
        {
          return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e000      	b.n	8001656 <HAL_RCC_OscConfig+0x76a>
        }
      }
    }
  }

  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	0018      	movs	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	b00a      	add	sp, #40	; 0x28
 800165c:	bdb0      	pop	{r4, r5, r7, pc}
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	40021000 	.word	0x40021000
 8001664:	ff02ffff 	.word	0xff02ffff
 8001668:	feffffff 	.word	0xfeffffff

0800166c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800166c:	b5b0      	push	{r4, r5, r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d101      	bne.n	8001680 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e10d      	b.n	800189c <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001680:	4b88      	ldr	r3, [pc, #544]	; (80018a4 <HAL_RCC_ClockConfig+0x238>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2201      	movs	r2, #1
 8001686:	4013      	ands	r3, r2
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	429a      	cmp	r2, r3
 800168c:	d911      	bls.n	80016b2 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168e:	4b85      	ldr	r3, [pc, #532]	; (80018a4 <HAL_RCC_ClockConfig+0x238>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2201      	movs	r2, #1
 8001694:	4393      	bics	r3, r2
 8001696:	0019      	movs	r1, r3
 8001698:	4b82      	ldr	r3, [pc, #520]	; (80018a4 <HAL_RCC_ClockConfig+0x238>)
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	430a      	orrs	r2, r1
 800169e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a0:	4b80      	ldr	r3, [pc, #512]	; (80018a4 <HAL_RCC_ClockConfig+0x238>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2201      	movs	r2, #1
 80016a6:	4013      	ands	r3, r2
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d001      	beq.n	80016b2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e0f4      	b.n	800189c <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2202      	movs	r2, #2
 80016b8:	4013      	ands	r3, r2
 80016ba:	d009      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016bc:	4b7a      	ldr	r3, [pc, #488]	; (80018a8 <HAL_RCC_ClockConfig+0x23c>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	22f0      	movs	r2, #240	; 0xf0
 80016c2:	4393      	bics	r3, r2
 80016c4:	0019      	movs	r1, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	4b77      	ldr	r3, [pc, #476]	; (80018a8 <HAL_RCC_ClockConfig+0x23c>)
 80016cc:	430a      	orrs	r2, r1
 80016ce:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2201      	movs	r2, #1
 80016d6:	4013      	ands	r3, r2
 80016d8:	d100      	bne.n	80016dc <HAL_RCC_ClockConfig+0x70>
 80016da:	e089      	b.n	80017f0 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d107      	bne.n	80016f4 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016e4:	4b70      	ldr	r3, [pc, #448]	; (80018a8 <HAL_RCC_ClockConfig+0x23c>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	2380      	movs	r3, #128	; 0x80
 80016ea:	029b      	lsls	r3, r3, #10
 80016ec:	4013      	ands	r3, r2
 80016ee:	d120      	bne.n	8001732 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e0d3      	b.n	800189c <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b03      	cmp	r3, #3
 80016fa:	d107      	bne.n	800170c <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016fc:	4b6a      	ldr	r3, [pc, #424]	; (80018a8 <HAL_RCC_ClockConfig+0x23c>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	2380      	movs	r3, #128	; 0x80
 8001702:	049b      	lsls	r3, r3, #18
 8001704:	4013      	ands	r3, r2
 8001706:	d114      	bne.n	8001732 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e0c7      	b.n	800189c <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d106      	bne.n	8001722 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001714:	4b64      	ldr	r3, [pc, #400]	; (80018a8 <HAL_RCC_ClockConfig+0x23c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2204      	movs	r2, #4
 800171a:	4013      	ands	r3, r2
 800171c:	d109      	bne.n	8001732 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e0bc      	b.n	800189c <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001722:	4b61      	ldr	r3, [pc, #388]	; (80018a8 <HAL_RCC_ClockConfig+0x23c>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	2380      	movs	r3, #128	; 0x80
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4013      	ands	r3, r2
 800172c:	d101      	bne.n	8001732 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e0b4      	b.n	800189c <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001732:	4b5d      	ldr	r3, [pc, #372]	; (80018a8 <HAL_RCC_ClockConfig+0x23c>)
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	2203      	movs	r2, #3
 8001738:	4393      	bics	r3, r2
 800173a:	0019      	movs	r1, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	4b59      	ldr	r3, [pc, #356]	; (80018a8 <HAL_RCC_ClockConfig+0x23c>)
 8001742:	430a      	orrs	r2, r1
 8001744:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001746:	f7fe fdd1 	bl	80002ec <HAL_GetTick>
 800174a:	0003      	movs	r3, r0
 800174c:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d111      	bne.n	800177a <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001756:	e009      	b.n	800176c <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001758:	f7fe fdc8 	bl	80002ec <HAL_GetTick>
 800175c:	0002      	movs	r2, r0
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	4a52      	ldr	r2, [pc, #328]	; (80018ac <HAL_RCC_ClockConfig+0x240>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d901      	bls.n	800176c <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e097      	b.n	800189c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800176c:	4b4e      	ldr	r3, [pc, #312]	; (80018a8 <HAL_RCC_ClockConfig+0x23c>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	220c      	movs	r2, #12
 8001772:	4013      	ands	r3, r2
 8001774:	2b08      	cmp	r3, #8
 8001776:	d1ef      	bne.n	8001758 <HAL_RCC_ClockConfig+0xec>
 8001778:	e03a      	b.n	80017f0 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b03      	cmp	r3, #3
 8001780:	d111      	bne.n	80017a6 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001782:	e009      	b.n	8001798 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001784:	f7fe fdb2 	bl	80002ec <HAL_GetTick>
 8001788:	0002      	movs	r2, r0
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	4a47      	ldr	r2, [pc, #284]	; (80018ac <HAL_RCC_ClockConfig+0x240>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e081      	b.n	800189c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001798:	4b43      	ldr	r3, [pc, #268]	; (80018a8 <HAL_RCC_ClockConfig+0x23c>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	220c      	movs	r2, #12
 800179e:	4013      	ands	r3, r2
 80017a0:	2b0c      	cmp	r3, #12
 80017a2:	d1ef      	bne.n	8001784 <HAL_RCC_ClockConfig+0x118>
 80017a4:	e024      	b.n	80017f0 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d11b      	bne.n	80017e6 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ae:	e009      	b.n	80017c4 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b0:	f7fe fd9c 	bl	80002ec <HAL_GetTick>
 80017b4:	0002      	movs	r2, r0
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	4a3c      	ldr	r2, [pc, #240]	; (80018ac <HAL_RCC_ClockConfig+0x240>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e06b      	b.n	800189c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80017c4:	4b38      	ldr	r3, [pc, #224]	; (80018a8 <HAL_RCC_ClockConfig+0x23c>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	220c      	movs	r2, #12
 80017ca:	4013      	ands	r3, r2
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d1ef      	bne.n	80017b0 <HAL_RCC_ClockConfig+0x144>
 80017d0:	e00e      	b.n	80017f0 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017d2:	f7fe fd8b 	bl	80002ec <HAL_GetTick>
 80017d6:	0002      	movs	r2, r0
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	4a33      	ldr	r2, [pc, #204]	; (80018ac <HAL_RCC_ClockConfig+0x240>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e05a      	b.n	800189c <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80017e6:	4b30      	ldr	r3, [pc, #192]	; (80018a8 <HAL_RCC_ClockConfig+0x23c>)
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	220c      	movs	r2, #12
 80017ec:	4013      	ands	r3, r2
 80017ee:	d1f0      	bne.n	80017d2 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017f0:	4b2c      	ldr	r3, [pc, #176]	; (80018a4 <HAL_RCC_ClockConfig+0x238>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2201      	movs	r2, #1
 80017f6:	4013      	ands	r3, r2
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d211      	bcs.n	8001822 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fe:	4b29      	ldr	r3, [pc, #164]	; (80018a4 <HAL_RCC_ClockConfig+0x238>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2201      	movs	r2, #1
 8001804:	4393      	bics	r3, r2
 8001806:	0019      	movs	r1, r3
 8001808:	4b26      	ldr	r3, [pc, #152]	; (80018a4 <HAL_RCC_ClockConfig+0x238>)
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	430a      	orrs	r2, r1
 800180e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001810:	4b24      	ldr	r3, [pc, #144]	; (80018a4 <HAL_RCC_ClockConfig+0x238>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2201      	movs	r2, #1
 8001816:	4013      	ands	r3, r2
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	429a      	cmp	r2, r3
 800181c:	d001      	beq.n	8001822 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e03c      	b.n	800189c <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2204      	movs	r2, #4
 8001828:	4013      	ands	r3, r2
 800182a:	d009      	beq.n	8001840 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800182c:	4b1e      	ldr	r3, [pc, #120]	; (80018a8 <HAL_RCC_ClockConfig+0x23c>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	4a1f      	ldr	r2, [pc, #124]	; (80018b0 <HAL_RCC_ClockConfig+0x244>)
 8001832:	4013      	ands	r3, r2
 8001834:	0019      	movs	r1, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68da      	ldr	r2, [r3, #12]
 800183a:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <HAL_RCC_ClockConfig+0x23c>)
 800183c:	430a      	orrs	r2, r1
 800183e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2208      	movs	r2, #8
 8001846:	4013      	ands	r3, r2
 8001848:	d00a      	beq.n	8001860 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800184a:	4b17      	ldr	r3, [pc, #92]	; (80018a8 <HAL_RCC_ClockConfig+0x23c>)
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	4a19      	ldr	r2, [pc, #100]	; (80018b4 <HAL_RCC_ClockConfig+0x248>)
 8001850:	4013      	ands	r3, r2
 8001852:	0019      	movs	r1, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	00da      	lsls	r2, r3, #3
 800185a:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <HAL_RCC_ClockConfig+0x23c>)
 800185c:	430a      	orrs	r2, r1
 800185e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001860:	f000 f82e 	bl	80018c0 <HAL_RCC_GetSysClockFreq>
 8001864:	0001      	movs	r1, r0
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <HAL_RCC_ClockConfig+0x23c>)
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	091b      	lsrs	r3, r3, #4
 800186c:	220f      	movs	r2, #15
 800186e:	4013      	ands	r3, r2
 8001870:	4a11      	ldr	r2, [pc, #68]	; (80018b8 <HAL_RCC_ClockConfig+0x24c>)
 8001872:	5cd3      	ldrb	r3, [r2, r3]
 8001874:	000a      	movs	r2, r1
 8001876:	40da      	lsrs	r2, r3
 8001878:	4b10      	ldr	r3, [pc, #64]	; (80018bc <HAL_RCC_ClockConfig+0x250>)
 800187a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 800187c:	250b      	movs	r5, #11
 800187e:	197c      	adds	r4, r7, r5
 8001880:	2000      	movs	r0, #0
 8001882:	f7fe fced 	bl	8000260 <HAL_InitTick>
 8001886:	0003      	movs	r3, r0
 8001888:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800188a:	002a      	movs	r2, r5
 800188c:	18bb      	adds	r3, r7, r2
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d002      	beq.n	800189a <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8001894:	18bb      	adds	r3, r7, r2
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	e000      	b.n	800189c <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 800189a:	2300      	movs	r3, #0
}
 800189c:	0018      	movs	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	b004      	add	sp, #16
 80018a2:	bdb0      	pop	{r4, r5, r7, pc}
 80018a4:	40022000 	.word	0x40022000
 80018a8:	40021000 	.word	0x40021000
 80018ac:	00001388 	.word	0x00001388
 80018b0:	fffff8ff 	.word	0xfffff8ff
 80018b4:	ffffc7ff 	.word	0xffffc7ff
 80018b8:	080022b0 	.word	0x080022b0
 80018bc:	20000008 	.word	0x20000008

080018c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80018c6:	4b3c      	ldr	r3, [pc, #240]	; (80019b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	220c      	movs	r2, #12
 80018d0:	4013      	ands	r3, r2
 80018d2:	2b0c      	cmp	r3, #12
 80018d4:	d013      	beq.n	80018fe <HAL_RCC_GetSysClockFreq+0x3e>
 80018d6:	d85c      	bhi.n	8001992 <HAL_RCC_GetSysClockFreq+0xd2>
 80018d8:	2b04      	cmp	r3, #4
 80018da:	d002      	beq.n	80018e2 <HAL_RCC_GetSysClockFreq+0x22>
 80018dc:	2b08      	cmp	r3, #8
 80018de:	d00b      	beq.n	80018f8 <HAL_RCC_GetSysClockFreq+0x38>
 80018e0:	e057      	b.n	8001992 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80018e2:	4b35      	ldr	r3, [pc, #212]	; (80019b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2210      	movs	r2, #16
 80018e8:	4013      	ands	r3, r2
 80018ea:	d002      	beq.n	80018f2 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80018ec:	4b33      	ldr	r3, [pc, #204]	; (80019bc <HAL_RCC_GetSysClockFreq+0xfc>)
 80018ee:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80018f0:	e05d      	b.n	80019ae <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 80018f2:	4b33      	ldr	r3, [pc, #204]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x100>)
 80018f4:	613b      	str	r3, [r7, #16]
      break;
 80018f6:	e05a      	b.n	80019ae <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018f8:	4b32      	ldr	r3, [pc, #200]	; (80019c4 <HAL_RCC_GetSysClockFreq+0x104>)
 80018fa:	613b      	str	r3, [r7, #16]
      break;
 80018fc:	e057      	b.n	80019ae <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	0c9b      	lsrs	r3, r3, #18
 8001902:	220f      	movs	r2, #15
 8001904:	4013      	ands	r3, r2
 8001906:	4a30      	ldr	r2, [pc, #192]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001908:	5cd3      	ldrb	r3, [r2, r3]
 800190a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	0d9b      	lsrs	r3, r3, #22
 8001910:	2203      	movs	r2, #3
 8001912:	4013      	ands	r3, r2
 8001914:	3301      	adds	r3, #1
 8001916:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001918:	4b27      	ldr	r3, [pc, #156]	; (80019b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800191a:	68da      	ldr	r2, [r3, #12]
 800191c:	2380      	movs	r3, #128	; 0x80
 800191e:	025b      	lsls	r3, r3, #9
 8001920:	4013      	ands	r3, r2
 8001922:	d00f      	beq.n	8001944 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8001924:	68b9      	ldr	r1, [r7, #8]
 8001926:	000a      	movs	r2, r1
 8001928:	0152      	lsls	r2, r2, #5
 800192a:	1a52      	subs	r2, r2, r1
 800192c:	0193      	lsls	r3, r2, #6
 800192e:	1a9b      	subs	r3, r3, r2
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	185b      	adds	r3, r3, r1
 8001934:	025b      	lsls	r3, r3, #9
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	0018      	movs	r0, r3
 800193a:	f7fe fbe5 	bl	8000108 <__udivsi3>
 800193e:	0003      	movs	r3, r0
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	e023      	b.n	800198c <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001944:	4b1c      	ldr	r3, [pc, #112]	; (80019b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2210      	movs	r2, #16
 800194a:	4013      	ands	r3, r2
 800194c:	d00f      	beq.n	800196e <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800194e:	68b9      	ldr	r1, [r7, #8]
 8001950:	000a      	movs	r2, r1
 8001952:	0152      	lsls	r2, r2, #5
 8001954:	1a52      	subs	r2, r2, r1
 8001956:	0193      	lsls	r3, r2, #6
 8001958:	1a9b      	subs	r3, r3, r2
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	185b      	adds	r3, r3, r1
 800195e:	021b      	lsls	r3, r3, #8
 8001960:	6879      	ldr	r1, [r7, #4]
 8001962:	0018      	movs	r0, r3
 8001964:	f7fe fbd0 	bl	8000108 <__udivsi3>
 8001968:	0003      	movs	r3, r0
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	e00e      	b.n	800198c <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 800196e:	68b9      	ldr	r1, [r7, #8]
 8001970:	000a      	movs	r2, r1
 8001972:	0152      	lsls	r2, r2, #5
 8001974:	1a52      	subs	r2, r2, r1
 8001976:	0193      	lsls	r3, r2, #6
 8001978:	1a9b      	subs	r3, r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	185b      	adds	r3, r3, r1
 800197e:	029b      	lsls	r3, r3, #10
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	0018      	movs	r0, r3
 8001984:	f7fe fbc0 	bl	8000108 <__udivsi3>
 8001988:	0003      	movs	r3, r0
 800198a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	613b      	str	r3, [r7, #16]
      break;
 8001990:	e00d      	b.n	80019ae <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001992:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	0b5b      	lsrs	r3, r3, #13
 8001998:	2207      	movs	r2, #7
 800199a:	4013      	ands	r3, r2
 800199c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	3301      	adds	r3, #1
 80019a2:	2280      	movs	r2, #128	; 0x80
 80019a4:	0212      	lsls	r2, r2, #8
 80019a6:	409a      	lsls	r2, r3
 80019a8:	0013      	movs	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
      break;
 80019ac:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80019ae:	693b      	ldr	r3, [r7, #16]
}
 80019b0:	0018      	movs	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	b006      	add	sp, #24
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40021000 	.word	0x40021000
 80019bc:	003d0900 	.word	0x003d0900
 80019c0:	00f42400 	.word	0x00f42400
 80019c4:	007a1200 	.word	0x007a1200
 80019c8:	080022c0 	.word	0x080022c0

080019cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019d2:	f7fe fc25 	bl	8000220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019d6:	f000 fa59 	bl	8001e8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019da:	f000 fb11 	bl	8002000 <MX_GPIO_Init>
  MX_ADC_Init();
 80019de:	f000 faa9 	bl	8001f34 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
   uint16_t readValue;
   HAL_ADC_Start(&hadc);
 80019e2:	4bd2      	ldr	r3, [pc, #840]	; (8001d2c <main+0x360>)
 80019e4:	0018      	movs	r0, r3
 80019e6:	f7fe fe23 	bl	8000630 <HAL_ADC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while (1)
   {
 	  HAL_ADC_PollForConversion(&hadc,1000);
 80019ea:	23fa      	movs	r3, #250	; 0xfa
 80019ec:	009a      	lsls	r2, r3, #2
 80019ee:	4bcf      	ldr	r3, [pc, #828]	; (8001d2c <main+0x360>)
 80019f0:	0011      	movs	r1, r2
 80019f2:	0018      	movs	r0, r3
 80019f4:	f7fe fe70 	bl	80006d8 <HAL_ADC_PollForConversion>
 	  readValue = HAL_ADC_GetValue(&hadc);
 80019f8:	4bcc      	ldr	r3, [pc, #816]	; (8001d2c <main+0x360>)
 80019fa:	0018      	movs	r0, r3
 80019fc:	f7fe ff02 	bl	8000804 <HAL_ADC_GetValue>
 8001a00:	0002      	movs	r2, r0
 8001a02:	1dbb      	adds	r3, r7, #6
 8001a04:	801a      	strh	r2, [r3, #0]

   	  if (readValue < 10) {
 8001a06:	1dbb      	adds	r3, r7, #6
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	2b09      	cmp	r3, #9
 8001a0c:	d834      	bhi.n	8001a78 <main+0xac>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8001a0e:	23a0      	movs	r3, #160	; 0xa0
 8001a10:	05db      	lsls	r3, r3, #23
 8001a12:	2200      	movs	r2, #0
 8001a14:	2102      	movs	r1, #2
 8001a16:	0018      	movs	r0, r3
 8001a18:	f7ff fa4a 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8001a1c:	23a0      	movs	r3, #160	; 0xa0
 8001a1e:	05db      	lsls	r3, r3, #23
 8001a20:	2201      	movs	r2, #1
 8001a22:	2104      	movs	r1, #4
 8001a24:	0018      	movs	r0, r3
 8001a26:	f7ff fa43 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 8001a2a:	23a0      	movs	r3, #160	; 0xa0
 8001a2c:	05db      	lsls	r3, r3, #23
 8001a2e:	2201      	movs	r2, #1
 8001a30:	2108      	movs	r1, #8
 8001a32:	0018      	movs	r0, r3
 8001a34:	f7ff fa3c 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001a38:	23a0      	movs	r3, #160	; 0xa0
 8001a3a:	05db      	lsls	r3, r3, #23
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	2110      	movs	r1, #16
 8001a40:	0018      	movs	r0, r3
 8001a42:	f7ff fa35 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8001a46:	2380      	movs	r3, #128	; 0x80
 8001a48:	0059      	lsls	r1, r3, #1
 8001a4a:	23a0      	movs	r3, #160	; 0xa0
 8001a4c:	05db      	lsls	r3, r3, #23
 8001a4e:	2201      	movs	r2, #1
 8001a50:	0018      	movs	r0, r3
 8001a52:	f7ff fa2d 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8001a56:	2380      	movs	r3, #128	; 0x80
 8001a58:	0099      	lsls	r1, r3, #2
 8001a5a:	23a0      	movs	r3, #160	; 0xa0
 8001a5c:	05db      	lsls	r3, r3, #23
 8001a5e:	2201      	movs	r2, #1
 8001a60:	0018      	movs	r0, r3
 8001a62:	f7ff fa25 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 8001a66:	2380      	movs	r3, #128	; 0x80
 8001a68:	00d9      	lsls	r1, r3, #3
 8001a6a:	23a0      	movs	r3, #160	; 0xa0
 8001a6c:	05db      	lsls	r3, r3, #23
 8001a6e:	2201      	movs	r2, #1
 8001a70:	0018      	movs	r0, r3
 8001a72:	f7ff fa1d 	bl	8000eb0 <HAL_GPIO_WritePin>
 8001a76:	e205      	b.n	8001e84 <main+0x4b8>
 	  }
 	  else if (readValue < 80 ) {
 8001a78:	1dbb      	adds	r3, r7, #6
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	2b4f      	cmp	r3, #79	; 0x4f
 8001a7e:	d834      	bhi.n	8001aea <main+0x11e>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8001a80:	23a0      	movs	r3, #160	; 0xa0
 8001a82:	05db      	lsls	r3, r3, #23
 8001a84:	2200      	movs	r2, #0
 8001a86:	2102      	movs	r1, #2
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f7ff fa11 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8001a8e:	23a0      	movs	r3, #160	; 0xa0
 8001a90:	05db      	lsls	r3, r3, #23
 8001a92:	2200      	movs	r2, #0
 8001a94:	2104      	movs	r1, #4
 8001a96:	0018      	movs	r0, r3
 8001a98:	f7ff fa0a 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8001a9c:	23a0      	movs	r3, #160	; 0xa0
 8001a9e:	05db      	lsls	r3, r3, #23
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2108      	movs	r1, #8
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	f7ff fa03 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001aaa:	23a0      	movs	r3, #160	; 0xa0
 8001aac:	05db      	lsls	r3, r3, #23
 8001aae:	2201      	movs	r2, #1
 8001ab0:	2110      	movs	r1, #16
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	f7ff f9fc 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	0059      	lsls	r1, r3, #1
 8001abc:	23a0      	movs	r3, #160	; 0xa0
 8001abe:	05db      	lsls	r3, r3, #23
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f7ff f9f4 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8001ac8:	2380      	movs	r3, #128	; 0x80
 8001aca:	0099      	lsls	r1, r3, #2
 8001acc:	23a0      	movs	r3, #160	; 0xa0
 8001ace:	05db      	lsls	r3, r3, #23
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	f7ff f9ec 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 8001ad8:	2380      	movs	r3, #128	; 0x80
 8001ada:	00d9      	lsls	r1, r3, #3
 8001adc:	23a0      	movs	r3, #160	; 0xa0
 8001ade:	05db      	lsls	r3, r3, #23
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	f7ff f9e4 	bl	8000eb0 <HAL_GPIO_WritePin>
 8001ae8:	e1cc      	b.n	8001e84 <main+0x4b8>
 	  }
 	  else if (readValue < 150 ) {
 8001aea:	1dbb      	adds	r3, r7, #6
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	2b95      	cmp	r3, #149	; 0x95
 8001af0:	d834      	bhi.n	8001b5c <main+0x190>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8001af2:	23a0      	movs	r3, #160	; 0xa0
 8001af4:	05db      	lsls	r3, r3, #23
 8001af6:	2201      	movs	r2, #1
 8001af8:	2102      	movs	r1, #2
 8001afa:	0018      	movs	r0, r3
 8001afc:	f7ff f9d8 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8001b00:	23a0      	movs	r3, #160	; 0xa0
 8001b02:	05db      	lsls	r3, r3, #23
 8001b04:	2200      	movs	r2, #0
 8001b06:	2104      	movs	r1, #4
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f7ff f9d1 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 8001b0e:	23a0      	movs	r3, #160	; 0xa0
 8001b10:	05db      	lsls	r3, r3, #23
 8001b12:	2201      	movs	r2, #1
 8001b14:	2108      	movs	r1, #8
 8001b16:	0018      	movs	r0, r3
 8001b18:	f7ff f9ca 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001b1c:	23a0      	movs	r3, #160	; 0xa0
 8001b1e:	05db      	lsls	r3, r3, #23
 8001b20:	2201      	movs	r2, #1
 8001b22:	2110      	movs	r1, #16
 8001b24:	0018      	movs	r0, r3
 8001b26:	f7ff f9c3 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8001b2a:	2380      	movs	r3, #128	; 0x80
 8001b2c:	0059      	lsls	r1, r3, #1
 8001b2e:	23a0      	movs	r3, #160	; 0xa0
 8001b30:	05db      	lsls	r3, r3, #23
 8001b32:	2200      	movs	r2, #0
 8001b34:	0018      	movs	r0, r3
 8001b36:	f7ff f9bb 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8001b3a:	2380      	movs	r3, #128	; 0x80
 8001b3c:	0099      	lsls	r1, r3, #2
 8001b3e:	23a0      	movs	r3, #160	; 0xa0
 8001b40:	05db      	lsls	r3, r3, #23
 8001b42:	2201      	movs	r2, #1
 8001b44:	0018      	movs	r0, r3
 8001b46:	f7ff f9b3 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 8001b4a:	2380      	movs	r3, #128	; 0x80
 8001b4c:	00d9      	lsls	r1, r3, #3
 8001b4e:	23a0      	movs	r3, #160	; 0xa0
 8001b50:	05db      	lsls	r3, r3, #23
 8001b52:	2201      	movs	r2, #1
 8001b54:	0018      	movs	r0, r3
 8001b56:	f7ff f9ab 	bl	8000eb0 <HAL_GPIO_WritePin>
 8001b5a:	e193      	b.n	8001e84 <main+0x4b8>
 	  }
 	  else if (readValue < 200 ) {
 8001b5c:	1dbb      	adds	r3, r7, #6
 8001b5e:	881b      	ldrh	r3, [r3, #0]
 8001b60:	2bc7      	cmp	r3, #199	; 0xc7
 8001b62:	d834      	bhi.n	8001bce <main+0x202>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8001b64:	23a0      	movs	r3, #160	; 0xa0
 8001b66:	05db      	lsls	r3, r3, #23
 8001b68:	2201      	movs	r2, #1
 8001b6a:	2102      	movs	r1, #2
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f7ff f99f 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8001b72:	23a0      	movs	r3, #160	; 0xa0
 8001b74:	05db      	lsls	r3, r3, #23
 8001b76:	2200      	movs	r2, #0
 8001b78:	2104      	movs	r1, #4
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	f7ff f998 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 8001b80:	23a0      	movs	r3, #160	; 0xa0
 8001b82:	05db      	lsls	r3, r3, #23
 8001b84:	2201      	movs	r2, #1
 8001b86:	2108      	movs	r1, #8
 8001b88:	0018      	movs	r0, r3
 8001b8a:	f7ff f991 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001b8e:	23a0      	movs	r3, #160	; 0xa0
 8001b90:	05db      	lsls	r3, r3, #23
 8001b92:	2201      	movs	r2, #1
 8001b94:	2110      	movs	r1, #16
 8001b96:	0018      	movs	r0, r3
 8001b98:	f7ff f98a 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8001b9c:	2380      	movs	r3, #128	; 0x80
 8001b9e:	0059      	lsls	r1, r3, #1
 8001ba0:	23a0      	movs	r3, #160	; 0xa0
 8001ba2:	05db      	lsls	r3, r3, #23
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	f7ff f982 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8001bac:	2380      	movs	r3, #128	; 0x80
 8001bae:	0099      	lsls	r1, r3, #2
 8001bb0:	23a0      	movs	r3, #160	; 0xa0
 8001bb2:	05db      	lsls	r3, r3, #23
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	f7ff f97a 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 8001bbc:	2380      	movs	r3, #128	; 0x80
 8001bbe:	00d9      	lsls	r1, r3, #3
 8001bc0:	23a0      	movs	r3, #160	; 0xa0
 8001bc2:	05db      	lsls	r3, r3, #23
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	f7ff f972 	bl	8000eb0 <HAL_GPIO_WritePin>
 8001bcc:	e15a      	b.n	8001e84 <main+0x4b8>
 	  }
 	  else if (readValue < 250 ) {
 8001bce:	1dbb      	adds	r3, r7, #6
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	2bf9      	cmp	r3, #249	; 0xf9
 8001bd4:	d834      	bhi.n	8001c40 <main+0x274>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8001bd6:	23a0      	movs	r3, #160	; 0xa0
 8001bd8:	05db      	lsls	r3, r3, #23
 8001bda:	2201      	movs	r2, #1
 8001bdc:	2102      	movs	r1, #2
 8001bde:	0018      	movs	r0, r3
 8001be0:	f7ff f966 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8001be4:	23a0      	movs	r3, #160	; 0xa0
 8001be6:	05db      	lsls	r3, r3, #23
 8001be8:	2201      	movs	r2, #1
 8001bea:	2104      	movs	r1, #4
 8001bec:	0018      	movs	r0, r3
 8001bee:	f7ff f95f 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8001bf2:	23a0      	movs	r3, #160	; 0xa0
 8001bf4:	05db      	lsls	r3, r3, #23
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2108      	movs	r1, #8
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	f7ff f958 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001c00:	23a0      	movs	r3, #160	; 0xa0
 8001c02:	05db      	lsls	r3, r3, #23
 8001c04:	2201      	movs	r2, #1
 8001c06:	2110      	movs	r1, #16
 8001c08:	0018      	movs	r0, r3
 8001c0a:	f7ff f951 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8001c0e:	2380      	movs	r3, #128	; 0x80
 8001c10:	0059      	lsls	r1, r3, #1
 8001c12:	23a0      	movs	r3, #160	; 0xa0
 8001c14:	05db      	lsls	r3, r3, #23
 8001c16:	2201      	movs	r2, #1
 8001c18:	0018      	movs	r0, r3
 8001c1a:	f7ff f949 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8001c1e:	2380      	movs	r3, #128	; 0x80
 8001c20:	0099      	lsls	r1, r3, #2
 8001c22:	23a0      	movs	r3, #160	; 0xa0
 8001c24:	05db      	lsls	r3, r3, #23
 8001c26:	2200      	movs	r2, #0
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f7ff f941 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 8001c2e:	2380      	movs	r3, #128	; 0x80
 8001c30:	00d9      	lsls	r1, r3, #3
 8001c32:	23a0      	movs	r3, #160	; 0xa0
 8001c34:	05db      	lsls	r3, r3, #23
 8001c36:	2200      	movs	r2, #0
 8001c38:	0018      	movs	r0, r3
 8001c3a:	f7ff f939 	bl	8000eb0 <HAL_GPIO_WritePin>
 8001c3e:	e121      	b.n	8001e84 <main+0x4b8>
 	  }
 	  else if (readValue < 300 ) {
 8001c40:	1dbb      	adds	r3, r7, #6
 8001c42:	881a      	ldrh	r2, [r3, #0]
 8001c44:	2396      	movs	r3, #150	; 0x96
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d234      	bcs.n	8001cb6 <main+0x2ea>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8001c4c:	23a0      	movs	r3, #160	; 0xa0
 8001c4e:	05db      	lsls	r3, r3, #23
 8001c50:	2201      	movs	r2, #1
 8001c52:	2102      	movs	r1, #2
 8001c54:	0018      	movs	r0, r3
 8001c56:	f7ff f92b 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8001c5a:	23a0      	movs	r3, #160	; 0xa0
 8001c5c:	05db      	lsls	r3, r3, #23
 8001c5e:	2201      	movs	r2, #1
 8001c60:	2104      	movs	r1, #4
 8001c62:	0018      	movs	r0, r3
 8001c64:	f7ff f924 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 8001c68:	23a0      	movs	r3, #160	; 0xa0
 8001c6a:	05db      	lsls	r3, r3, #23
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	2108      	movs	r1, #8
 8001c70:	0018      	movs	r0, r3
 8001c72:	f7ff f91d 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001c76:	23a0      	movs	r3, #160	; 0xa0
 8001c78:	05db      	lsls	r3, r3, #23
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2110      	movs	r1, #16
 8001c7e:	0018      	movs	r0, r3
 8001c80:	f7ff f916 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8001c84:	2380      	movs	r3, #128	; 0x80
 8001c86:	0059      	lsls	r1, r3, #1
 8001c88:	23a0      	movs	r3, #160	; 0xa0
 8001c8a:	05db      	lsls	r3, r3, #23
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	0018      	movs	r0, r3
 8001c90:	f7ff f90e 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8001c94:	2380      	movs	r3, #128	; 0x80
 8001c96:	0099      	lsls	r1, r3, #2
 8001c98:	23a0      	movs	r3, #160	; 0xa0
 8001c9a:	05db      	lsls	r3, r3, #23
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	f7ff f906 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 8001ca4:	2380      	movs	r3, #128	; 0x80
 8001ca6:	00d9      	lsls	r1, r3, #3
 8001ca8:	23a0      	movs	r3, #160	; 0xa0
 8001caa:	05db      	lsls	r3, r3, #23
 8001cac:	2200      	movs	r2, #0
 8001cae:	0018      	movs	r0, r3
 8001cb0:	f7ff f8fe 	bl	8000eb0 <HAL_GPIO_WritePin>
 8001cb4:	e0e6      	b.n	8001e84 <main+0x4b8>
 	  }
 	  else if (readValue > 1800 ) {
 8001cb6:	1dbb      	adds	r3, r7, #6
 8001cb8:	881a      	ldrh	r2, [r3, #0]
 8001cba:	23e1      	movs	r3, #225	; 0xe1
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d936      	bls.n	8001d30 <main+0x364>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8001cc2:	23a0      	movs	r3, #160	; 0xa0
 8001cc4:	05db      	lsls	r3, r3, #23
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	2102      	movs	r1, #2
 8001cca:	0018      	movs	r0, r3
 8001ccc:	f7ff f8f0 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8001cd0:	23a0      	movs	r3, #160	; 0xa0
 8001cd2:	05db      	lsls	r3, r3, #23
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	2104      	movs	r1, #4
 8001cd8:	0018      	movs	r0, r3
 8001cda:	f7ff f8e9 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 8001cde:	23a0      	movs	r3, #160	; 0xa0
 8001ce0:	05db      	lsls	r3, r3, #23
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	2108      	movs	r1, #8
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	f7ff f8e2 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001cec:	23a0      	movs	r3, #160	; 0xa0
 8001cee:	05db      	lsls	r3, r3, #23
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2110      	movs	r1, #16
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	f7ff f8db 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8001cfa:	2380      	movs	r3, #128	; 0x80
 8001cfc:	0059      	lsls	r1, r3, #1
 8001cfe:	23a0      	movs	r3, #160	; 0xa0
 8001d00:	05db      	lsls	r3, r3, #23
 8001d02:	2201      	movs	r2, #1
 8001d04:	0018      	movs	r0, r3
 8001d06:	f7ff f8d3 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8001d0a:	2380      	movs	r3, #128	; 0x80
 8001d0c:	0099      	lsls	r1, r3, #2
 8001d0e:	23a0      	movs	r3, #160	; 0xa0
 8001d10:	05db      	lsls	r3, r3, #23
 8001d12:	2201      	movs	r2, #1
 8001d14:	0018      	movs	r0, r3
 8001d16:	f7ff f8cb 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 8001d1a:	2380      	movs	r3, #128	; 0x80
 8001d1c:	00d9      	lsls	r1, r3, #3
 8001d1e:	23a0      	movs	r3, #160	; 0xa0
 8001d20:	05db      	lsls	r3, r3, #23
 8001d22:	2201      	movs	r2, #1
 8001d24:	0018      	movs	r0, r3
 8001d26:	f7ff f8c3 	bl	8000eb0 <HAL_GPIO_WritePin>
 8001d2a:	e0ab      	b.n	8001e84 <main+0x4b8>
 8001d2c:	2000002c 	.word	0x2000002c
 	  }
 	  else if (readValue < 400 ) {
 8001d30:	1dbb      	adds	r3, r7, #6
 8001d32:	881a      	ldrh	r2, [r3, #0]
 8001d34:	23c8      	movs	r3, #200	; 0xc8
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d234      	bcs.n	8001da6 <main+0x3da>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8001d3c:	23a0      	movs	r3, #160	; 0xa0
 8001d3e:	05db      	lsls	r3, r3, #23
 8001d40:	2200      	movs	r2, #0
 8001d42:	2102      	movs	r1, #2
 8001d44:	0018      	movs	r0, r3
 8001d46:	f7ff f8b3 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8001d4a:	23a0      	movs	r3, #160	; 0xa0
 8001d4c:	05db      	lsls	r3, r3, #23
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2104      	movs	r1, #4
 8001d52:	0018      	movs	r0, r3
 8001d54:	f7ff f8ac 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 8001d58:	23a0      	movs	r3, #160	; 0xa0
 8001d5a:	05db      	lsls	r3, r3, #23
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	2108      	movs	r1, #8
 8001d60:	0018      	movs	r0, r3
 8001d62:	f7ff f8a5 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001d66:	23a0      	movs	r3, #160	; 0xa0
 8001d68:	05db      	lsls	r3, r3, #23
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	2110      	movs	r1, #16
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f7ff f89e 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8001d74:	2380      	movs	r3, #128	; 0x80
 8001d76:	0059      	lsls	r1, r3, #1
 8001d78:	23a0      	movs	r3, #160	; 0xa0
 8001d7a:	05db      	lsls	r3, r3, #23
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	0018      	movs	r0, r3
 8001d80:	f7ff f896 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8001d84:	2380      	movs	r3, #128	; 0x80
 8001d86:	0099      	lsls	r1, r3, #2
 8001d88:	23a0      	movs	r3, #160	; 0xa0
 8001d8a:	05db      	lsls	r3, r3, #23
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	0018      	movs	r0, r3
 8001d90:	f7ff f88e 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	00d9      	lsls	r1, r3, #3
 8001d98:	23a0      	movs	r3, #160	; 0xa0
 8001d9a:	05db      	lsls	r3, r3, #23
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	0018      	movs	r0, r3
 8001da0:	f7ff f886 	bl	8000eb0 <HAL_GPIO_WritePin>
 8001da4:	e06e      	b.n	8001e84 <main+0x4b8>
 	  }
 	  else if (readValue < 500 ) {
 8001da6:	1dbb      	adds	r3, r7, #6
 8001da8:	881a      	ldrh	r2, [r3, #0]
 8001daa:	23fa      	movs	r3, #250	; 0xfa
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d234      	bcs.n	8001e1c <main+0x450>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8001db2:	23a0      	movs	r3, #160	; 0xa0
 8001db4:	05db      	lsls	r3, r3, #23
 8001db6:	2201      	movs	r2, #1
 8001db8:	2102      	movs	r1, #2
 8001dba:	0018      	movs	r0, r3
 8001dbc:	f7ff f878 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8001dc0:	23a0      	movs	r3, #160	; 0xa0
 8001dc2:	05db      	lsls	r3, r3, #23
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	2104      	movs	r1, #4
 8001dc8:	0018      	movs	r0, r3
 8001dca:	f7ff f871 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 8001dce:	23a0      	movs	r3, #160	; 0xa0
 8001dd0:	05db      	lsls	r3, r3, #23
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	2108      	movs	r1, #8
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f7ff f86a 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001ddc:	23a0      	movs	r3, #160	; 0xa0
 8001dde:	05db      	lsls	r3, r3, #23
 8001de0:	2201      	movs	r2, #1
 8001de2:	2110      	movs	r1, #16
 8001de4:	0018      	movs	r0, r3
 8001de6:	f7ff f863 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8001dea:	2380      	movs	r3, #128	; 0x80
 8001dec:	0059      	lsls	r1, r3, #1
 8001dee:	23a0      	movs	r3, #160	; 0xa0
 8001df0:	05db      	lsls	r3, r3, #23
 8001df2:	2201      	movs	r2, #1
 8001df4:	0018      	movs	r0, r3
 8001df6:	f7ff f85b 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8001dfa:	2380      	movs	r3, #128	; 0x80
 8001dfc:	0099      	lsls	r1, r3, #2
 8001dfe:	23a0      	movs	r3, #160	; 0xa0
 8001e00:	05db      	lsls	r3, r3, #23
 8001e02:	2201      	movs	r2, #1
 8001e04:	0018      	movs	r0, r3
 8001e06:	f7ff f853 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 8001e0a:	2380      	movs	r3, #128	; 0x80
 8001e0c:	00d9      	lsls	r1, r3, #3
 8001e0e:	23a0      	movs	r3, #160	; 0xa0
 8001e10:	05db      	lsls	r3, r3, #23
 8001e12:	2201      	movs	r2, #1
 8001e14:	0018      	movs	r0, r3
 8001e16:	f7ff f84b 	bl	8000eb0 <HAL_GPIO_WritePin>
 8001e1a:	e033      	b.n	8001e84 <main+0x4b8>
 	  }
 	  else {
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8001e1c:	23a0      	movs	r3, #160	; 0xa0
 8001e1e:	05db      	lsls	r3, r3, #23
 8001e20:	2201      	movs	r2, #1
 8001e22:	2102      	movs	r1, #2
 8001e24:	0018      	movs	r0, r3
 8001e26:	f7ff f843 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8001e2a:	23a0      	movs	r3, #160	; 0xa0
 8001e2c:	05db      	lsls	r3, r3, #23
 8001e2e:	2201      	movs	r2, #1
 8001e30:	2104      	movs	r1, #4
 8001e32:	0018      	movs	r0, r3
 8001e34:	f7ff f83c 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 8001e38:	23a0      	movs	r3, #160	; 0xa0
 8001e3a:	05db      	lsls	r3, r3, #23
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	2108      	movs	r1, #8
 8001e40:	0018      	movs	r0, r3
 8001e42:	f7ff f835 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001e46:	23a0      	movs	r3, #160	; 0xa0
 8001e48:	05db      	lsls	r3, r3, #23
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	2110      	movs	r1, #16
 8001e4e:	0018      	movs	r0, r3
 8001e50:	f7ff f82e 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8001e54:	2380      	movs	r3, #128	; 0x80
 8001e56:	0059      	lsls	r1, r3, #1
 8001e58:	23a0      	movs	r3, #160	; 0xa0
 8001e5a:	05db      	lsls	r3, r3, #23
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	0018      	movs	r0, r3
 8001e60:	f7ff f826 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8001e64:	2380      	movs	r3, #128	; 0x80
 8001e66:	0099      	lsls	r1, r3, #2
 8001e68:	23a0      	movs	r3, #160	; 0xa0
 8001e6a:	05db      	lsls	r3, r3, #23
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	0018      	movs	r0, r3
 8001e70:	f7ff f81e 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 8001e74:	2380      	movs	r3, #128	; 0x80
 8001e76:	00d9      	lsls	r1, r3, #3
 8001e78:	23a0      	movs	r3, #160	; 0xa0
 8001e7a:	05db      	lsls	r3, r3, #23
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	0018      	movs	r0, r3
 8001e80:	f7ff f816 	bl	8000eb0 <HAL_GPIO_WritePin>
 	  }
 	  HAL_Delay(50);
 8001e84:	2032      	movs	r0, #50	; 0x32
 8001e86:	f7fe fa3b 	bl	8000300 <HAL_Delay>
 	  HAL_ADC_PollForConversion(&hadc,1000);
 8001e8a:	e5ae      	b.n	80019ea <main+0x1e>

08001e8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e8c:	b590      	push	{r4, r7, lr}
 8001e8e:	b095      	sub	sp, #84	; 0x54
 8001e90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e92:	2418      	movs	r4, #24
 8001e94:	193b      	adds	r3, r7, r4
 8001e96:	0018      	movs	r0, r3
 8001e98:	2338      	movs	r3, #56	; 0x38
 8001e9a:	001a      	movs	r2, r3
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	f000 f9f3 	bl	8002288 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ea2:	1d3b      	adds	r3, r7, #4
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	2314      	movs	r3, #20
 8001ea8:	001a      	movs	r2, r3
 8001eaa:	2100      	movs	r1, #0
 8001eac:	f000 f9ec 	bl	8002288 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eb0:	4b1e      	ldr	r3, [pc, #120]	; (8001f2c <SystemClock_Config+0xa0>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a1e      	ldr	r2, [pc, #120]	; (8001f30 <SystemClock_Config+0xa4>)
 8001eb6:	401a      	ands	r2, r3
 8001eb8:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <SystemClock_Config+0xa0>)
 8001eba:	2180      	movs	r1, #128	; 0x80
 8001ebc:	0109      	lsls	r1, r1, #4
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001ec2:	0021      	movs	r1, r4
 8001ec4:	187b      	adds	r3, r7, r1
 8001ec6:	2210      	movs	r2, #16
 8001ec8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001eca:	187b      	adds	r3, r7, r1
 8001ecc:	2201      	movs	r2, #1
 8001ece:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001ed0:	187b      	adds	r3, r7, r1
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8001ed6:	187b      	adds	r3, r7, r1
 8001ed8:	22a0      	movs	r2, #160	; 0xa0
 8001eda:	0212      	lsls	r2, r2, #8
 8001edc:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ede:	187b      	adds	r3, r7, r1
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ee4:	187b      	adds	r3, r7, r1
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	f7ff f800 	bl	8000eec <HAL_RCC_OscConfig>
 8001eec:	1e03      	subs	r3, r0, #0
 8001eee:	d001      	beq.n	8001ef4 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001ef0:	f000 f8cc 	bl	800208c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ef4:	1d3b      	adds	r3, r7, #4
 8001ef6:	220f      	movs	r2, #15
 8001ef8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001efa:	1d3b      	adds	r3, r7, #4
 8001efc:	2200      	movs	r2, #0
 8001efe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f06:	1d3b      	adds	r3, r7, #4
 8001f08:	2200      	movs	r2, #0
 8001f0a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f0c:	1d3b      	adds	r3, r7, #4
 8001f0e:	2200      	movs	r2, #0
 8001f10:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f12:	1d3b      	adds	r3, r7, #4
 8001f14:	2100      	movs	r1, #0
 8001f16:	0018      	movs	r0, r3
 8001f18:	f7ff fba8 	bl	800166c <HAL_RCC_ClockConfig>
 8001f1c:	1e03      	subs	r3, r0, #0
 8001f1e:	d001      	beq.n	8001f24 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001f20:	f000 f8b4 	bl	800208c <Error_Handler>
  }
}
 8001f24:	46c0      	nop			; (mov r8, r8)
 8001f26:	46bd      	mov	sp, r7
 8001f28:	b015      	add	sp, #84	; 0x54
 8001f2a:	bd90      	pop	{r4, r7, pc}
 8001f2c:	40007000 	.word	0x40007000
 8001f30:	ffffe7ff 	.word	0xffffe7ff

08001f34 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f3a:	003b      	movs	r3, r7
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	2308      	movs	r3, #8
 8001f40:	001a      	movs	r2, r3
 8001f42:	2100      	movs	r1, #0
 8001f44:	f000 f9a0 	bl	8002288 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001f48:	4b2a      	ldr	r3, [pc, #168]	; (8001ff4 <MX_ADC_Init+0xc0>)
 8001f4a:	4a2b      	ldr	r2, [pc, #172]	; (8001ff8 <MX_ADC_Init+0xc4>)
 8001f4c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8001f4e:	4b29      	ldr	r3, [pc, #164]	; (8001ff4 <MX_ADC_Init+0xc0>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8001f54:	4b27      	ldr	r3, [pc, #156]	; (8001ff4 <MX_ADC_Init+0xc0>)
 8001f56:	22c0      	movs	r2, #192	; 0xc0
 8001f58:	0612      	lsls	r2, r2, #24
 8001f5a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001f5c:	4b25      	ldr	r3, [pc, #148]	; (8001ff4 <MX_ADC_Init+0xc0>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001f62:	4b24      	ldr	r3, [pc, #144]	; (8001ff4 <MX_ADC_Init+0xc0>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001f68:	4b22      	ldr	r3, [pc, #136]	; (8001ff4 <MX_ADC_Init+0xc0>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f6e:	4b21      	ldr	r3, [pc, #132]	; (8001ff4 <MX_ADC_Init+0xc0>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001f74:	4b1f      	ldr	r3, [pc, #124]	; (8001ff4 <MX_ADC_Init+0xc0>)
 8001f76:	2220      	movs	r2, #32
 8001f78:	2101      	movs	r1, #1
 8001f7a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001f7c:	4b1d      	ldr	r3, [pc, #116]	; (8001ff4 <MX_ADC_Init+0xc0>)
 8001f7e:	2221      	movs	r2, #33	; 0x21
 8001f80:	2100      	movs	r1, #0
 8001f82:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f84:	4b1b      	ldr	r3, [pc, #108]	; (8001ff4 <MX_ADC_Init+0xc0>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f8a:	4b1a      	ldr	r3, [pc, #104]	; (8001ff4 <MX_ADC_Init+0xc0>)
 8001f8c:	22c2      	movs	r2, #194	; 0xc2
 8001f8e:	32ff      	adds	r2, #255	; 0xff
 8001f90:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001f92:	4b18      	ldr	r3, [pc, #96]	; (8001ff4 <MX_ADC_Init+0xc0>)
 8001f94:	222c      	movs	r2, #44	; 0x2c
 8001f96:	2100      	movs	r1, #0
 8001f98:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f9a:	4b16      	ldr	r3, [pc, #88]	; (8001ff4 <MX_ADC_Init+0xc0>)
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001fa0:	4b14      	ldr	r3, [pc, #80]	; (8001ff4 <MX_ADC_Init+0xc0>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001fa6:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <MX_ADC_Init+0xc0>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8001fac:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <MX_ADC_Init+0xc0>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001fb2:	4b10      	ldr	r3, [pc, #64]	; (8001ff4 <MX_ADC_Init+0xc0>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001fb8:	4b0e      	ldr	r3, [pc, #56]	; (8001ff4 <MX_ADC_Init+0xc0>)
 8001fba:	0018      	movs	r0, r3
 8001fbc:	f7fe f9c4 	bl	8000348 <HAL_ADC_Init>
 8001fc0:	1e03      	subs	r3, r0, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8001fc4:	f000 f862 	bl	800208c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001fc8:	003b      	movs	r3, r7
 8001fca:	4a0c      	ldr	r2, [pc, #48]	; (8001ffc <MX_ADC_Init+0xc8>)
 8001fcc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001fce:	003b      	movs	r3, r7
 8001fd0:	2280      	movs	r2, #128	; 0x80
 8001fd2:	0152      	lsls	r2, r2, #5
 8001fd4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001fd6:	003a      	movs	r2, r7
 8001fd8:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <MX_ADC_Init+0xc0>)
 8001fda:	0011      	movs	r1, r2
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f7fe fc1d 	bl	800081c <HAL_ADC_ConfigChannel>
 8001fe2:	1e03      	subs	r3, r0, #0
 8001fe4:	d001      	beq.n	8001fea <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8001fe6:	f000 f851 	bl	800208c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001fea:	46c0      	nop			; (mov r8, r8)
 8001fec:	46bd      	mov	sp, r7
 8001fee:	b002      	add	sp, #8
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	46c0      	nop			; (mov r8, r8)
 8001ff4:	2000002c 	.word	0x2000002c
 8001ff8:	40012400 	.word	0x40012400
 8001ffc:	24000200 	.word	0x24000200

08002000 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002000:	b590      	push	{r4, r7, lr}
 8002002:	b089      	sub	sp, #36	; 0x24
 8002004:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002006:	240c      	movs	r4, #12
 8002008:	193b      	adds	r3, r7, r4
 800200a:	0018      	movs	r0, r3
 800200c:	2314      	movs	r3, #20
 800200e:	001a      	movs	r2, r3
 8002010:	2100      	movs	r1, #0
 8002012:	f000 f939 	bl	8002288 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002016:	4b1b      	ldr	r3, [pc, #108]	; (8002084 <MX_GPIO_Init+0x84>)
 8002018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800201a:	4b1a      	ldr	r3, [pc, #104]	; (8002084 <MX_GPIO_Init+0x84>)
 800201c:	2101      	movs	r1, #1
 800201e:	430a      	orrs	r2, r1
 8002020:	62da      	str	r2, [r3, #44]	; 0x2c
 8002022:	4b18      	ldr	r3, [pc, #96]	; (8002084 <MX_GPIO_Init+0x84>)
 8002024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002026:	2201      	movs	r2, #1
 8002028:	4013      	ands	r3, r2
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800202e:	4b15      	ldr	r3, [pc, #84]	; (8002084 <MX_GPIO_Init+0x84>)
 8002030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002032:	4b14      	ldr	r3, [pc, #80]	; (8002084 <MX_GPIO_Init+0x84>)
 8002034:	2102      	movs	r1, #2
 8002036:	430a      	orrs	r2, r1
 8002038:	62da      	str	r2, [r3, #44]	; 0x2c
 800203a:	4b12      	ldr	r3, [pc, #72]	; (8002084 <MX_GPIO_Init+0x84>)
 800203c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203e:	2202      	movs	r2, #2
 8002040:	4013      	ands	r3, r2
 8002042:	607b      	str	r3, [r7, #4]
 8002044:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_2
 8002046:	4910      	ldr	r1, [pc, #64]	; (8002088 <MX_GPIO_Init+0x88>)
 8002048:	23a0      	movs	r3, #160	; 0xa0
 800204a:	05db      	lsls	r3, r3, #23
 800204c:	2200      	movs	r2, #0
 800204e:	0018      	movs	r0, r3
 8002050:	f7fe ff2e 	bl	8000eb0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA10 PA9 PA8 PA2
                           PA3 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_2
 8002054:	0021      	movs	r1, r4
 8002056:	187b      	adds	r3, r7, r1
 8002058:	4a0b      	ldr	r2, [pc, #44]	; (8002088 <MX_GPIO_Init+0x88>)
 800205a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800205c:	187b      	adds	r3, r7, r1
 800205e:	2201      	movs	r2, #1
 8002060:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	187b      	adds	r3, r7, r1
 8002064:	2200      	movs	r2, #0
 8002066:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002068:	187b      	adds	r3, r7, r1
 800206a:	2200      	movs	r2, #0
 800206c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206e:	187a      	adds	r2, r7, r1
 8002070:	23a0      	movs	r3, #160	; 0xa0
 8002072:	05db      	lsls	r3, r3, #23
 8002074:	0011      	movs	r1, r2
 8002076:	0018      	movs	r0, r3
 8002078:	f7fe fda4 	bl	8000bc4 <HAL_GPIO_Init>

}
 800207c:	46c0      	nop			; (mov r8, r8)
 800207e:	46bd      	mov	sp, r7
 8002080:	b009      	add	sp, #36	; 0x24
 8002082:	bd90      	pop	{r4, r7, pc}
 8002084:	40021000 	.word	0x40021000
 8002088:	0000071e 	.word	0x0000071e

0800208c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002090:	46c0      	nop			; (mov r8, r8)
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
	...

08002098 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800209c:	4b07      	ldr	r3, [pc, #28]	; (80020bc <HAL_MspInit+0x24>)
 800209e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020a0:	4b06      	ldr	r3, [pc, #24]	; (80020bc <HAL_MspInit+0x24>)
 80020a2:	2101      	movs	r1, #1
 80020a4:	430a      	orrs	r2, r1
 80020a6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80020a8:	4b04      	ldr	r3, [pc, #16]	; (80020bc <HAL_MspInit+0x24>)
 80020aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020ac:	4b03      	ldr	r3, [pc, #12]	; (80020bc <HAL_MspInit+0x24>)
 80020ae:	2180      	movs	r1, #128	; 0x80
 80020b0:	0549      	lsls	r1, r1, #21
 80020b2:	430a      	orrs	r2, r1
 80020b4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020b6:	46c0      	nop			; (mov r8, r8)
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40021000 	.word	0x40021000

080020c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020c0:	b590      	push	{r4, r7, lr}
 80020c2:	b089      	sub	sp, #36	; 0x24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c8:	240c      	movs	r4, #12
 80020ca:	193b      	adds	r3, r7, r4
 80020cc:	0018      	movs	r0, r3
 80020ce:	2314      	movs	r3, #20
 80020d0:	001a      	movs	r2, r3
 80020d2:	2100      	movs	r1, #0
 80020d4:	f000 f8d8 	bl	8002288 <memset>
  if(hadc->Instance==ADC1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a14      	ldr	r2, [pc, #80]	; (8002130 <HAL_ADC_MspInit+0x70>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d121      	bne.n	8002126 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020e2:	4b14      	ldr	r3, [pc, #80]	; (8002134 <HAL_ADC_MspInit+0x74>)
 80020e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020e6:	4b13      	ldr	r3, [pc, #76]	; (8002134 <HAL_ADC_MspInit+0x74>)
 80020e8:	2180      	movs	r1, #128	; 0x80
 80020ea:	0089      	lsls	r1, r1, #2
 80020ec:	430a      	orrs	r2, r1
 80020ee:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f0:	4b10      	ldr	r3, [pc, #64]	; (8002134 <HAL_ADC_MspInit+0x74>)
 80020f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020f4:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <HAL_ADC_MspInit+0x74>)
 80020f6:	2102      	movs	r1, #2
 80020f8:	430a      	orrs	r2, r1
 80020fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80020fc:	4b0d      	ldr	r3, [pc, #52]	; (8002134 <HAL_ADC_MspInit+0x74>)
 80020fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002100:	2202      	movs	r2, #2
 8002102:	4013      	ands	r3, r2
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002108:	193b      	adds	r3, r7, r4
 800210a:	2202      	movs	r2, #2
 800210c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800210e:	193b      	adds	r3, r7, r4
 8002110:	2203      	movs	r2, #3
 8002112:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	193b      	adds	r3, r7, r4
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800211a:	193b      	adds	r3, r7, r4
 800211c:	4a06      	ldr	r2, [pc, #24]	; (8002138 <HAL_ADC_MspInit+0x78>)
 800211e:	0019      	movs	r1, r3
 8002120:	0010      	movs	r0, r2
 8002122:	f7fe fd4f 	bl	8000bc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002126:	46c0      	nop			; (mov r8, r8)
 8002128:	46bd      	mov	sp, r7
 800212a:	b009      	add	sp, #36	; 0x24
 800212c:	bd90      	pop	{r4, r7, pc}
 800212e:	46c0      	nop			; (mov r8, r8)
 8002130:	40012400 	.word	0x40012400
 8002134:	40021000 	.word	0x40021000
 8002138:	50000400 	.word	0x50000400

0800213c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002140:	46c0      	nop			; (mov r8, r8)
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800214a:	e7fe      	b.n	800214a <HardFault_Handler+0x4>

0800214c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002150:	46c0      	nop			; (mov r8, r8)
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800215a:	46c0      	nop			; (mov r8, r8)
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002164:	f7fe f8b0 	bl	80002c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002168:	46c0      	nop			; (mov r8, r8)
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8002174:	4b17      	ldr	r3, [pc, #92]	; (80021d4 <SystemInit+0x64>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	4b16      	ldr	r3, [pc, #88]	; (80021d4 <SystemInit+0x64>)
 800217a:	2180      	movs	r1, #128	; 0x80
 800217c:	0049      	lsls	r1, r1, #1
 800217e:	430a      	orrs	r2, r1
 8002180:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8002182:	4b14      	ldr	r3, [pc, #80]	; (80021d4 <SystemInit+0x64>)
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <SystemInit+0x64>)
 8002188:	4913      	ldr	r1, [pc, #76]	; (80021d8 <SystemInit+0x68>)
 800218a:	400a      	ands	r2, r1
 800218c:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800218e:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <SystemInit+0x64>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <SystemInit+0x64>)
 8002194:	4911      	ldr	r1, [pc, #68]	; (80021dc <SystemInit+0x6c>)
 8002196:	400a      	ands	r2, r1
 8002198:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800219a:	4b0e      	ldr	r3, [pc, #56]	; (80021d4 <SystemInit+0x64>)
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	4b0d      	ldr	r3, [pc, #52]	; (80021d4 <SystemInit+0x64>)
 80021a0:	2101      	movs	r1, #1
 80021a2:	438a      	bics	r2, r1
 80021a4:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80021a6:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <SystemInit+0x64>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	4b0a      	ldr	r3, [pc, #40]	; (80021d4 <SystemInit+0x64>)
 80021ac:	490c      	ldr	r1, [pc, #48]	; (80021e0 <SystemInit+0x70>)
 80021ae:	400a      	ands	r2, r1
 80021b0:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80021b2:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <SystemInit+0x64>)
 80021b4:	68da      	ldr	r2, [r3, #12]
 80021b6:	4b07      	ldr	r3, [pc, #28]	; (80021d4 <SystemInit+0x64>)
 80021b8:	490a      	ldr	r1, [pc, #40]	; (80021e4 <SystemInit+0x74>)
 80021ba:	400a      	ands	r2, r1
 80021bc:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80021be:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <SystemInit+0x64>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021c4:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <SystemInit+0x78>)
 80021c6:	2280      	movs	r2, #128	; 0x80
 80021c8:	0512      	lsls	r2, r2, #20
 80021ca:	609a      	str	r2, [r3, #8]
#endif
}
 80021cc:	46c0      	nop			; (mov r8, r8)
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	40021000 	.word	0x40021000
 80021d8:	88ff400c 	.word	0x88ff400c
 80021dc:	fef6fff6 	.word	0xfef6fff6
 80021e0:	fffbffff 	.word	0xfffbffff
 80021e4:	ff02ffff 	.word	0xff02ffff
 80021e8:	e000ed00 	.word	0xe000ed00

080021ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80021ec:	480d      	ldr	r0, [pc, #52]	; (8002224 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80021ee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80021f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80021f2:	e003      	b.n	80021fc <LoopCopyDataInit>

080021f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80021f4:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80021f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80021f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80021fa:	3104      	adds	r1, #4

080021fc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80021fc:	480b      	ldr	r0, [pc, #44]	; (800222c <LoopForever+0xa>)
  ldr  r3, =_edata
 80021fe:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <LoopForever+0xe>)
  adds  r2, r0, r1
 8002200:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002202:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002204:	d3f6      	bcc.n	80021f4 <CopyDataInit>
  ldr  r2, =_sbss
 8002206:	4a0b      	ldr	r2, [pc, #44]	; (8002234 <LoopForever+0x12>)
  b  LoopFillZerobss
 8002208:	e002      	b.n	8002210 <LoopFillZerobss>

0800220a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800220a:	2300      	movs	r3, #0
  str  r3, [r2]
 800220c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800220e:	3204      	adds	r2, #4

08002210 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8002210:	4b09      	ldr	r3, [pc, #36]	; (8002238 <LoopForever+0x16>)
  cmp  r2, r3
 8002212:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002214:	d3f9      	bcc.n	800220a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002216:	f7ff ffab 	bl	8002170 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800221a:	f000 f811 	bl	8002240 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800221e:	f7ff fbd5 	bl	80019cc <main>

08002222 <LoopForever>:

LoopForever:
    b LoopForever
 8002222:	e7fe      	b.n	8002222 <LoopForever>
  ldr   r0, =_estack
 8002224:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8002228:	080022d4 	.word	0x080022d4
  ldr  r0, =_sdata
 800222c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002230:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002234:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002238:	20000088 	.word	0x20000088

0800223c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800223c:	e7fe      	b.n	800223c <ADC1_COMP_IRQHandler>
	...

08002240 <__libc_init_array>:
 8002240:	b570      	push	{r4, r5, r6, lr}
 8002242:	2600      	movs	r6, #0
 8002244:	4d0c      	ldr	r5, [pc, #48]	; (8002278 <__libc_init_array+0x38>)
 8002246:	4c0d      	ldr	r4, [pc, #52]	; (800227c <__libc_init_array+0x3c>)
 8002248:	1b64      	subs	r4, r4, r5
 800224a:	10a4      	asrs	r4, r4, #2
 800224c:	42a6      	cmp	r6, r4
 800224e:	d109      	bne.n	8002264 <__libc_init_array+0x24>
 8002250:	2600      	movs	r6, #0
 8002252:	f000 f821 	bl	8002298 <_init>
 8002256:	4d0a      	ldr	r5, [pc, #40]	; (8002280 <__libc_init_array+0x40>)
 8002258:	4c0a      	ldr	r4, [pc, #40]	; (8002284 <__libc_init_array+0x44>)
 800225a:	1b64      	subs	r4, r4, r5
 800225c:	10a4      	asrs	r4, r4, #2
 800225e:	42a6      	cmp	r6, r4
 8002260:	d105      	bne.n	800226e <__libc_init_array+0x2e>
 8002262:	bd70      	pop	{r4, r5, r6, pc}
 8002264:	00b3      	lsls	r3, r6, #2
 8002266:	58eb      	ldr	r3, [r5, r3]
 8002268:	4798      	blx	r3
 800226a:	3601      	adds	r6, #1
 800226c:	e7ee      	b.n	800224c <__libc_init_array+0xc>
 800226e:	00b3      	lsls	r3, r6, #2
 8002270:	58eb      	ldr	r3, [r5, r3]
 8002272:	4798      	blx	r3
 8002274:	3601      	adds	r6, #1
 8002276:	e7f2      	b.n	800225e <__libc_init_array+0x1e>
 8002278:	080022cc 	.word	0x080022cc
 800227c:	080022cc 	.word	0x080022cc
 8002280:	080022cc 	.word	0x080022cc
 8002284:	080022d0 	.word	0x080022d0

08002288 <memset>:
 8002288:	0003      	movs	r3, r0
 800228a:	1882      	adds	r2, r0, r2
 800228c:	4293      	cmp	r3, r2
 800228e:	d100      	bne.n	8002292 <memset+0xa>
 8002290:	4770      	bx	lr
 8002292:	7019      	strb	r1, [r3, #0]
 8002294:	3301      	adds	r3, #1
 8002296:	e7f9      	b.n	800228c <memset+0x4>

08002298 <_init>:
 8002298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800229e:	bc08      	pop	{r3}
 80022a0:	469e      	mov	lr, r3
 80022a2:	4770      	bx	lr

080022a4 <_fini>:
 80022a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022aa:	bc08      	pop	{r3}
 80022ac:	469e      	mov	lr, r3
 80022ae:	4770      	bx	lr
